!function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class s{static prime(t){let e=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973];return void 0===t?e:e.slice(0,Math.max(e.length,t))}static dividers(t){let e;const i=Math.sqrt(t);e=[];for(let s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return e.sort((function(t,e){return t-e})),e}static gcd(...t){let e=function(t,i){return 0===i?t:e(i,t%i)},i=1,s=2;if(0===t.length)return 1;if(1===t.length)return 0===t[0]?1:t[0];if(i=e(t[0],t[1]),1===i)return 1;for(s=2;s<t.length&&(i=e(i,t[s]),1!==i);s++);return Math.abs(i)}static lcm(...t){return t.reduce((function(t,e){return Math.abs(t*e/s.gcd(t,e))}))}static randomBool(t=.5){return Math.random()<t}static randomInt(t,e){return void 0===e?s.randomInt(0,t):Math.floor(Math.random()*(e-t+1)+t)}static randomIntSym(t,e){return!1===e?s.randomBool()?this.randomInt(1,t):-this.randomInt(1,t):s.randomInt(-t,t)}}class r{constructor(t){return this.zero=()=>(this._numerator=0,this._denominator=1,this),this.clone=()=>{let t=new r;return t.numerator=+this._numerator,t.denominator=+this._denominator,t},this.parse=(t,e)=>{let i;switch(typeof t){case"string":if(i=t.split("/"),1===i.length)return this.parse(+i[0]);2===i.length?"0"===i[1]?(this._numerator=NaN,this._denominator=1):(this._numerator=+i[0],this._denominator=+i[1]):(this._numerator=NaN,this._denominator=1);break;case"number":if(Number.isSafeInteger(t))this._numerator=t,this._denominator=1;else{let i=t.toString().split(".")[1].length;void 0===e?(this._numerator=t*Math.pow(10,i),this._denominator=Math.pow(10,i)):Number.isSafeInteger(e)&&(this._numerator=t*Math.pow(10,i)-Math.floor(t*Math.pow(10,i-e)),this.denominator=Math.pow(10,i)-Math.pow(10,i-e))}}return this},this.parseByInteger=(t,e)=>(Number.isSafeInteger(t)&&(this._numerator=t),void 0!==e&&Number.isSafeInteger(e)?this._denominator=e:this._denominator=1,this),this.reduce=()=>{let t=s.gcd(this._numerator,this._denominator);return this._numerator=this._numerator/t,this._denominator=this._denominator/t,this._denominator<0&&(this._denominator=-this._denominator,this._numerator=-this._numerator),this},this.invalid=()=>{let t=new r;return t._numerator=NaN,t._denominator=1,t},this.infinite=()=>{let t=new r;return t._numerator=1/0,t._denominator=1,t},this.opposed=()=>(this._numerator=-this._numerator,this),this.multiply=t=>(this._numerator=this._numerator*t.numerator,this._denominator=this._denominator*t.denominator,this.reduce()),this.multiplyByInt=t=>(this._numerator=this._numerator*t,this.reduce()),this.amplify=t=>(Number.isSafeInteger(t)&&(this._numerator*=t,this._denominator*=t),this),this.divide=t=>{if(0===t.numerator)return(new r).infinite();let e=+this._numerator,i=+this._denominator;return this._numerator=e*t.denominator,this._denominator=i*t.numerator,this.reduce()},this.add=t=>{let e=this._numerator,i=this._denominator;return this._numerator=e*t.denominator+t.numerator*i,this._denominator=i*t.denominator,this.reduce()},this.substract=t=>this.add(t.clone().opposed()),this.pow=t=>Number.isSafeInteger(t)?(this.reduce(),t>0?(this._numerator=this._numerator**t,this._denominator=this._denominator**t):(this._numerator=this._denominator**t,this._denominator=this._numerator**t),this):this.invalid(),this.sqrt=()=>this,this.abs=()=>(this._numerator=Math.abs(this._numerator),this._denominator=Math.abs(this._denominator),this),this.sign=()=>this._numerator*this._denominator>=0?1:-1,this.isEqual=t=>{let e=t.clone().reduce(),i=this.clone().reduce();return i.numerator===e.numerator&&i.denominator===e.denominator},this.areEquals=(...t)=>{for(let e=0;e<t.length;e++)if(!this.isEqual(t[e]))return!1;return!0},this.compare=(t,e)=>{switch(void 0===e&&(e="="),e){case">":return this.value>t.value;case">=":return this.value>=t.value;case"<":return this.value<t.value;case"<=":return this.value<=t.value;case"=":return this.isEqual(t);case"<>":return!this.isEqual(t);default:return!1}},this.lesser=t=>this.compare(t,"<"),this.leq=t=>this.compare(t,"<="),this.greater=t=>this.compare(t,">"),this.geq=t=>this.compare(t,">="),this.isInfinity=()=>this._numerator===1/0,this.isFinite=()=>!this.isInfinity(),this._numerator=1,this._denominator=1,void 0!==t&&this.parse(t),this}isFraction(){return!0}set numerator(t){this._numerator=t}set denominator(t){this._denominator=t}get numerator(){return this._numerator}get denominator(){return this._denominator}get value(){return this._numerator/this._denominator}get display(){return 1===this._denominator?`${this._numerator}`:`${this._numerator}/${this._denominator}`}get frac(){return 1===this._denominator?`${this._numerator}`:`\\frac{ ${this._numerator} }{ ${this._denominator} }`}get dfrac(){return 1===this._denominator?`${this._numerator}`:this._numerator>0?`\\dfrac{ ${this._numerator} }{ ${this._denominator} }`:`-\\dfrac{ ${Math.abs(this._numerator)} }{ ${this._denominator} }`}}class o{constructor(){return this.parse=t=>{this.literalStr=t,this._coefficient=new r;for(const e of[...t.replace(/([a-z])|(\^[+-]?[0-9]+)/g,",").split(",")])""!==e.trim()&&this._coefficient.multiply((new r).parse(e.trim()));return this},this.clean=()=>{for(let t in this._literal)0===this._literal[t]&&delete this._literal[t];return this},this.zero=()=>(this._coefficient=(new r).zero(),this._literal={},this),this.clone=()=>{let t=new o;t.coefficient=this._coefficient.clone();for(let e in this._literal)t.letter(e,this._literal[e]);return t},this.random=(t="x",e=1,i=!1,r=!0)=>{this.coefficient.parseByInteger(s.randomIntSym(10,r),i?s.randomInt(1,10):1);for(let i of t.split(""))this.letter(i,t.length>1?s.randomInt(e):e);return this},this.letter=(t,e)=>{e<=0||!Number.isSafeInteger(e)?void 0!==this._literal[t]&&delete this._literal[t]:this._literal[t]=e},this.isSameAs=t=>{let e=Object.keys(this._literal),i=Object.keys(t.literal),s=e.concat(i.filter(t=>e.indexOf(t)<0));for(let e of s){if(void 0===this._literal[e]||void 0===t.literal[e])return!1;if(this._literal[e]!==t.literal[e])return!1}return!0},this.areSameAs=(...t)=>{for(let e=0;e<t.length;e++)if(!this.isSameAs(t[e]))return!1;return!0},this.isEqual=t=>!!this.isSameAs(t)&&this._coefficient.isEqual(t.coefficient),this.areEquals=(...t)=>{if(!this.areSameAs(...t))return!1;for(let e of t)if(!this._coefficient.isEqual(e.coefficient))return!1;return!0},this.degree=t=>0===Object.entries(this._literal).length?0:void 0===t?Object.values(this._literal).reduce((t,e)=>t+e):void 0===this._literal[t]?0:this._literal[t],this.hasLetter=t=>(void 0===t&&(t="x"),void 0!==this._literal[t]&&0!==this._literal[t]),this.opposed=()=>(this._coefficient.opposed(),this),this.add=(...t)=>{for(let e of t)this.isSameAs(e)?this._coefficient.add(e.coefficient):console.log("Add: Is not similar: ",e.display);return this},this.substract=(...t)=>{for(let e of t)this.isSameAs(e)?this._coefficient.add(e.coefficient.clone().opposed()):console.log("Substract: Is not similar: ",e.display);return this},this.multiply=(...t)=>{for(let e of t){this._coefficient.multiply(e.coefficient);for(let t in e.literal)this._literal[t]=void 0===this._literal[t]?e.literal[t]:this._literal[t]+e.literal[t]}return this},this.divide=(...t)=>{for(let e of t){this._coefficient.divide(e.coefficient);for(let t in e.literal)this._literal[t]=void 0===this._literal[t]?-e.literal[t]:this._literal[t]-e.literal[t],0===this._literal[t]&&delete this._literal[t]}return this},this.pow=t=>{this._coefficient.pow(t);for(let e in this._literal)this._literal[e]*=t;return this},this.evaluate=t=>{let e=this.coefficient.clone();for(let i in this._literal){if(void 0===t[i])return(new r).zero();e.multiply(t[i].clone().pow(this._literal[i]))}return e},this._coefficient=(new r).zero(),this._literal={},this}isMonom(){return!0}set coefficient(t){this._coefficient=t}set literal(t){this._literal=t}set literalStr(t){for(const e of[...t.matchAll(/([a-z])\^([+-]?[0-9]+)/g)])e[1]in this._literal||(this._literal[e[1]]=0),this._literal[e[1]]+=+e[2];for(const e of[...t.matchAll(/([a-z](?!\^))/g)])e[1]in this._literal||(this._literal[e[1]]=0),this._literal[e[1]]+=1}get coefficient(){return this._coefficient}get literal(){return this._literal}get isZero(){return 0===this._coefficient.value}get isMultiVariable(){let t=0;for(let e in this._literal)0!=this._literal[e]&&t++;return t>1}get variables(){return this.clean(),Object.keys(this._literal)}get numberOfVar(){return this.variables.length}get display(){let t="";for(let e in this._literal)0!==this._literal[e]&&(t+=`${e}`,this._literal[e]>1&&(t+=`^${this._literal[e]}`));return""===t?0!=this._coefficient.value?`${this._coefficient.display}`:"":1===this._coefficient.value?t:-1===this._coefficient.value?`-${t}`:0===this._coefficient.value?"0":`${this._coefficient.display}${t}`}get tex(){let t="";for(let e in this._literal)0!==this._literal[e]&&(t+=`${e}`,this._literal[e]>1&&(t+=`^${this._literal[e]}`));return""===t?0!=this._coefficient.value?`${this._coefficient.dfrac}`:"":1===this._coefficient.value?t:-1===this._coefficient.value?`-${t}`:0===this._coefficient.value?"0":`${this._coefficient.dfrac}${t}`}}o.lcm=(...t)=>{let e=new o,i=t.map(t=>t.coefficient.numerator),n=t.map(t=>t.coefficient.denominator),h=s.gcd(...i),l=s.lcm(...n);e.coefficient=(new r).parseByInteger(h,l).reduce();for(let i of t){for(let t in e.literal)t in i.literal||(e.literal[t]=0);for(let t in i.literal)void 0===e.literal[t]&&i.literal[t]>0?e.literal[t]=i.literal[t]:e.literal[t]=Math.min(i.literal[t],e.literal[t])}return e},o.xmultiply=(t,e)=>t.clone().multiply(e);class n{constructor(){this._rpn=[]}isOperation(t){return!!t[0].match(/[\+\-\*\/\^]/g)||!!t.match(/^sin|cos|tan/g)}NextToken(t,e){let i,s="",r="monom";return i=t.substr(e).match(/^[0-9\/a-z\^]+/g)||[],i.length>0?(s=i[0],r="monom"):t[e].match(/[\+\-\*\/\^]/g)?(s=t[e],r="operation"):"("===t[e]?(s="(",r="("):")"===t[e]?(s=")",r=")"):","===t[e]?(s=",",r="function-argument"):t.match(/^(sin|cos|tan)/g)?(s=")",r=")"):(s=i[0],r="monom",""===s&&(s=t[e],r="monom",console.log("SHUTING YARD - NEXT TOKEN: error at ",e))),[s,e+s.length,r]}Uniformizer(t){let e;return e=t.replace(/\)\(/g,")*("),e=e.replace(/([\da-z])(\()/g,"$1*$2"),e=e.replace(/(\))([\da-z])/g,"$1*$2"),e}parse(t){let e=[],i=[],s={"^":4,"*":3,"/":3,"+":2,"-":2},r={"^":"right","*":"left","/":"left","+":"left","-":"left"},o="",n=0,h="";t=this.Uniformizer(t);let l,a=50;for(;n<t.length;){if(a--,0===a){console.log("SECURITY LEVEL 1 EXIT");break}switch([o,n,h]=this.NextToken(t,n),h){case"monom":e.push(o);break;case"operation":if(i.length>0){let t=i[i.length-1];for(l=50;t in r&&("left"===r[o]&&s[o]<=s[t]||"right"===r[o]&&s[o]<s[t]);){if(l--,0===l){console.log("SECURITY LEVEL 2 OPERATION EXIT");break}e.push(i.pop()||""),t=i[i.length-1]}}i.push(o);break;case"trigo":i.push(o);break;case"function-argument":for(l=50;"("!==i[i.length-1]&&i.length>0;){if(l--,0===l){console.log("SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT");break}e.push(i.pop()||"")}break;case"(":i.push(o);break;case")":for(l=50;"("!==i[i.length-1]&&i.length>1;){if(l--,0===l){console.log("SECURITY LEVEL 2 CLOSING PARENTHESE EXIT");break}e.push(i.pop()||"")}i.pop();break;default:console.log(`SHUTING YARD: ${h} : ${o} `)}}return this._rpn=e.concat(i.reverse()),this}get rpn(){return this._rpn}}class h{constructor(t){this.isPolynom=()=>!0,this.parse=t=>(this._rawString=t,this.shutingYardToReducedPolynom(t)),this.empty=()=>(this._monoms=[],this),this.zero=()=>(this._monoms=[],this._monoms.push((new o).zero()),this),this.clone=()=>{let t=new h,e=[];for(let t of this._monoms)e.push(t.clone());return t.monoms=e,t},this.rndSimple=(t=1,e=!1,i=!1,n="x",h=!0,l=-1)=>{let a;this.empty();for(let s=t;s>=0;s--)a=(new o).random(n,s,i,s!==t&&h),e&&s===t&&(a.coefficient=(new r).parse("1")),this.addMonom(a);if(l>0&&l<this.length)for(this.reorder();this.length>l;)this._monoms.splice(s.randomInt(1,this.length-1),1);return this},this.rndFactorable=(t=2,e=!1,i="x")=>{this._factors=[];for(let s=0;s<t;s++)this._factors.push((new h).rndSimple(1,e,!1,i));this.empty().monoms=this._factors[0].monoms;for(let t=1;t<this._factors.length;t++)this.multiply(this._factors[t]);return this},this.makeItComplicate=(t=1)=>{if(this._texString="",this.degree()<1)return this;let e=s.randomInt(0,this.degree()-1),i=(new h).rndSimple(e,!1,t>1,"x",!1,t>1?-1:1),r=(new h).rndSimple(1,!1,t>1),o=this.clone().substract(i.clone().multiply(r));return o.factorizePartial(!0),this._texString=`${i.genDisplay("tex",!1,!0)} \\cdot ${r.genDisplay("tex",!1,!0)} ${o.texString} `,this},this.factorizePartial=t=>{if(this._texString="",this.length<=1)return this;let e,i,r,n,l,a;for(let u=0;u<this.length;u++){e=this._monoms[u].clone();for(let c=u+1;c<this.length;c++)if(i=this._monoms[c].clone(),l=s.gcd(e.coefficient.numerator,i.coefficient.numerator),1!==l)return r=o.lcm(e,i),a=1===e.coefficient.sign()?"+":"-",this._texString=`${!0===t?a:"+"===a?"":a}${r.tex}`,n=(new h).addMonom(e.divide(r)).addMonom(i.divide(r)),this._texString+=n.genDisplay("tex",!1,!0),this._texString+=this.clone().substract(n.clone().multiplyByMonom(r)).genDisplay("tex",!0,!1),this}return this._texString=this.genDisplay("tex",t),this},this.addMonom=(...t)=>{for(let e of t)this._monoms.push(e.clone());return this.reduce()},this.substractMonom=(...t)=>{for(let e of t)this._monoms.push(e.clone().opposed());return this.reduce()},this.reduce=()=>{for(let t=0;t<this._monoms.length;t++)for(let e=t+1;e<this._monoms.length;e++)this._monoms[t].isSameAs(this.monoms[e])&&(this._monoms[t].add(this.monoms[e]),this._monoms.splice(e,1));this._monoms=this._monoms.filter(t=>0!==t.coefficient.value);for(let t of this._monoms)t.coefficient.reduce();return 0===this.length?(new h).zero():this},this.minify=()=>(this.multiplyByInteger(this.lcmDenominator()).divideByInteger(this.gcdNumerator()).reduce(),this.reduce()),this.factorize=()=>(this._factors=[],this),this.reorder=(t="x")=>(this._monoms.sort((function(e,i){return i.degree(t)-e.degree(t)})),this.reduce()),this.opposed=()=>(this._monoms=this._monoms.map(t=>t.opposed()),this),this.add=t=>(this._monoms=this._monoms.concat(t.monoms),this.reduce()),this.substract=t=>(this._monoms=this._monoms.concat(t.clone().opposed().monoms),this.reduce()),this.multiply=t=>{let e=[];for(let i of this._monoms)for(let s of t.monoms)e.push(o.xmultiply(i,s));return this._monoms=e,this.reduce()},this.multiplyByFraction=t=>{for(let e of this._monoms)e.coefficient.multiply(t);return this.reduce()},this.multiplyByInteger=t=>this.multiplyByFraction((new r).parseByInteger(t)),this.multiplyByMonom=t=>{for(let e of this._monoms)e.multiply(t);return this.reduce()},this.mutliplyByFraction=t=>{for(let e of this._monoms)e.coefficient.multiply(t);return this},this.divideByInteger=t=>{let e=(new r).parseByInteger(t);for(let t of this._monoms)t.coefficient.divide(e);return this},this.divideByFraction=t=>{for(let e of this._monoms)e.coefficient.divide(t);return this},this.replaceBy=(t,e)=>{let i,s=(new h).zero();for(let r of this.monoms)void 0===r.literal[t]||0===r.literal[t]?s.addMonom(r.clone()):(i=+r.literal[t],delete r.literal[t],s.add(e.clone().pow(i).multiplyByMonom(r)));return this._monoms=s.reduce().reorder().monoms,this},this.divide=t=>{let e,i,s,r=t.monomByDegree();for(e=(new h).zero(),i=this.clone();i.degree()>=t.degree()&&(s=i.monomByDegree().clone().divide(r),!s.isZero);)e.addMonom(s),i.substract(t.clone().multiplyByMonom(s));return{quotient:e,reminder:i}},this.pow=t=>{if(!Number.isSafeInteger(t))return this.zero();if(t<0)return this.zero();if(0===t)return new h;let e=this.clone();for(let i=1;i<t;i++)this.multiply(e);return this.reduce()},this.degree=t=>{let e=0;for(let i of this._monoms)e=Math.max(i.degree(t),e);return e},this.monomByDegree=(t,e)=>{if(void 0===t)return this.monomByDegree(this.degree(e));let i=this.clone().reduce();for(let s of i._monoms)if(s.degree(e)===t)return s.clone();return(new o).zero()},this.evaluate=t=>{let e=(new r).zero();return this._monoms.forEach(i=>{console.log("Evaluate polynom: ",i.display,t,i.evaluate(t).display),e.add(i.evaluate(t))}),e},this.canDivide=(t,e="x")=>{const i=t.degree();let s={};if(0===i)return!t.isTrivial;if(1===i){const i=t.getZeroes();return!0!==i[0]&&!1!==i[0]&&(s[e]=i[0],0===this.evaluate(s).value)}return i>1&&(console.log("Currently, only first degree polynom are supported"),!1)},this.getZeroes=()=>{switch(this.degree()){case 0:return 0===this._monoms[0].coefficient.value?[!0]:[!1];case 1:if(1===this._monoms.length)return[(new r).zero()];{let t=this.clone().reduce().reorder();return[t.monoms[1].coefficient.opposed().divide(t.monoms[0].coefficient)]}case 2:return[!0,!1]}return[]},this.getDenominators=()=>{let t=[];for(let e of this._monoms)t.push(e.coefficient.denominator);return t},this.getNumerators=()=>{let t=[];for(let e of this._monoms)t.push(e.coefficient.numerator);return t},this.lcmDenominator=()=>s.lcm(...this.getDenominators()),this.gcdDenominator=()=>s.gcd(...this.getDenominators()),this.lcmNumerator=()=>s.lcm(...this.getNumerators()),this.gcdNumerator=()=>s.gcd(...this.getNumerators()),this.isSameAs=t=>{let e=this.clone().reduce().reorder(),i=t.clone().reduce().reorder();if(e.length!==i.length)return!1;if(e.degree()!==i.degree())return!1;for(let t in e.monoms)if(!e.monoms[t].isEqual(i.monoms[t]))return!1;return!0},this.isOpposedAt=t=>this.isSameAs(t.clone().opposed()),this.genDisplay=(t,e,i)=>{let s="";for(let i of this._monoms)0!==i.coefficient.value&&(1!==i.coefficient.sign()||""===s&&!0!==e||(s+="+"),s+="tex"===t?i.tex:i.display);return!0===i&&this.length>1&&(s="tex"===t?`\\left( ${s} \\right)`:`(${s})`),""===s&&(s="0"),s},this._monoms=[],this._factors=[],void 0!==t&&this.parse(t)}shutingYardToReducedPolynom(t){let e,i,s=(new n).parse(t),r=s.rpn,l=[];for(let t of r)if(s.isOperation(t)){switch(i=l.pop()||(new h).zero(),e=l.length>0?l.pop()||(new h).zero():new h,t){case"+":e.add(i);break;case"-":e.substract(i);break;case"*":e.multiply(i);break;default:console.log("Token not recognized in shuting yard to reduce polynom: ",t)}l.push(e)}else l.push((new h).addMonom((new o).parse(t)));return this._monoms=l[0].monoms,this}get length(){return this._monoms.length}get monoms(){return this._monoms}set monoms(t){this._monoms=t}get display(){return this.genDisplay()}get tex(){return this.genDisplay("tex")}get texString(){return this._texString}get isTrivial(){return 0===this._monoms.length&&0===this._monoms[0].coefficient.value}get isMultiVariable(){for(let t of this._monoms)if(t.isMultiVariable)return!0;return!1}get factors(){return this._factors}set factors(t){this._factors=t}get variables(){let t=[];for(let e of this._monoms)t=t.concat(e.variables);return t=[...new Set(t)],t}get numberOfVars(){return this.variables.length}}class l{constructor(){this.parse=(t,e,i)=>(this._coefficient=void 0===i?1:i,this._nth=void 0===e?2:e,this._radical=void 0===t?1:t,this._nth%2==0&&this._radical<0&&(this._isValid=!1),this),this.reduce=()=>{let t=Math.floor(Math.pow(this._radical,1/this._nth));for(;t>1;)this._radical%Math.pow(t,this._nth)!=0?t--:(this._coefficient*=t,this._radical=this._radical/Math.pow(t,this._nth),t=Math.floor(Math.pow(this._radical,1/this._nth)));return this},this.hasRadical=()=>!(1===this._radical||0===this._radical||!1===this._isValid),this.multiply=t=>(this._radical*=t.radical,this.reduce()),this._radical=1,this._coefficient=1,this._nth=2,this._isValid=!0}get radical(){return this._radical}set radical(t){this._radical=t}get nth(){return this._nth}set nth(t){Number.isSafeInteger(t)&&t>=2?this._nth=t:(console.log("Error setting the nth root"),this._nth=2)}get coefficient(){return this._coefficient}set coefficient(t){this._coefficient=t}get tex(){let t;return t=1===this._coefficient?"":-1===this._coefficient?"-":this._coefficient.toString(),1===this._radical?`${this._coefficient}`:2===this._nth?`${t}\\sqrt{${this._radical}}`:`${t}\\sqrt[${this._nth}]{${this._radical}}`}get value(){return this._coefficient*Math.pow(this._radical,1/this._nth)}}class a{constructor(t){return this._varnothing="\\varnothing",this._real="\\mathbb{R}",this.parseString=t=>{let e,i;if(i=this._findSign(t),!1!==i)return e=t.split(i),this.create((new h).parse(e[0]),(new h).parse(e[1]),this._formatSign(i));console.log("The equation is not valid (no sign found)")},this._findSign=t=>t.includes("geq")?t.includes("\\geq")?"\\geq":"geq":t.includes("leq")?t.includes("\\leq")?"\\leq":"leq":t.includes(">=")?">=":t.includes("=>")?"=>":t.includes(">")?">":t.includes("<=")?"<=":t.includes("=<")?"=<":t.includes("<")?"<":t.includes("=")?"=":(console.log("Equation: parse string : sign not found"),!1),this._formatSign=t=>void 0===t?"=":t.includes("geq")?">=":t.includes(">=")?">=":t.includes("=>")?">=":t.includes(">")?">":t.includes("leq")?"<=":t.includes("<=")?"<=":t.includes("=<")?"<=":t.includes("<")?"<":"=",this.create=(t,e,i)=>(this._left=t,this._right=e,this._sign=this._formatSign(i),this),this.clone=()=>(new a).create(this._left.clone(),this._right.clone(),this._sign+""),this.reorder=()=>{let t;this._left.substract(this._right),this._right.zero();for(let e of this._left.monoms)0===e.degree()&&(t=e.clone(),this._left.substractMonom(t).reorder(),this._right.substractMonom(t).reorder());return this},this.degree=t=>Math.max(this._left.degree(t),this._right.degree(t)),this.isMultiVariable=()=>this._left.isMultiVariable||this._right.isMultiVariable,this.isolate=t=>{if(1!==this.degree(t))return!1;if(this.isMultiVariable())return!1;let e,i;this._left.substract(this._right),this._right.zero();for(let i of this._left.monoms)i.hasLetter(t)||(e=i.clone(),this._left.addMonom(e.clone().opposed()),this._right.addMonom(e.clone().opposed()));return 1===this._left.length&&(i=this._left.monoms[0].coefficient.clone(),this._left.divideByFraction(i),this._right.divideByFraction(i),this)},this.solve=t=>{switch(this._solutions=[],this._polynom=this._left.clone().substract(this._right),this._polynom.degree(t)){case 0:case 1:this._solveDegree1(t);break;case 2:this._solveDegree2(t);break;default:this._solveDegree3plus(t)}},this.isGreater=()=>-1!==this._sign.indexOf(">")||-1!==this._sign.indexOf("geq"),this.isStrictEqual=()=>"="===this._sign,this.isAlsoEqual=()=>-1!==this._sign.indexOf("=")||(-1!==this._sign.indexOf("geq")||(-1!==this._sign.indexOf("leq")||void 0)),this._solveDegree1=t=>{const e=this._polynom.monomByDegree(1).coefficient,i=this._polynom.monomByDegree(0).coefficient,s=i.clone().opposed().divide(e).display;let r;return this.isStrictEqual()?0===e.value?0===i.value?this._solutions=[this._real]:this._solutions=[this._varnothing]:this._solutions=[s]:(r=0===e.value?0===i.value&&this.isAlsoEqual()?"\\mathbb{R}":i.value>0?this.isGreater()?this._real:this._varnothing:this.isGreater()?this._varnothing:this._real:this.isGreater()&&1===e.sign()||!this.isGreater()&&-1===e.sign()?`\\left${this.isAlsoEqual()?"\\[":"\\]"}${s};+\\infty\\right\\[`:`\\left\\]-\\infty;${s} \\right\\${this.isAlsoEqual()?"\\]":"\\["}`,this._solutions=[r]),this._solutions},this._solveDegree2=t=>{let e,i,o,n,h,a,u=this._polynom.monomByDegree(2).coefficient,c=this._polynom.monomByDegree(1).coefficient,f=this._polynom.monomByDegree(0).coefficient,m=s.lcm(u.denominator,c.denominator,f.denominator),_=u.multiplyByInt(m).value,d=c.multiplyByInt(m).value;if(e=d*d-4*_*f.multiplyByInt(m).value,e>0)if(o=(-d-Math.sqrt(e))/(2*_),n=(-d+Math.sqrt(e))/(2*_),i=(new l).parse(e).reduce(),i.hasRadical()){let t=s.gcd(d,2*_,i.coefficient);i.coefficient=i.coefficient/t;i.coefficient,i.radical;this._solutions=2*_/t==1?[`${-d/t} - ${i.tex}`,`${-d/t} + ${i.tex}`]:[`\\dfrac{${-d/t} - ${i.tex} }{ ${2*_/t} }`,`\\dfrac{${-d/t} + ${i.tex} }{ ${2*_/t} }`]}else this._solutions=[(new r).parseByInteger(-d-i.coefficient,2*_).reduce().dfrac,(new r).parseByInteger(-d+i.coefficient,2*_).reduce().dfrac];else this._solutions=0===e?[(new r).parseByInteger(-d,2*_).reduce().dfrac]:[this._varnothing];return this.isStrictEqual()||(2===this._solutions.length?(h=o<n?this._solutions[0]:this._solutions[1],a=o<n?this._solutions[1]:this._solutions[0],this.isGreater()&&1===u.sign()||!this.isGreater()&&-1===u.sign()?this._solutions=[`\\left]-\\infty ; ${h}\\right${this.isAlsoEqual()?"]":"["} \\cup \\left${this.isAlsoEqual()?"[":"]"}${a};+\\infty\\right[`]:this._solutions=[`\\left${this.isAlsoEqual()?"[":"]"}${h} ; ${a}\\right${this.isAlsoEqual()?"]":"["}`]):1===this._solutions.length&&this._solutions[0]!==this._varnothing?this.isAlsoEqual()?(this.isGreater()&&1===u.sign()||!this.isGreater()&&-1===u.sign())&&(this._solutions=[this._real]):this.isGreater()&&1===u.sign()||!this.isGreater()&&-1===u.sign()?this._solutions=[`\\left]-\\infty ; ${this._solutions[0]}\\right[ \\cup \\left]${this._solutions[0]};+\\infty\\right[`]:this._solutions=[this._varnothing]:this.isGreater()?this._solutions=[1===u.sign()?this._real:this._varnothing]:this._solutions=[-1===u.sign()?this._real:this._varnothing]),this._solutions},this._solveDegree3plus=t=>this._solutions,this.generate=(t,e)=>{let i=new h,s=new h;return(new a).create(i,s,e)},this._reverseSign=()=>"="===this._sign?this:this._sign.includes("<")?(this._sign.replace("<",">"),this):this._sign.includes(">")?(this._sign.replace(">","<"),this):this,this.multiply=t=>(this._left.multiplyByFraction(t),this._right.multiplyByFraction(t),"="!==this._sign&&-1===t.sign()&&this._reverseSign(),this),this.add=t=>(this._left.add(t.left),this._right.add(t.right),this),this.substract=t=>(this._left.substract(t.left),this._right.substract(t.right),this),void 0===t?(this._left=(new h).zero(),this._right=(new h).zero(),this._sign="="):this.parseString(t),this}get solutions(){return this._solutions}get solution(){return 1!==this._solutions.length||this._solutions[0]!==this._real&&this._solutions[0]!==this._varnothing&&!this._solutions[0].includes("\\left")?`S = \\left{ ${this._solutions.join(";")} \\right}`:`S = ${this._solutions[0]}`}get isReal(){return void 0===this._solutions&&this.solve(),this._solutions[0]===this._real}get isVarvothing(){return void 0===this._solutions&&this.solve(),this._solutions[0]===this._varnothing}get signAsTex(){return">="===this._sign||"=>"===this._sign||"geq"===this._sign?"\\geq":"<="===this._sign||"=<"===this._sign||"leq"===this._sign?"\\leq":this._sign}get tex(){return`${this._left.tex}${this.signAsTex}${this._right.tex}`}get variables(){return[...new Set(this._right.variables.concat(this._left.variables))]}get numberOfVars(){return this.variables.length}get left(){return this._left}set left(t){this._left=t}get right(){return this._right}set right(t){this._right=t}get sign(){return this._sign}set sign(t){this._sign=this._formatSign(t)}}class u{constructor(){this.create=(...t)=>(this._equations=t,this),this.log=()=>{let t;for(let e of this._equations)console.log(e.tex),t+=`${e.tex}\\n}`;return t},this.clone=()=>{let t=[];for(let e of this._equations)t.push(e.clone());return(new u).create(...t)},this.reorder=()=>{for(let t of this._equations)t.reorder();return this},this.solve=()=>{this._solutions={},this._resolutionSteps=[],this.reorder();let t=this.variables.sort();for(let e of t)this._solutions[e]=this._solveOneLetter(e,t);return this}}_solveOneLetter(t,e){console.log("SOLVE: ",t);let i=this.clone().equations,s=[];this._equations.length;for(let r of e)if(r!==t){for(let t=0;t<i.length-1;t++)s.push(this._linearReduction(i[t],i[t+1],r));this._resolutionSteps.push((new u).create(...s)),i=this._resolutionSteps[this._resolutionSteps.length-1].clone().equations,s=[]}let o=this._resolutionSteps[this._resolutionSteps.length-1].equations[0];return console.log(o.tex),o.solve(),console.log(o.solutions),{value:new r(o.solutions[0]),isReal:o.isReal,isVarnothing:o.isVarvothing}}_linearReduction(t,e,i){let s=t.left.monomByDegree(1,i).coefficient.clone(),r=e.left.monomByDegree(1,i).coefficient.clone();return t.clone().multiply(r).substract(e.clone().multiply(s)).reorder()}get isSolvable(){return this.variables.length===this._equations.length}get variables(){let t=[];for(let e of this._equations)t=t.concat(e.variables);return[...new Set(t)]}get tex(){}get texSolution(){let t=[];void 0===this._solutions&&this.solve();for(let e in this._solutions){if(this._solutions[e].isReal)return void console.log(`Undetermined (letter ${e})`);if(this._solutions[e].isVarnothing)return void console.log(`Undefined (letter ${e})`);t.push(this._solutions[e].value.dfrac)}return`(${t.join(";")})`}set equations(t){this._equations=t}get equations(){return this._equations}}window.Pi={Numeric:s,Fraction:r,Root:l,Monom:o,Polynom:h,Equation:a,LinearSystem:u}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hdGhzL251bWVyaWMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hdGhzL2ZyYWN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9tYXRocy9tb25vbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWF0aHMvc2h1dGluZ3lhcmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hdGhzL3BvbHlub20udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hdGhzL250aHJvb3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hdGhzL2VxdWF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9tYXRocy9saW5lYXJTeXN0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJOdW1lcmljIiwibmIiLCJwcmltZXMiLCJ1bmRlZmluZWQiLCJzbGljZSIsIk1hdGgiLCJtYXgiLCJsZW5ndGgiLCJEIiwibWF4ViIsInNxcnQiLCJwdXNoIiwic29ydCIsImEiLCJiIiwidmFsdWVzIiwiZ2NkMiIsImciLCJhYnMiLCJyZWR1Y2UiLCJnY2QiLCJwZXJjZW50IiwicmFuZG9tIiwicmFuZG9tSW50IiwiZmxvb3IiLCJ6ZXJvIiwicmFuZG9tQm9vbCIsInRoaXMiLCJmcmFjdGlvblN0ciIsIl9udW1lcmF0b3IiLCJfZGVub21pbmF0b3IiLCJjbG9uZSIsIkYiLCJudW1lcmF0b3IiLCJkZW5vbWluYXRvciIsInBhcnNlIiwicGVyaW9kaWMiLCJTIiwic3BsaXQiLCJOYU4iLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwidG9TdHJpbmciLCJwb3ciLCJwYXJzZUJ5SW50ZWdlciIsIm51bSIsImRlbiIsImludmFsaWQiLCJpbmZpbml0ZSIsIkluZmluaXR5Iiwib3Bwb3NlZCIsIm11bHRpcGx5IiwibXVsdGlwbHlCeUludCIsImFtcGxpZnkiLCJrIiwiZGl2aWRlIiwiTiIsImFkZCIsInN1YnN0cmFjdCIsInNpZ24iLCJpc0VxdWFsIiwiRjIiLCJGMSIsImFyZUVxdWFscyIsImNvbXBhcmUiLCJsZXNzZXIiLCJ0aGFuIiwibGVxIiwiZ3JlYXRlciIsImdlcSIsImlzSW5maW5pdHkiLCJpc0Zpbml0ZSIsImlucHV0U3RyIiwibGl0ZXJhbFN0ciIsIl9jb2VmZmljaWVudCIsInYiLCJyZXBsYWNlIiwidHJpbSIsImNsZWFuIiwibGV0dGVyIiwiX2xpdGVyYWwiLCJjb2VmZmljaWVudCIsImxldHRlcnMiLCJkZWdyZWUiLCJ3aXRoRnJhY3Rpb24iLCJhbGxvd1plcm8iLCJyYW5kb21JbnRTeW0iLCJMIiwiaXNTYW1lQXMiLCJNIiwiTTEiLCJrZXlzIiwiTTIiLCJsaXRlcmFsIiwiSyIsImNvbmNhdCIsImZpbHRlciIsIml0ZW0iLCJpbmRleE9mIiwiYXJlU2FtZUFzIiwiZW50cmllcyIsImhhc0xldHRlciIsImNvbnNvbGUiLCJsb2ciLCJkaXNwbGF5IiwiZXZhbHVhdGUiLCJtYXRjaEFsbCIsInZhcmlhYmxlcyIsImRmcmFjIiwibGNtIiwibW9ub21zIiwiY29lZmZOIiwibWFwIiwiY29lZmZEIiwibWluIiwieG11bHRpcGx5IiwiU2h1dGluZ3lhcmQiLCJfcnBuIiwidG9rZW4iLCJtYXRjaCIsImV4cHIiLCJzdGFydCIsInRva2VuTWF0Y2giLCJ0b2tlblR5cGUiLCJzdWJzdHIiLCJleHByMiIsIm91dFF1ZXVlIiwib3BTdGFjayIsInByZWNlZGVuY2UiLCJhc3NvY2lhdGl2ZSIsInRva2VuUG9zIiwiVW5pZm9ybWl6ZXIiLCJzZWN1cml0eUxvb3BMdmwyIiwic2VjdXJpdHlMb29wTHZsMSIsIk5leHRUb2tlbiIsIm9wVG9wIiwicG9wIiwicmV2ZXJzZSIsInBvbHlub21TdHJpbmciLCJpc1BvbHlub20iLCJfcmF3U3RyaW5nIiwic2h1dGluZ1lhcmRUb1JlZHVjZWRQb2x5bm9tIiwiZW1wdHkiLCJfbW9ub21zIiwiUCIsInJuZFNpbXBsZSIsInVuaXQiLCJudW1iZXJPZk1vbm9tcyIsImFkZE1vbm9tIiwicmVvcmRlciIsInNwbGljZSIsInJuZEZhY3RvcmFibGUiLCJfZmFjdG9ycyIsIm1ha2VJdENvbXBsaWNhdGUiLCJjb21wbGV4aXR5IiwiX3RleFN0cmluZyIsIm1EZWdyZWUiLCJBIiwiQiIsIkMiLCJmYWN0b3JpemVQYXJ0aWFsIiwiZ2VuRGlzcGxheSIsInRleFN0cmluZyIsImZvcmNlU2lnbiIsIm1NYWluIiwibUNoZWNrIiwibUZhY3RvciIsInBGYWN0b3IiLCJqIiwidGV4IiwibXVsdGlwbHlCeU1vbm9tIiwic3Vic3RyYWN0TW9ub20iLCJtaW5pZnkiLCJtdWx0aXBseUJ5SW50ZWdlciIsImxjbURlbm9taW5hdG9yIiwiZGl2aWRlQnlJbnRlZ2VyIiwiZ2NkTnVtZXJhdG9yIiwiZmFjdG9yaXplIiwibTEiLCJtMiIsIm11bHRpcGx5QnlGcmFjdGlvbiIsIm11dGxpcGx5QnlGcmFjdGlvbiIsIm5iRiIsImRpdmlkZUJ5RnJhY3Rpb24iLCJyZXBsYWNlQnkiLCJyZXN1bHRQb2x5bm9tIiwicXVvdGllbnQiLCJyZW1pbmRlciIsIm5ld00iLCJtYXhNUCIsIm1vbm9tQnlEZWdyZWUiLCJpc1plcm8iLCJmb3JFYWNoIiwibW9ub20iLCJjYW5EaXZpZGUiLCJldmFsVmFsdWUiLCJpc1RyaXZpYWwiLCJ6IiwiZ2V0WmVyb2VzIiwiZ2V0RGVub21pbmF0b3JzIiwiZGVub21pbmF0b3JzIiwiZ2V0TnVtZXJhdG9ycyIsIm51bWVyYXRvcnMiLCJnY2REZW5vbWluYXRvciIsImxjbU51bWVyYXRvciIsImNQMSIsImNQMiIsImlzT3Bwb3NlZEF0Iiwib3V0cHV0Iiwid3JhcFBhcmVudGhlc2VzIiwiU1kiLCJycG4iLCJpc09wZXJhdGlvbiIsImlzTXVsdGlWYXJpYWJsZSIsIlYiLCJTZXQiLCJOdGhyb290IiwicmFkaWNhbCIsIm50aHJvb3QiLCJfbnRoIiwiX3JhZGljYWwiLCJfaXNWYWxpZCIsImhhc1JhZGljYWwiLCJlcXVhdGlvblN0cmluZyIsIl92YXJub3RoaW5nIiwiX3JlYWwiLCJwYXJzZVN0cmluZyIsInBTdHIiLCJzdHJTaWduIiwiX2ZpbmRTaWduIiwiX2Zvcm1hdFNpZ24iLCJpbmNsdWRlcyIsInNpZ25TdHIiLCJsZWZ0IiwicmlnaHQiLCJfbGVmdCIsIl9yaWdodCIsIl9zaWduIiwibU1vdmUiLCJpc29sYXRlIiwiY01vdmUiLCJzb2x2ZSIsIl9zb2x1dGlvbnMiLCJfcG9seW5vbSIsIl9zb2x2ZURlZ3JlZTEiLCJfc29sdmVEZWdyZWUyIiwiX3NvbHZlRGVncmVlM3BsdXMiLCJpc0dyZWF0ZXIiLCJpc1N0cmljdEVxdWFsIiwiaXNBbHNvRXF1YWwiLCJtMCIsImRlbHRhIiwibnRoRGVsdGEiLCJyZWFsWDEiLCJyZWFsWDIiLCJzWDEiLCJzWDIiLCJhRiIsImJGIiwiY0YiLCJnZW5lcmF0ZSIsIm9wdHMiLCJQMSIsIlAyIiwiX3JldmVyc2VTaWduIiwiZXF1Iiwiam9pbiIsInNpZ25Bc1RleCIsImVxdWF0aW9ucyIsIl9lcXVhdGlvbnMiLCJzdHIiLCJFIiwiZXF1cyIsImUiLCJfcmVzb2x1dGlvblN0ZXBzIiwiX3NvbHZlT25lTGV0dGVyIiwiTEUiLCJyZWR1Y2VkRXF1YXRpb25zIiwiX2xpbmVhclJlZHVjdGlvbiIsInNvbHV0aW9ucyIsImlzUmVhbCIsImlzVmFybm90aGluZyIsImlzVmFydm90aGluZyIsImVxMSIsImVxMiIsImMxIiwiYzIiLCJ3aW5kb3ciLCJQaSIsIkZyYWN0aW9uIiwiUm9vdCIsIk1vbm9tIiwiUG9seW5vbSIsIkVxdWF0aW9uIiwiTGluZWFyU3lzdGVtIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLHNDQ2xGOUMsTUFBTUMsRUFLVCxhQUFhQyxHQUNULElBQUlDLEVBQWtCLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0s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QUFTLEVBQ1RDLFNBQVUsRUFDVkMsYUFBYyIsImZpbGUiOiJwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBjbGFzcyBOdW1lcmlje1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGxpc3Qgb2YgdGhlIG50aCBmaXJzdCBwcmltZSBudW1iZXJzLlxyXG4gICAgICogQHBhcmFtIG5iIDogbnVtYmVyIG9mIHByaW1lcyB0byBjaG9vc2UgZnJvbVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcHJpbWUobmI/Om51bWJlcik6bnVtYmVyW117XHJcbiAgICAgICAgbGV0IHByaW1lczpudW1iZXJbXSA9IFsyLCAzLCA1LCA3LCAxMSwgMTMsIDE3LCAxOSwgMjMsIDI5LCAzMSwgMzcsIDQxLCA0MywgNDcsIDUzLCA1OSwgNjEsIDY3LCA3MSwgNzMsIDc5LCA4MywgODksIDk3LCAxMDEsIDEwMywgMTA3LCAxMDksIDExMywgMTI3LCAxMzEsIDEzNywgMTM5LCAxNDksIDE1MSwgMTU3LCAxNjMsIDE2NywgMTczLCAxNzksIDE4MSwgMTkxLCAxOTMsIDE5NywgMTk5LCAyMTEsIDIyMywgMjI3LCAyMjksIDIzMywgMjM5LCAyNDEsIDI1MSwgMjU3LCAyNjMsIDI2OSwgMjcxLCAyNzcsIDI4MSwgMjgzLCAyOTMsIDMwNywgMzExLCAzMTMsIDMxNywgMzMxLCAzMzcsIDM0NywgMzQ5LCAzNTMsIDM1OSwgMzY3LCAzNzMsIDM3OSwgMzgzLCAzODksIDM5NywgNDAxLCA0MDksIDQxOSwgNDIxLCA0MzEsIDQzMywgNDM5LCA0NDMsIDQ0OSwgNDU3LCA0NjEsIDQ2MywgNDY3LCA0NzksIDQ4NywgNDkxLCA0OTksIDUwMywgNTA5LCA1MjEsIDUyMywgNTQxLCA1NDcsIDU1NywgNTYzLCA1NjksIDU3MSwgNTc3LCA1ODcsIDU5MywgNTk5LCA2MDEsIDYwNywgNjEzLCA2MTcsIDYxOSwgNjMxLCA2NDEsIDY0MywgNjQ3LCA2NTMsIDY1OSwgNjYxLCA2NzMsIDY3NywgNjgzLCA2OTEsIDcwMSwgNzA5LCA3MTksIDcyNywgNzMzLCA3MzksIDc0MywgNzUxLCA3NTcsIDc2MSwgNzY5LCA3NzMsIDc4NywgNzk3LCA4MDksIDgxMSwgODIxLCA4MjMsIDgyNywgODI5LCA4MzksIDg1MywgODU3LCA4NTksIDg2MywgODc3LCA4ODEsIDg4MywgODg3LCA5MDcsIDkxMSwgOTE5LCA5MjksIDkzNywgOTQxLCA5NDcsIDk1MywgOTY3LCA5NzEsIDk3NywgOTgzLCA5OTEsIDk5NywgMTAwOSwgMTAxMywgMTAxOSwgMTAyMSwgMTAzMSwgMTAzMywgMTAzOSwgMTA0OSwgMTA1MSwgMTA2MSwgMTA2MywgMTA2OSwgMTA4NywgMTA5MSwgMTA5MywgMTA5NywgMTEwMywgMTEwOSwgMTExNywgMTEyMywgMTEyOSwgMTE1MSwgMTE1MywgMTE2MywgMTE3MSwgMTE4MSwgMTE4NywgMTE5MywgMTIwMSwgMTIxMywgMTIxNywgMTIyMywgMTIyOSwgMTIzMSwgMTIzNywgMTI0OSwgMTI1OSwgMTI3NywgMTI3OSwgMTI4MywgMTI4OSwgMTI5MSwgMTI5NywgMTMwMSwgMTMwMywgMTMwNywgMTMxOSwgMTMyMSwgMTMyNywgMTM2MSwgMTM2NywgMTM3MywgMTM4MSwgMTM5OSwgMTQwOSwgMTQyMywgMTQyNywgMTQyOSwgMTQzMywgMTQzOSwgMTQ0NywgMTQ1MSwgMTQ1MywgMTQ1OSwgMTQ3MSwgMTQ4MSwgMTQ4MywgMTQ4NywgMTQ4OSwgMTQ5MywgMTQ5OSwgMTUxMSwgMTUyMywgMTUzMSwgMTU0MywgMTU0OSwgMTU1MywgMTU1OSwgMTU2NywgMTU3MSwgMTU3OSwgMTU4MywgMTU5NywgMTYwMSwgMTYwNywgMTYwOSwgMTYxMywgMTYxOSwgMTYyMSwgMTYyNywgMTYzNywgMTY1NywgMTY2MywgMTY2NywgMTY2OSwgMTY5MywgMTY5NywgMTY5OSwgMTcwOSwgMTcyMSwgMTcyMywgMTczMywgMTc0MSwgMTc0NywgMTc1MywgMTc1OSwgMTc3NywgMTc4MywgMTc4NywgMTc4OSwgMTgwMSwgMTgxMSwgMTgyMywgMTgzMSwgMTg0NywgMTg2MSwgMTg2NywgMTg3MSwgMTg3MywgMTg3NywgMTg3OSwgMTg4OSwgMTkwMSwgMTkwNywgMTkxMywgMTkzMSwgMTkzMywgMTk0OSwgMTk1MSwgMTk3MywgMTk3OSwgMTk4NywgMTk5MywgMTk5NywgMTk5OSwgMjAwMywgMjAxMSwgMjAxNywgMjAyNywgMjAyOSwgMjAzOSwgMjA1MywgMjA2MywgMjA2OSwgMjA4MSwgMjA4MywgMjA4NywgMjA4OSwgMjA5OSwgMjExMSwgMjExMywgMjEyOSwgMjEzMSwgMjEzNywgMjE0MSwgMjE0MywgMjE1MywgMjE2MSwgMjE3OSwgMjIwMywgMjIwNywgMjIxMywgMjIyMSwgMjIzNywgMjIzOSwgMjI0MywgMjI1MSwgMjI2NywgMjI2OSwgMjI3MywgMjI4MSwgMjI4NywgMjI5MywgMjI5NywgMjMwOSwgMjMxMSwgMjMzMywgMjMzOSwgMjM0MSwgMjM0NywgMjM1MSwgMjM1NywgMjM3MSwgMjM3NywgMjM4MSwgMjM4MywgMjM4OSwgMjM5MywgMjM5OSwgMjQxMSwgMjQxNywgMjQyMywgMjQzNywgMjQ0MSwgMjQ0NywgMjQ1OSwgMjQ2NywgMjQ3MywgMjQ3NywgMjUwMywgMjUyMSwgMjUzMSwgMjUzOSwgMjU0MywgMjU0OSwgMjU1MSwgMjU1NywgMjU3OSwgMjU5MSwgMjU5MywgMjYwOSwgMjYxNywgMjYyMSwgMjYzMywgMjY0NywgMjY1NywgMjY1OSwgMjY2MywgMjY3MSwgMjY3NywgMjY4MywgMjY4NywgMjY4OSwgMjY5MywgMjY5OSwgMjcwNywgMjcxMSwgMjcxMywgMjcxOSwgMjcyOSwgMjczMSwgMjc0MSwgMjc0OSwgMjc1MywgMjc2NywgMjc3NywgMjc4OSwgMjc5MSwgMjc5NywgMjgwMSwgMjgwMywgMjgxOSwgMjgzMywgMjgzNywgMjg0MywgMjg1MSwgMjg1NywgMjg2MSwgMjg3OSwgMjg4NywgMjg5NywgMjkwMywgMjkwOSwgMjkxNywgMjkyNywgMjkzOSwgMjk1MywgMjk1NywgMjk2MywgMjk2OSwgMjk3MSwgMjk5OSwgMzAwMSwgMzAxMSwgMzAxOSwgMzAyMywgMzAzNywgMzA0MSwgMzA0OSwgMzA2MSwgMzA2NywgMzA3OSwgMzA4MywgMzA4OSwgMzEwOSwgMzExOSwgMzEyMSwgMzEzNywgMzE2MywgMzE2NywgMzE2OSwgMzE4MSwgMzE4NywgMzE5MSwgMzIwMywgMzIwOSwgMzIxNywgMzIyMSwgMzIyOSwgMzI1MSwgMzI1MywgMzI1NywgMzI1OSwgMzI3MSwgMzI5OSwgMzMwMSwgMzMwNywgMzMxMywgMzMxOSwgMzMyMywgMzMyOSwgMzMzMSwgMzM0MywgMzM0NywgMzM1OSwgMzM2MSwgMzM3MSwgMzM3MywgMzM4OSwgMzM5MSwgMzQwNywgMzQxMywgMzQzMywgMzQ0OSwgMzQ1NywgMzQ2MSwgMzQ2MywgMzQ2NywgMzQ2OSwgMzQ5MSwgMzQ5OSwgMzUxMSwgMzUxNywgMzUyNywgMzUyOSwgMzUzMywgMzUzOSwgMzU0MSwgMzU0NywgMzU1NywgMzU1OSwgMzU3MSwgMzU4MSwgMzU4MywgMzU5MywgMzYwNywgMzYxMywgMzYxNywgMzYyMywgMzYzMSwgMzYzNywgMzY0MywgMzY1OSwgMzY3MSwgMzY3MywgMzY3NywgMzY5MSwgMzY5NywgMzcwMSwgMzcwOSwgMzcxOSwgMzcyNywgMzczMywgMzczOSwgMzc2MSwgMzc2NywgMzc2OSwgMzc3OSwgMzc5MywgMzc5NywgMzgwMywgMzgyMSwgMzgyMywgMzgzMywgMzg0NywgMzg1MSwgMzg1MywgMzg2MywgMzg3NywgMzg4MSwgMzg4OSwgMzkwNywgMzkxMSwgMzkxNywgMzkxOSwgMzkyMywgMzkyOSwgMzkzMSwgMzk0MywgMzk0NywgMzk2NywgMzk4OSwgNDAwMSwgNDAwMywgNDAwNywgNDAxMywgNDAxOSwgNDAyMSwgNDAyNywgNDA0OSwgNDA1MSwgNDA1NywgNDA3MywgNDA3OSwgNDA5MSwgNDA5MywgNDA5OSwgNDExMSwgNDEyNywgNDEyOSwgNDEzMywgNDEzOSwgNDE1MywgNDE1NywgNDE1OSwgNDE3NywgNDIwMSwgNDIxMSwgNDIxNywgNDIxOSwgNDIyOSwgNDIzMSwgNDI0MSwgNDI0MywgNDI1MywgNDI1OSwgNDI2MSwgNDI3MSwgNDI3MywgNDI4MywgNDI4OSwgNDI5NywgNDMyNywgNDMzNywgNDMzOSwgNDM0OSwgNDM1NywgNDM2MywgNDM3MywgNDM5MSwgNDM5NywgNDQwOSwgNDQyMSwgNDQyMywgNDQ0MSwgNDQ0NywgNDQ1MSwgNDQ1NywgNDQ2MywgNDQ4MSwgNDQ4MywgNDQ5MywgNDUwNywgNDUxMywgNDUxNywgNDUxOSwgNDUyMywgNDU0NywgNDU0OSwgNDU2MSwgNDU2NywgNDU4MywgNDU5MSwgNDU5NywgNDYwMywgNDYyMSwgNDYzNywgNDYzOSwgNDY0MywgNDY0OSwgNDY1MSwgNDY1NywgNDY2MywgNDY3MywgNDY3OSwgNDY5MSwgNDcwMywgNDcyMSwgNDcyMywgNDcyOSwgNDczMywgNDc1MSwgNDc1OSwgNDc4MywgNDc4NywgNDc4OSwgNDc5MywgNDc5OSwgNDgwMSwgNDgxMywgNDgxNywgNDgzMSwgNDg2MSwgNDg3MSwgNDg3NywgNDg4OSwgNDkwMywgNDkwOSwgNDkxOSwgNDkzMSwgNDkzMywgNDkzNywgNDk0MywgNDk1MSwgNDk1NywgNDk2NywgNDk2OSwgNDk3MywgNDk4NywgNDk5MywgNDk5OSwgNTAwMywgNTAwOSwgNTAxMSwgNTAyMSwgNTAyMywgNTAzOSwgNTA1MSwgNTA1OSwgNTA3NywgNTA4MSwgNTA4NywgNTA5OSwgNTEwMSwgNTEwNywgNTExMywgNTExOSwgNTE0NywgNTE1MywgNTE2NywgNTE3MSwgNTE3OSwgNTE4OSwgNTE5NywgNTIwOSwgNTIyNywgNTIzMSwgNTIzMywgNTIzNywgNTI2MSwgNTI3MywgNTI3OSwgNTI4MSwgNTI5NywgNTMwMywgNTMwOSwgNTMyMywgNTMzMywgNTM0NywgNTM1MSwgNTM4MSwgNTM4NywgNTM5MywgNTM5OSwgNTQwNywgNTQxMywgNTQxNywgNTQxOSwgNTQzMSwgNTQzNywgNTQ0MSwgNTQ0MywgNTQ0OSwgNTQ3MSwgNTQ3NywgNTQ3OSwgNTQ4MywgNTUwMSwgNTUwMywgNTUwNywgNTUxOSwgNTUyMSwgNTUyNywgNTUzMSwgNTU1NywgNTU2MywgNTU2OSwgNTU3MywgNTU4MSwgNTU5MSwgNTYyMywgNTYzOSwgNTY0MSwgNTY0NywgNTY1MSwgNTY1MywgNTY1NywgNTY1OSwgNTY2OSwgNTY4MywgNTY4OSwgNTY5MywgNTcwMSwgNTcxMSwgNTcxNywgNTczNywgNTc0MSwgNTc0MywgNTc0OSwgNTc3OSwgNTc4MywgNTc5MSwgNTgwMSwgNTgwNywgNTgxMywgNTgyMSwgNTgyNywgNTgzOSwgNTg0MywgNTg0OSwgNTg1MSwgNTg1NywgNTg2MSwgNTg2NywgNTg2OSwgNTg3OSwgNTg4MSwgNTg5NywgNTkwMywgNTkyMywgNTkyNywgNTkzOSwgNTk1MywgNTk4MSwgNTk4NywgNjAwNywgNjAxMSwgNjAyOSwgNjAzNywgNjA0MywgNjA0NywgNjA1MywgNjA2NywgNjA3MywgNjA3OSwgNjA4OSwgNjA5MSwgNjEwMSwgNjExMywgNjEyMSwgNjEzMSwgNjEzMywgNjE0MywgNjE1MSwgNjE2MywgNjE3MywgNjE5NywgNjE5OSwgNjIwMywgNjIxMSwgNjIxNywgNjIyMSwgNjIyOSwgNjI0NywgNjI1NywgNjI2MywgNjI2OSwgNjI3MSwgNjI3NywgNjI4NywgNjI5OSwgNjMwMSwgNjMxMSwgNjMxNywgNjMyMywgNjMyOSwgNjMzNywgNjM0MywgNjM1MywgNjM1OSwgNjM2MSwgNjM2NywgNjM3MywgNjM3OSwgNjM4OSwgNjM5NywgNjQyMSwgNjQyNywgNjQ0OSwgNjQ1MSwgNjQ2OSwgNjQ3MywgNjQ4MSwgNjQ5MSwgNjUyMSwgNjUyOSwgNjU0NywgNjU1MSwgNjU1MywgNjU2MywgNjU2OSwgNjU3MSwgNjU3NywgNjU4MSwgNjU5OSwgNjYwNywgNjYxOSwgNjYzNywgNjY1MywgNjY1OSwgNjY2MSwgNjY3MywgNjY3OSwgNjY4OSwgNjY5MSwgNjcwMSwgNjcwMywgNjcwOSwgNjcxOSwgNjczMywgNjczNywgNjc2MSwgNjc2MywgNjc3OSwgNjc4MSwgNjc5MSwgNjc5MywgNjgwMywgNjgyMywgNjgyNywgNjgyOSwgNjgzMywgNjg0MSwgNjg1NywgNjg2MywgNjg2OSwgNjg3MSwgNjg4MywgNjg5OSwgNjkwNywgNjkxMSwgNjkxNywgNjk0NywgNjk0OSwgNjk1OSwgNjk2MSwgNjk2NywgNjk3MSwgNjk3NywgNjk4MywgNjk5MSwgNjk5NywgNzAwMSwgNzAxMywgNzAxOSwgNzAyNywgNzAzOSwgNzA0MywgNzA1NywgNzA2OSwgNzA3OSwgNzEwMywgNzEwOSwgNzEyMSwgNzEyNywgNzEyOSwgNzE1MSwgNzE1OSwgNzE3NywgNzE4NywgNzE5MywgNzIwNywgNzIxMSwgNzIxMywgNzIxOSwgNzIyOSwgNzIzNywgNzI0MywgNzI0NywgNzI1MywgNzI4MywgNzI5NywgNzMwNywgNzMwOSwgNzMyMSwgNzMzMSwgNzMzMywgNzM0OSwgNzM1MSwgNzM2OSwgNzM5MywgNzQxMSwgNzQxNywgNzQzMywgNzQ1MSwgNzQ1NywgNzQ1OSwgNzQ3NywgNzQ4MSwgNzQ4NywgNzQ4OSwgNzQ5OSwgNzUwNywgNzUxNywgNzUyMywgNzUyOSwgNzUzNywgNzU0MSwgNzU0NywgNzU0OSwgNzU1OSwgNzU2MSwgNzU3MywgNzU3NywgNzU4MywgNzU4OSwgNzU5MSwgNzYwMywgNzYwNywgNzYyMSwgNzYzOSwgNzY0MywgNzY0OSwgNzY2OSwgNzY3MywgNzY4MSwgNzY4NywgNzY5MSwgNzY5OSwgNzcwMywgNzcxNywgNzcyMywgNzcyNywgNzc0MSwgNzc1MywgNzc1NywgNzc1OSwgNzc4OSwgNzc5MywgNzgxNywgNzgyMywgNzgyOSwgNzg0MSwgNzg1MywgNzg2NywgNzg3MywgNzg3NywgNzg3OSwgNzg4MywgNzkwMSwgNzkwNywgNzkxOSwgNzkyNywgNzkzMywgNzkzNywgNzk0OSwgNzk1MSwgNzk2MywgNzk5MywgODAwOSwgODAxMSwgODAxNywgODAzOSwgODA1MywgODA1OSwgODA2OSwgODA4MSwgODA4NywgODA4OSwgODA5MywgODEwMSwgODExMSwgODExNywgODEyMywgODE0NywgODE2MSwgODE2NywgODE3MSwgODE3OSwgODE5MSwgODIwOSwgODIxOSwgODIyMSwgODIzMSwgODIzMywgODIzNywgODI0MywgODI2MywgODI2OSwgODI3MywgODI4NywgODI5MSwgODI5MywgODI5NywgODMxMSwgODMxNywgODMyOSwgODM1MywgODM2MywgODM2OSwgODM3NywgODM4NywgODM4OSwgODQxOSwgODQyMywgODQyOSwgODQzMSwgODQ0MywgODQ0NywgODQ2MSwgODQ2NywgODUwMSwgODUxMywgODUyMSwgODUyNywgODUzNywgODUzOSwgODU0MywgODU2MywgODU3MywgODU4MSwgODU5NywgODU5OSwgODYwOSwgODYyMywgODYyNywgODYyOSwgODY0MSwgODY0NywgODY2MywgODY2OSwgODY3NywgODY4MSwgODY4OSwgODY5MywgODY5OSwgODcwNywgODcxMywgODcxOSwgODczMSwgODczNywgODc0MSwgODc0NywgODc1MywgODc2MSwgODc3OSwgODc4MywgODgwMywgODgwNywgODgxOSwgODgyMSwgODgzMSwgODgzNywgODgzOSwgODg0OSwgODg2MSwgODg2MywgODg2NywgODg4NywgODg5MywgODkyMywgODkyOSwgODkzMywgODk0MSwgODk1MSwgODk2MywgODk2OSwgODk3MSwgODk5OSwgOTAwMSwgOTAwNywgOTAxMSwgOTAxMywgOTAyOSwgOTA0MSwgOTA0MywgOTA0OSwgOTA1OSwgOTA2NywgOTA5MSwgOTEwMywgOTEwOSwgOTEyNywgOTEzMywgOTEzNywgOTE1MSwgOTE1NywgOTE2MSwgOTE3MywgOTE4MSwgOTE4NywgOTE5OSwgOTIwMywgOTIwOSwgOTIyMSwgOTIyNywgOTIzOSwgOTI0MSwgOTI1NywgOTI3NywgOTI4MSwgOTI4MywgOTI5MywgOTMxMSwgOTMxOSwgOTMyMywgOTMzNywgOTM0MSwgOTM0MywgOTM0OSwgOTM3MSwgOTM3NywgOTM5MSwgOTM5NywgOTQwMywgOTQxMywgOTQxOSwgOTQyMSwgOTQzMSwgOTQzMywgOTQzNywgOTQzOSwgOTQ2MSwgOTQ2MywgOTQ2NywgOTQ3MywgOTQ3OSwgOTQ5MSwgOTQ5NywgOTUxMSwgOTUyMSwgOTUzMywgOTUzOSwgOTU0NywgOTU1MSwgOTU4NywgOTYwMSwgOTYxMywgOTYxOSwgOTYyMywgOTYyOSwgOTYzMSwgOTY0MywgOTY0OSwgOTY2MSwgOTY3NywgOTY3OSwgOTY4OSwgOTY5NywgOTcxOSwgOTcyMSwgOTczMywgOTczOSwgOTc0MywgOTc0OSwgOTc2NywgOTc2OSwgOTc4MSwgOTc4NywgOTc5MSwgOTgwMywgOTgxMSwgOTgxNywgOTgyOSwgOTgzMywgOTgzOSwgOTg1MSwgOTg1NywgOTg1OSwgOTg3MSwgOTg4MywgOTg4NywgOTkwMSwgOTkwNywgOTkyMywgOTkyOSwgOTkzMSwgOTk0MSwgOTk0OSwgOTk2NywgOTk3M107XHJcbiAgICAgICAgaWYobmIgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmltZXM7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmltZXMuc2xpY2UoMCxNYXRoLm1heChwcmltZXMubGVuZ3RoLG5iKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBsaXN0IG9mIGFsbCBkaXZpZGVycyBvZiBhIG51bWJlci5cclxuICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZGl2aWRlcnModmFsdWU6bnVtYmVyKTpudW1iZXJbXXtcclxuICAgICAgICBsZXQgRDogbnVtYmVyW107XHJcbiAgICAgICAgY29uc3QgbWF4ViA9IE1hdGguc3FydCh2YWx1ZSk7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGxpc3Qgb2YgZGl2aWRlcnMuXHJcbiAgICAgICAgRCA9IFtdO1xyXG5cclxuICAgICAgICBmb3IobGV0IGk9MTsgaTxtYXhWOyBpKyspe1xyXG4gICAgICAgICAgICBpZih2YWx1ZSVpPT09MCl7XHJcbiAgICAgICAgICAgICAgICBELnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICBELnB1c2godmFsdWUvaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE9yZGVyIG51bWJlcnMuXHJcbiAgICAgICAgRC5zb3J0KGZ1bmN0aW9uKGEsIGIpe3JldHVybiBhLWI7fSk7XHJcbiAgICAgICAgcmV0dXJuIEQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdyZWF0IENvbW1vbiBEaXZpc29yXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVzIDogbnVtYmVyIHZhbHVlc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2NkKC4uLnZhbHVlczpudW1iZXJbXSk6bnVtYmVye1xyXG4gICAgICAgIC8vIERlZmluZSB0aGUgZ2NkIGZvciB0d28gbnVtYmVyXHJcbiAgICAgICAgbGV0IGdjZDIgPSBmdW5jdGlvbihhOm51bWJlcixiOm51bWJlcik6bnVtYmVye1xyXG4gICAgICAgICAgICBpZihiPT09MCl7cmV0dXJuIGE7fVxyXG4gICAgICAgICAgICByZXR1cm4gZ2NkMihiLCBhJWIpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxldCBnOm51bWJlciA9IDEsXHJcbiAgICAgICAgICAgIGk6bnVtYmVyID0gMjtcclxuXHJcbiAgICAgICAgLy8gTm90aGluZyBpcyBnaXZlblxyXG4gICAgICAgIGlmKHZhbHVlcy5sZW5ndGg9PT0wKXtyZXR1cm4gMTt9XHJcbiAgICAgICAgLy8gT25seSBvbmUgbnVtYmVyIGlzIGdpdmVuXHJcbiAgICAgICAgaWYodmFsdWVzLmxlbmd0aD09PTEpe1xyXG4gICAgICAgICAgICAvLyBUaGUgZmlyc3QgbnVtYmVyIGlzIHplcm9cclxuICAgICAgICAgICAgaWYodmFsdWVzWzBdPT09MCl7cmV0dXJuIDE7fVxyXG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIG51bWJlclxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gV2UgaGF2ZSBhdCBsZWFzdCAyIG51bWJlcnMuXHJcbiAgICAgICAgZyA9IGdjZDIodmFsdWVzWzBdLHZhbHVlc1sxXSk7XHJcblxyXG4gICAgICAgIC8vIFRoZSBnY2Qgb2YgdGhlIHR3byBmaXJzdCB2YWx1ZSBpcyBvbmUgPyBJdCdzIGFscmVhZHkgZmluaXNoZWQuXHJcbiAgICAgICAgaWYoZz09PTEpe3JldHVybiAxO31cclxuXHJcbiAgICAgICAgLy8gVGhlIGN1cnJlbnQgZ2NkIGlzbid0IG9uZS4gQ29udGludWUgd2l0aCBhbGwgbmV4dCB2YWx1ZXMuXHJcbiAgICAgICAgZm9yKGk9MjsgaTx2YWx1ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBnID0gZ2NkMihnLCB2YWx1ZXNbaV0pO1xyXG4gICAgICAgICAgICAvLyBFc2NhcGUgaWYgZ2NkIGlzIGFscmVhZHkgb25lLlxyXG4gICAgICAgICAgICBpZihnPT09MSl7YnJlYWs7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTGVhc3QgQ29tbW9uIE11bHRpcGxlXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVzOiBsaXN0IG9mIG51bWJlcnNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGxjbSguLi52YWx1ZXM6bnVtYmVyW10pOm51bWJlcntcclxuICAgICAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbihhLGIpe1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoYSAqIGIgLyBOdW1lcmljLmdjZChhLCBiKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSYW5kb20gYm9vbGVhbiB3aXRoIGEgcGVyY2VudCByYXRpb1xyXG4gICAgICogQHBhcmFtIHBlcmNlbnRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHJhbmRvbUJvb2wocGVyY2VudDpudW1iZXI9MC41KTpib29sZWFue1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpPHBlcmNlbnQ/dHJ1ZTpmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJhbmRvbSBpbnRlZ2VyIGJldHdlZW4gdHdvIHZhbHVlcy5cclxuICAgICAqIEBwYXJhbSBhIChudW1iZXIpIDogRnJvbSB0aGlzIHZhbHVlIHRvIHRoZSBzZWNvbmQgdmFsdWUuIElmIHRoZSBzZWNvbmQgaXMgb21taXRlZCwgdGhpcyB2YWx1ZSBpcyB0aGUgbWF4IHZhbHVlLlxyXG4gICAgICogQHBhcmFtIGIgKG51bWJlcikgOiBUbyB0aGlzIHZhbHVlLiBJZiB0aGlzIGlzIG9tbWl0ZWQuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyByYW5kb21JbnQoYTpudW1iZXIsIGI/Om51bWJlcik6bnVtYmVye1xyXG4gICAgICAgIGlmKGI9PT11bmRlZmluZWQpe3JldHVybiBOdW1lcmljLnJhbmRvbUludCgwLGEpO31cclxuXHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChiIC0gYSArIDEpICsgYSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSYW5kb20gaW50ZWdlciBiZXR3ZWVuIC1tYXggYW5kIG1heCB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSBtYXggKG51bWJlcikgOiBkZXRlcm1pbmUgdGhlIGxpbWl0cy5cclxuICAgICAqIEBwYXJhbSB6ZXJvIChib29sKSA6IGRldGVybWluZSBpZiB6ZXJvIGlzIGFsbG93ZWQgb3Igbm90LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmFuZG9tSW50U3ltKG1heDpudW1iZXIsIHplcm8/OmJvb2xlYW4pOm51bWJlcntcclxuICAgICAgICBpZih6ZXJvPT09ZmFsc2Upe1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtZXJpYy5yYW5kb21Cb29sKCk/dGhpcy5yYW5kb21JbnQoMSxtYXgpOi10aGlzLnJhbmRvbUludCgxLG1heCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBOdW1lcmljLnJhbmRvbUludCgtbWF4LCBtYXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7TnVtZXJpY30gZnJvbSBcIi4vbnVtZXJpY1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZyYWN0aW9uIHtcclxuICAgIHByaXZhdGUgX251bWVyYXRvcjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfZGVub21pbmF0b3I6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihmcmFjdGlvblN0cj86c3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gMTtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IDE7XHJcblxyXG4gICAgICAgIGlmKGZyYWN0aW9uU3RyIT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgdGhpcy5wYXJzZShmcmFjdGlvblN0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNpbXBsZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgaXQncyBhIGZyYWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGlzRnJhY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGZyYWN0aW9uIHRvIHplcm9cclxuICAgICAqL1xyXG4gICAgemVybyA9ICgpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gMDtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IDE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFrZSBhIGNsb25lIG9mIHRoZSBjdXJyZW50IGZyYWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGNsb25lID0gKCk6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBsZXQgRiA9IG5ldyBGcmFjdGlvbigpO1xyXG4gICAgICAgIEYubnVtZXJhdG9yID0gK3RoaXMuX251bWVyYXRvcjtcclxuICAgICAgICBGLmRlbm9taW5hdG9yID0gK3RoaXMuX2Rlbm9taW5hdG9yO1xyXG4gICAgICAgIHJldHVybiBGO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIHRoZSB2YWx1ZSB0byBnZXQgdGhlIG51bWVyYXRvciBhbmQgZGVub21pbmF0b3JcclxuICAgICAqIEBwYXJhbSB2YWx1ZSA6IG51bWJlciB0byBwYXJzZSB0byBnZXQgdGhlIGZyYWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gcGVyaW9kaWMgKG9wdGlvbmFsfG51bWJlcikgOiBsZW5ndGggb2YgdGhlIHBlcmlvZGljIHBhcnQ6IDIuMzMzMzMzID0+IDFcclxuICAgICAqL1xyXG4gICAgcGFyc2UgPSAodmFsdWU6IGFueSwgcGVyaW9kaWM/OiBudW1iZXIpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgbGV0IFM6IHN0cmluZ1tdO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XHJcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCB0aGUgc3RpbmcgdmFsdWUgaW4gdHdvIHBhcnRzOiBOdW1lcmF0b3IvRGVub21uaWF0b3JcclxuICAgICAgICAgICAgICAgIFMgPSB2YWx1ZS5zcGxpdCgnLycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChTLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIGRpdmlkZSBzaWduXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoK1NbMF0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChTLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9uZSBkaXZpZGUgc2lnbmVcclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBjaGVjayBpZiB0aGUgZGVub21pbmF0b3IgaXMgemVyb1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChTWzFdID09PSAnMCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gTmFOO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gK1NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gK1NbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBNb3JlIHRoYW4gb25lIGRpdmlkZSBzaWduID9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSBOYU47XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcclxuICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNTYWZlSW50ZWdlcih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW50ZWdlclxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX251bWVyYXRvciA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGdpdmVuIHZhbHVlIGlzIGEgZmxvYXQgbnVtYmVyXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbnVtYmVyIG9mIGRlY2ltYWxzIGFmdGVyIHRoZSBmbG9hdCBzaWduXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHA6IG51bWJlciA9ICh2YWx1ZS50b1N0cmluZygpKS5zcGxpdCgnLicpWzFdLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJhbnNmb3JtIHRoZSBmbG9hdCBudW1iZXIgaW4gdHdvIGludGVnZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVyaW9kaWMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSB2YWx1ZSAqIE1hdGgucG93KDEwLCBwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSBNYXRoLnBvdygxMCwgcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChOdW1iZXIuaXNTYWZlSW50ZWdlcihwZXJpb2RpYykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gdmFsdWUgKiBNYXRoLnBvdygxMCwgcCkgLSBNYXRoLmZsb29yKHZhbHVlICogTWF0aC5wb3coMTAsIHAgLSBwZXJpb2RpYykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbm9taW5hdG9yID0gTWF0aC5wb3coMTAsIHApIC0gTWF0aC5wb3coMTAsIHAgLSBwZXJpb2RpYylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBwYXJzZUJ5SW50ZWdlciA9IChudW06IG51bWJlciwgZGVuPzogbnVtYmVyKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIGlmIChOdW1iZXIuaXNTYWZlSW50ZWdlcihudW0pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX251bWVyYXRvciA9IG51bTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlbiAhPT0gdW5kZWZpbmVkICYmIE51bWJlci5pc1NhZmVJbnRlZ2VyKGRlbikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSBkZW47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWR1Y2UgdGhlIGZyYWN0aW9uIGFuZCBtYWtlIHRoZSBkZW5vbWluYXRvciBwb3NpdHZlXHJcbiAgICAgKi9cclxuICAgIHJlZHVjZSA9ICgpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgbGV0IGcgPSBOdW1lcmljLmdjZCh0aGlzLl9udW1lcmF0b3IsIHRoaXMuX2Rlbm9taW5hdG9yKTtcclxuICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSB0aGlzLl9udW1lcmF0b3IgLyBnO1xyXG4gICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gdGhpcy5fZGVub21pbmF0b3IgLyBnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fZGVub21pbmF0b3IgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gLXRoaXMuX2Rlbm9taW5hdG9yO1xyXG4gICAgICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSAtdGhpcy5fbnVtZXJhdG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uXHJcbiAgICBpbnZhbGlkID0gKCk6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBsZXQgRiA9IG5ldyBGcmFjdGlvbigpO1xyXG4gICAgICAgIEYuX251bWVyYXRvciA9IE5hTjtcclxuICAgICAgICBGLl9kZW5vbWluYXRvciA9IDE7XHJcbiAgICAgICAgcmV0dXJuIEY7XHJcbiAgICB9O1xyXG5cclxuICAgIGluZmluaXRlID0gKCk6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBsZXQgRiA9IG5ldyBGcmFjdGlvbigpO1xyXG4gICAgICAgIEYuX251bWVyYXRvciA9IEluZmluaXR5O1xyXG4gICAgICAgIEYuX2Rlbm9taW5hdG9yID0gMTtcclxuICAgICAgICByZXR1cm4gRjtcclxuICAgIH07XHJcblxyXG4gICAgLy8gTWF0aGVtYXRpY2FsIG9wZXJhdGlvbnMgb24gZnJhY3Rpb24uXHJcbiAgICBvcHBvc2VkID0gKCk6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSAtdGhpcy5fbnVtZXJhdG9yO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBtdWx0aXBseSA9IChGOiBGcmFjdGlvbik6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSB0aGlzLl9udW1lcmF0b3IgKiBGLm51bWVyYXRvcjtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IHRoaXMuX2Rlbm9taW5hdG9yICogRi5kZW5vbWluYXRvcjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIG11bHRpcGx5QnlJbnQgPSAobjogbnVtYmVyKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIHRoaXMuX251bWVyYXRvciA9IHRoaXMuX251bWVyYXRvciAqIG47XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGFtcGxpZnkgPSAoazogbnVtYmVyKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIGlmIChOdW1iZXIuaXNTYWZlSW50ZWdlcihrKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9udW1lcmF0b3IgKj0gaztcclxuICAgICAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgKj0gaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGRpdmlkZSA9IChGOiBGcmFjdGlvbik6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBpZiAoRi5udW1lcmF0b3IgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGcmFjdGlvbigpLmluZmluaXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgTjogbnVtYmVyID0gK3RoaXMuX251bWVyYXRvcixcclxuICAgICAgICAgICAgRDogbnVtYmVyID0gK3RoaXMuX2Rlbm9taW5hdG9yO1xyXG5cclxuICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSBOICogRi5kZW5vbWluYXRvcjtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IEQgKiBGLm51bWVyYXRvcjtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgYWRkID0gKEY6IEZyYWN0aW9uKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIGxldCBOOiBudW1iZXIgPSB0aGlzLl9udW1lcmF0b3IsXHJcbiAgICAgICAgICAgIEQ6IG51bWJlciA9IHRoaXMuX2Rlbm9taW5hdG9yO1xyXG5cclxuICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSBOICogRi5kZW5vbWluYXRvciArIEYubnVtZXJhdG9yICogRDtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IEQgKiBGLmRlbm9taW5hdG9yO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgc3Vic3RyYWN0ID0gKEY6IEZyYWN0aW9uKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZChGLmNsb25lKCkub3Bwb3NlZCgpKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHBvd2VyIG9mIGEgZnJhY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0gcCAoaW50ZWdlcikgVGhlIGludGVnZXIgcG93ZXIgdmFsdWUgKHBvc2l0aXZlIG9yIG5lZ2F0aXZlKVxyXG4gICAgICovXHJcbiAgICBwb3cgPSAocDogbnVtYmVyKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIocCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW52YWxpZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlZHVjZSgpO1xyXG5cclxuICAgICAgICBpZiAocCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gdGhpcy5fbnVtZXJhdG9yICoqIHA7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gdGhpcy5fZGVub21pbmF0b3IgKiogcDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSB0aGlzLl9kZW5vbWluYXRvciAqKiBwO1xyXG4gICAgICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IHRoaXMuX251bWVyYXRvciAqKiBwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBleGFjdCBzcXVhcmUgcm9vdCBmcmFjdGlvbiBhcyBudW1lcmF0b3IgXFxzcXJ0e3N9IC8gZGVub21pbmF0b3JcclxuICAgICAqL1xyXG4gICAgc3FydCA9ICgpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgLy8gVE9ETzogRnJhY3Rpb24gbnRocm9vdFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhlIGZyYWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGFicyA9ICgpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gTWF0aC5hYnModGhpcy5fbnVtZXJhdG9yKTtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IE1hdGguYWJzKHRoaXMuX2Rlbm9taW5hdG9yKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHNpZ24gb2YgdGhlIGZyYWN0aW9uOiAxIGlmIHBvc2l0aXZlLCAtMSBpZiBuZWdhdGl2ZVxyXG4gICAgICovXHJcbiAgICBzaWduID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl9udW1lcmF0b3IgKiB0aGlzLl9kZW5vbWluYXRvciA+PSAwKSA/IDEgOiAtMTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdHdvIGZyYWN0aW9ucyBhcmUgZXF1YWxzXHJcbiAgICAgKiBAcGFyYW0gRlxyXG4gICAgICovXHJcbiAgICBpc0VxdWFsID0gKEY6IEZyYWN0aW9uKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgbGV0IEYyOiBGcmFjdGlvbiA9IEYuY2xvbmUoKS5yZWR1Y2UoKSxcclxuICAgICAgICAgICAgRjE6IEZyYWN0aW9uID0gdGhpcy5jbG9uZSgpLnJlZHVjZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gKEYxLm51bWVyYXRvciA9PT0gRjIubnVtZXJhdG9yICYmIEYxLmRlbm9taW5hdG9yID09PSBGMi5kZW5vbWluYXRvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIGZyYWN0aW9ucyBhcmUgZXF1YWxzLlxyXG4gICAgICogQHBhcmFtIEZcclxuICAgICAqL1xyXG4gICAgYXJlRXF1YWxzID0gKC4uLkY6IEZyYWN0aW9uW10pOiBib29sZWFuID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEYubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRXF1YWwoRltpXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYXJlIHRoZSBjdXJyZW50IGZyYWN0aW9uIHdpdGggYW5vdGhlciBmcmFjdGlvblxyXG4gICAgICogQHBhcmFtIEYgKEZyYWN0aW9uKSBUaGUgZnJhY3Rpb24gdG8gY29tcGFyZVxyXG4gICAgICogQHBhcmFtIHNpZ24gKHN0cmluZ3wgZGVmYXVsdCBpcyA9KTogYXV0aG9yaXplZCB2YWx1ZXM6ID0sIDwsIDw9LCA+LCA+PSB3aXRoIHNvbWUgdmFyaWF0aW9ucy5cclxuICAgICAqL1xyXG4gICAgY29tcGFyZSA9IChGOiBGcmFjdGlvbiwgc2lnbj86IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmIChzaWduID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2lnbiA9ICc9JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoc2lnbikge1xyXG4gICAgICAgICAgICBjYXNlICc+JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlID4gRi52YWx1ZTtcclxuICAgICAgICAgICAgY2FzZSBcIj49XCIgfHwgXCI9PlwiIHx8IFwiZ2VxXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA+PSBGLnZhbHVlO1xyXG4gICAgICAgICAgICBjYXNlIFwiPFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPCBGLnZhbHVlO1xyXG4gICAgICAgICAgICBjYXNlIFwiPD1cIiB8fCBcIj0+XCIgfHwgXCJsZXFcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlIDw9IEYudmFsdWU7XHJcbiAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0VxdWFsKEYpO1xyXG4gICAgICAgICAgICBjYXNlIFwiPD5cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0VxdWFsKEYpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBDb21wYXJlIHNob3J0Y3V0c1xyXG4gICAgbGVzc2VyID0gKHRoYW46IEZyYWN0aW9uKTogQm9vbGVhbiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZSh0aGFuLCAnPCcpO1xyXG4gICAgfTtcclxuICAgIGxlcSA9ICh0aGFuOiBGcmFjdGlvbik6IEJvb2xlYW4gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUodGhhbiwgJzw9Jyk7XHJcbiAgICB9O1xyXG4gICAgZ3JlYXRlciA9ICh0aGFuOiBGcmFjdGlvbik6IEJvb2xlYW4gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUodGhhbiwgJz4nKTtcclxuICAgIH07XHJcbiAgICBnZXEgPSAodGhhbjogRnJhY3Rpb24pOiBCb29sZWFuID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKHRoYW4sICc+PScpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpc0luZmluaXR5ID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW1lcmF0b3IgPT09IEluZmluaXR5O1xyXG4gICAgfTtcclxuICAgIGlzRmluaXRlID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5pc0luZmluaXR5KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFNldHRlclxyXG4gICAgc2V0IG51bWVyYXRvcih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGRlbm9taW5hdG9yKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldHRlclxyXG4gICAgZ2V0IG51bWVyYXRvcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW1lcmF0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRlbm9taW5hdG9yKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlbm9taW5hdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2YWx1ZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW1lcmF0b3IgLyB0aGlzLl9kZW5vbWluYXRvcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEaXNwbGF5IGdldHRlclxyXG4gICAgZ2V0IGRpc3BsYXkoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVub21pbmF0b3IgPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuX251bWVyYXRvcn1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9udW1lcmF0b3J9LyR7dGhpcy5fZGVub21pbmF0b3J9YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZyYWMoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVub21pbmF0b3IgPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuX251bWVyYXRvcn1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgXFxcXGZyYWN7ICR7dGhpcy5fbnVtZXJhdG9yfSB9eyAke3RoaXMuX2Rlbm9taW5hdG9yfSB9YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRmcmFjKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rlbm9taW5hdG9yID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9udW1lcmF0b3J9YDtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX251bWVyYXRvciA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGBcXFxcZGZyYWN7ICR7dGhpcy5fbnVtZXJhdG9yfSB9eyAke3RoaXMuX2Rlbm9taW5hdG9yfSB9YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYC1cXFxcZGZyYWN7ICR7TWF0aC5hYnModGhpcy5fbnVtZXJhdG9yKX0gfXsgJHt0aGlzLl9kZW5vbWluYXRvcn0gfWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtGcmFjdGlvbn0gZnJvbSBcIi4vZnJhY3Rpb25cIjtcclxuaW1wb3J0IHtOdW1lcmljfSBmcm9tIFwiLi9udW1lcmljXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9ub20ge1xyXG4gICAgcHJpdmF0ZSBfY29lZmZpY2llbnQ6IEZyYWN0aW9uO1xyXG4gICAgcHJpdmF0ZSBfbGl0ZXJhbDogeyBbS2V5OiBzdHJpbmddOiBudW1iZXIgfTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9jb2VmZmljaWVudCA9IG5ldyBGcmFjdGlvbigpLnplcm8oKTtcclxuICAgICAgICB0aGlzLl9saXRlcmFsID0ge307XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgb2JqZWN0IGlzIGEgbW9ub20uXHJcbiAgICAgKi9cclxuICAgIGlzTW9ub20oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBhIHN0cmluZyB0byBhIG1vbm9tLiBUaGUgc3RyaW5nIG1heSBpbmNsdWRlIGZyYWN0aW9uLlxyXG4gICAgICogQHBhcmFtIGlucHV0U3RyXHJcbiAgICAgKi9cclxuICAgIHBhcnNlID0gKGlucHV0U3RyOiBzdHJpbmcpOiBNb25vbSA9PiB7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBsaXRlcmFsIHBhcnQuXHJcbiAgICAgICAgdGhpcy5saXRlcmFsU3RyID0gaW5wdXRTdHI7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgY29lZmZpY2llbnRcclxuICAgICAgICB0aGlzLl9jb2VmZmljaWVudCA9IG5ldyBGcmFjdGlvbigpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgWy4uLmlucHV0U3RyLnJlcGxhY2UoLyhbYS16XSl8KFxcXlsrLV0/WzAtOV0rKS9nLCAnLCcpLnNwbGl0KCcsJyldKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSB2YWx1ZSBpcyBlbXB0eS5cclxuICAgICAgICAgICAgaWYgKHYudHJpbSgpID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE11bHRpcGxlIHRoZSBjdXJyZW50IGNvZWZmaWNpZW50IGJ5IHRoZSBuZXcgZm91bmQgdmFsdWUuXHJcbiAgICAgICAgICAgIHRoaXMuX2NvZWZmaWNpZW50Lm11bHRpcGx5KG5ldyBGcmFjdGlvbigpLnBhcnNlKHYudHJpbSgpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBjbGVhbiA9ICgpOiBNb25vbSA9PiB7XHJcbiAgICAgICAgZm9yKGxldCBsZXR0ZXIgaW4gdGhpcy5fbGl0ZXJhbCl7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2xpdGVyYWxbbGV0dGVyXT09PTApe2RlbGV0ZSB0aGlzLl9saXRlcmFsW2xldHRlcl07fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZXRhdGUgYSB6ZXJvIHZhbHVlIG1vbm9tXHJcbiAgICAgKi9cclxuICAgIHplcm8gPSAoKTogTW9ub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX2NvZWZmaWNpZW50ID0gbmV3IEZyYWN0aW9uKCkuemVybygpO1xyXG4gICAgICAgIHRoaXMuX2xpdGVyYWwgPSB7fTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9uZSB0aGUgY3VycmVudCBNb25vbS5cclxuICAgICAqL1xyXG4gICAgY2xvbmUgPSAoKTogTW9ub20gPT4ge1xyXG4gICAgICAgIGxldCBGOiBNb25vbSA9IG5ldyBNb25vbSgpO1xyXG5cclxuICAgICAgICBGLmNvZWZmaWNpZW50ID0gdGhpcy5fY29lZmZpY2llbnQuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgLy8gQ29weSB0aGUgbGl0ZXJhbCBwYXJ0cy5cclxuICAgICAgICBmb3IgKGxldCBrIGluIHRoaXMuX2xpdGVyYWwpIHtcclxuICAgICAgICAgICAgRi5sZXR0ZXIoaywgdGhpcy5fbGl0ZXJhbFtrXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBGO1xyXG4gICAgfTtcclxuXHJcbiAgICByYW5kb20gPSAobGV0dGVyczogc3RyaW5nID0gJ3gnLCBkZWdyZWU6IG51bWJlciA9IDEsIHdpdGhGcmFjdGlvbjogYm9vbGVhbiA9IGZhbHNlLCBhbGxvd1plcm86IGJvb2xlYW4gPSB0cnVlKTogTW9ub20gPT4ge1xyXG4gICAgICAgIHRoaXMuY29lZmZpY2llbnQucGFyc2VCeUludGVnZXIoTnVtZXJpYy5yYW5kb21JbnRTeW0oMTAsIGFsbG93WmVybyksICh3aXRoRnJhY3Rpb24pID8gTnVtZXJpYy5yYW5kb21JbnQoMSwgMTApIDogMSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IEwgb2YgbGV0dGVycy5zcGxpdCgnJykpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXR0ZXIoTCwgKGxldHRlcnMubGVuZ3RoID4gMSkgPyBOdW1lcmljLnJhbmRvbUludChkZWdyZWUpIDogZGVncmVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgcG93ZXIgb2YgYSBwYXJ0aWN1bGFyIGxldHRlclxyXG4gICAgICogQHBhcmFtIGxldHRlciAoc3RyaW5nKSBMZXR0ZXIgdG8gY2hhbmdlXHJcbiAgICAgKiBAcGFyYW0gcG93IChudW1iZXIpIFBvd2VyIG9mIHRoZSBsZXR0ZXIgKG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlci5cclxuICAgICAqL1xyXG4gICAgbGV0dGVyID0gKGxldHRlcjogc3RyaW5nLCBwb3c6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgICAgIC8vIElmIHRoZSBwb3dlciBpcyBub3QgbGVnYWwgb3IgaXMgemVybywgcmVtb3ZlIHRoZSBsZXR0ZXIgZnJvbSB0aGUgZGljdFxyXG4gICAgICAgIGlmIChwb3cgPD0gMCB8fCAhTnVtYmVyLmlzU2FmZUludGVnZXIocG93KSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGl0ZXJhbFtsZXR0ZXJdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXRlcmFsW2xldHRlcl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9saXRlcmFsW2xldHRlcl0gPSBwb3c7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNYXRoZW1hdGljYWwgb3BlcmF0aW9uc1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdHdvIG1vbm9tcyBhcmUgc2ltaWxhclxyXG4gICAgICogQHBhcmFtIE1cclxuICAgICAqL1xyXG4gICAgaXNTYW1lQXMgPSAoTTogTW9ub20pOiBib29sZWFuID0+IHtcclxuICAgICAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgYWxsIGtleXMgZnJvbSBib3RoIG1vbm9tcy5cclxuICAgICAgICBsZXQgTTE6IHN0cmluZ1tdID0gT2JqZWN0LmtleXModGhpcy5fbGl0ZXJhbCksXHJcbiAgICAgICAgICAgIE0yOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKE0ubGl0ZXJhbCksXHJcbiAgICAgICAgICAgIEs6IHN0cmluZ1tdID0gTTEuY29uY2F0KE0yLmZpbHRlcigoaXRlbSkgPT4gTTEuaW5kZXhPZihpdGVtKSA8IDApKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIEspIHtcclxuICAgICAgICAgICAgLy8gVGhlIGxldHRlciBpcyBub3QgYXZhaWxhYmxlIGluIG9uZSBvZiB0aGUgbW9ub21cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpdGVyYWxba2V5XSA9PT0gdW5kZWZpbmVkIHx8IE0ubGl0ZXJhbFtrZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUaGUgbGV0dGVyIGRvZXMgbm90IGhhdmUgdGhlIHNhbWUgcG93ZXIgaW4gZWFjaCBtb25vbXMuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9saXRlcmFsW2tleV0gIT09IE0ubGl0ZXJhbFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFsbCBhcmUgcG9zaXRpdmUgY2hlY2sgLSB0aGUgbW9ub21zIGFyZSB0aGUgc2FtZXMuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgbXVsdGlwbGUgbW9ub21zIGFyZSBzaW1pbGFyXHJcbiAgICAgKiBAcGFyYW0gTVxyXG4gICAgICovXHJcbiAgICBhcmVTYW1lQXMgPSAoLi4uTTogTW9ub21bXSk6IGJvb2xlYW4gPT4ge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBhbGwgbW9ub21zIGlmIHRoZXkgYXJlIHRoZSBzYW1lIGFzIHRoZSBcInRoaXNcIiBvbmUuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1NhbWVBcyhNW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBbGwgY2hlY2sgcGFzc2VkIC0+IGFsbCB0aGUgbW9ub21zIGFyZSBzaW1pbGFyLlxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdHdvIG1vbm9tcyBhcmUgZXF1YWxzXHJcbiAgICAgKiBAcGFyYW0gTVxyXG4gICAgICovXHJcbiAgICBpc0VxdWFsID0gKE06IE1vbm9tKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzU2FtZUFzKE0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvZWZmaWNpZW50LmlzRXF1YWwoTS5jb2VmZmljaWVudCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgbXV0bGlwbGUgbW9ub21zIGFyZSBlcXVhbHNcclxuICAgICAqIEBwYXJhbSBNXHJcbiAgICAgKi9cclxuICAgIGFyZUVxdWFscyA9ICguLi5NOiBNb25vbVtdKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgLy8gVGhleSBhcmUgbm90IHNpbWlsYXIuXHJcbiAgICAgICAgaWYgKCF0aGlzLmFyZVNhbWVBcyguLi5NKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBhbGwgY29lZmZpY2llbnQuIFRoZXkgbXVzdCBiZSBlcXVhbHMuXHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiBNKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fY29lZmZpY2llbnQuaXNFcXVhbChtLmNvZWZmaWNpZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBbGwgY2hlY2tzIHBhc3NlZC5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGRlZ3JlZSBvZiBhIG1vbm9tLiBJZiBubyBsZXR0ZXIgaXMgZ2l2ZW4sIHRoZSByZXN1bHQgd2lsbCBiZSB0aGUgZ2xvYmFsIGRlZ3JlZS5cclxuICAgICAqIEBwYXJhbSBsZXR0ZXIgKHN0cmluZykgTGV0dGVyIHRvIGdldCB0byBkZWdyZWUgKHBvd2VyKVxyXG4gICAgICovXHJcbiAgICBkZWdyZWUgPSAobGV0dGVyPzogc3RyaW5nKTogbnVtYmVyID0+IHtcclxuICAgICAgICBpZiAoT2JqZWN0LmVudHJpZXModGhpcy5fbGl0ZXJhbCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxldHRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIE5vdCBsZXR0ZXIgZ2l2ZW4gLT4gd2UgZ2V0IHRoZSBnbG9iYWwgbW9ub20gZGVncmVlIChzdW0gb2YgYWxsIHRoZSBsZXR0ZXJzKS5cclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5fbGl0ZXJhbCkucmVkdWNlKCh0LCBuKSA9PiB0ICsgbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gQSBsZXR0ZXIgaXMgZ2l2ZW4gLT4gZ2V0IHRoZSBjb3JyZXNwb25kaW5nIHBvd2VyLlxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGl0ZXJhbFtsZXR0ZXJdID09PSB1bmRlZmluZWQgPyAwIDogdGhpcy5fbGl0ZXJhbFtsZXR0ZXJdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaGFzTGV0dGVyID0gKGxldHRlcj86c3RyaW5nKTpib29sZWFuID0+IHtcclxuICAgICAgICBpZihsZXR0ZXI9PT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICBsZXR0ZXIgPSAneCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZih0aGlzLl9saXRlcmFsW2xldHRlcl09PT11bmRlZmluZWQpe3JldHVybiBmYWxzZTt9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpdGVyYWxbbGV0dGVyXSE9PTA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGxjbSA9ICguLi5tb25vbXM6TW9ub21bXSk6TW9ub20gPT4ge1xyXG4gICAgICAgIGxldCBNID0gbmV3IE1vbm9tKCksXHJcbiAgICAgICAgICAgIGNvZWZmTjogbnVtYmVyW10gPSBtb25vbXMubWFwKHZhbHVlID0+IHZhbHVlLmNvZWZmaWNpZW50Lm51bWVyYXRvciksXHJcbiAgICAgICAgICAgIGNvZWZmRDogbnVtYmVyW10gPSBtb25vbXMubWFwKHZhbHVlID0+IHZhbHVlLmNvZWZmaWNpZW50LmRlbm9taW5hdG9yKSxcclxuICAgICAgICAgICAgbiA9IE51bWVyaWMuZ2NkKC4uLmNvZWZmTiksXHJcbiAgICAgICAgICAgIGQgPSBOdW1lcmljLmxjbSguLi5jb2VmZkQpO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGNvZWZmaWNpZW50LlxyXG4gICAgICAgIE0uY29lZmZpY2llbnQgPSBuZXcgRnJhY3Rpb24oKS5wYXJzZUJ5SW50ZWdlcihuLCBkKS5yZWR1Y2UoKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IHRoZSBsaXR0ZXJhbCBwYXJ0cyAtIGdvIHRocm91Z2ggZWFjaCBtb25vbXMgbGl0dGVyYWwgcGFydHMgYW5kIGdldCBvbmx5IHRoZSBsb3dlc3QgZGVncmVlIG9mIGVhY2ggbGV0dGVycy5cclxuICAgICAgICBmb3IobGV0IG0gb2YgbW9ub21zKXtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBpbmV4aXN0YW50IGxldHRlcnMgZnJvbSB0aGUgcmVzdWx0aW5nIG1vbm9tXHJcbiAgICAgICAgICAgIGZvcihsZXQgbGV0dGVyIGluIE0ubGl0ZXJhbCl7XHJcbiAgICAgICAgICAgICAgICBpZighKGxldHRlciBpbiBtLmxpdGVyYWwpKXtNLmxpdGVyYWxbbGV0dGVyXSA9IDA7fVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvcihsZXQgbGV0dGVyIGluIG0ubGl0ZXJhbCl7XHJcbiAgICAgICAgICAgICAgICBpZihNLmxpdGVyYWxbbGV0dGVyXT09PXVuZGVmaW5lZCAmJiBtLmxpdGVyYWxbbGV0dGVyXT4wKXtcclxuICAgICAgICAgICAgICAgICAgICBNLmxpdGVyYWxbbGV0dGVyXSA9IG0ubGl0ZXJhbFtsZXR0ZXJdO1xyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgTS5saXRlcmFsW2xldHRlcl0gPSBNYXRoLm1pbihtLmxpdGVyYWxbbGV0dGVyXSwgTS5saXRlcmFsW2xldHRlcl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gTTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIG9wcG9zZWRcclxuICAgICAqIFJldHVybnMgYSBtb25vbS5cclxuICAgICAqL1xyXG4gICAgb3Bwb3NlZCA9ICgpOiBNb25vbSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY29lZmZpY2llbnQub3Bwb3NlZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhbGwgc2ltaWxhciBtb25vbXMuIElmIHRoZXkgYXJlbid0IHNpbWlsYXIsIHRoZXkgYXJlIHNpbXBseSBza2lwcGVkLlxyXG4gICAgICogQHBhcmFtIE0gKE1vbm9tW10pIFRoZSBtb25vbXMgdG8gYWRkLlxyXG4gICAgICovXHJcbiAgICBhZGQgPSAoLi4uTTogTW9ub21bXSk6IE1vbm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIE0pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lQXMobSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvZWZmaWNpZW50LmFkZChtLmNvZWZmaWNpZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBZGQ6IElzIG5vdCBzaW1pbGFyOiAnLCBtLmRpc3BsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1YnN0cmFjdCBtdWx0aXBsZSBtb25vbXNcclxuICAgICAqIEBwYXJhbSBNIChNb25vbVtdKSBUaGUgbW9ub21zIHRvIHN1YnN0cmFjdFxyXG4gICAgICovXHJcbiAgICBzdWJzdHJhY3QgPSAoLi4uTTogTW9ub21bXSk6IE1vbm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIE0pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lQXMobSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvZWZmaWNpZW50LmFkZChtLmNvZWZmaWNpZW50LmNsb25lKCkub3Bwb3NlZCgpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzdHJhY3Q6IElzIG5vdCBzaW1pbGFyOiAnLCBtLmRpc3BsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE11bHRpcGxlIG11bHRpcGxlIG1vbm9tcyB0byB0aGUgY3VycmVudCBtb25vbVxyXG4gICAgICogQHBhcmFtIE0gKE1vbm9tW10pIFRoZSBtb25vbXMgdG8gbXVsdGlwbHkgdG8uXHJcbiAgICAgKi9cclxuICAgIG11bHRpcGx5ID0gKC4uLk06IE1vbm9tW10pOiBNb25vbSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiBNKSB7XHJcbiAgICAgICAgICAgIC8vIE11bHRpcGx5IHRoZSBjb2VmZmljaWVudC5cclxuICAgICAgICAgICAgdGhpcy5fY29lZmZpY2llbnQubXVsdGlwbHkobS5jb2VmZmljaWVudCk7XHJcbiAgICAgICAgICAgIC8vIE11bHRpcGx5IHRoZSBsaXRlcmFsIHBhcnRzLlxyXG4gICAgICAgICAgICBmb3IgKGxldCBsZXR0ZXIgaW4gbS5saXRlcmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXRlcmFsW2xldHRlcl0gPSAodGhpcy5fbGl0ZXJhbFtsZXR0ZXJdID09PSB1bmRlZmluZWQpID8gbS5saXRlcmFsW2xldHRlcl0gOiB0aGlzLl9saXRlcmFsW2xldHRlcl0gKyBtLmxpdGVyYWxbbGV0dGVyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIHhtdWx0aXBseSA9IChNMTogTW9ub20sIE0yOiBNb25vbSk6IE1vbm9tID0+IHtcclxuICAgICAgICByZXR1cm4gTTEuY2xvbmUoKS5tdWx0aXBseShNMik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEaXZpZGUgdGhlIGN1cnJlbnQgbW9ub21zIGJ5IG11bHRpcGxlIG1vbm9tc1xyXG4gICAgICogQHBhcmFtIE0gKE1vbm9tW10pXHJcbiAgICAgKi9cclxuICAgIGRpdmlkZSA9ICguLi5NOiBNb25vbVtdKTogTW9ub20gPT4ge1xyXG4gICAgICAgIC8vIERlcGVuZGluZyBvbiB0aGUgZ2l2ZW4gdmFsdWUsIGNob29zZSB0aGUgY3VycmVudCBpdGVtXHJcbiAgICAgICAgZm9yIChsZXQgdiBvZiBNKSB7XHJcbiAgICAgICAgICAgIC8vIERpdmlkZSB0aGUgY29lZmZpY2llbnRcclxuICAgICAgICAgICAgdGhpcy5fY29lZmZpY2llbnQuZGl2aWRlKHYuY29lZmZpY2llbnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gU3Vic3RyYWN0IHRoZSBwb3dlciB2YWx1ZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgbGV0dGVyIGluIHYubGl0ZXJhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGl0ZXJhbFtsZXR0ZXJdID0gKHRoaXMuX2xpdGVyYWxbbGV0dGVyXSA9PT0gdW5kZWZpbmVkKSA/IC12LmxpdGVyYWxbbGV0dGVyXSA6IHRoaXMuX2xpdGVyYWxbbGV0dGVyXSAtIHYubGl0ZXJhbFtsZXR0ZXJdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwb3dlciBvZiBhIHBhcnRpY3VsYXIgbGV0dGVyIGlzIHplb3IsIGRlbGV0ZSBpdCBmcm9tIHRoZSBsaXRlcmFsIHBhcnQuLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xpdGVyYWxbbGV0dGVyXSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXRlcmFsW2xldHRlcl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBwb3cgb2YgYSBtb25vbS5cclxuICAgICAqIEBwYXJhbSBuYiAobnVtYmVyKSA6IE1hdGhlbWF0aWNhbCBwb3dcclxuICAgICAqL1xyXG4gICAgcG93ID0gKG5iOiBudW1iZXIpOiBNb25vbSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY29lZmZpY2llbnQucG93KG5iKTtcclxuICAgICAgICBmb3IgKGxldCBsZXR0ZXIgaW4gdGhpcy5fbGl0ZXJhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9saXRlcmFsW2xldHRlcl0gKj0gbmI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBldmFsdWF0ZSA9ICh2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogRnJhY3Rpb24gfSk6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBsZXQgciA9IHRoaXMuY29lZmZpY2llbnQuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgTCBpbiB0aGlzLl9saXRlcmFsKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbTF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGcmFjdGlvbigpLnplcm8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByLm11bHRpcGx5KHZhbHVlc1tMXS5jbG9uZSgpLnBvdyh0aGlzLl9saXRlcmFsW0xdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBTZXR0ZXJcclxuICAgIHNldCBjb2VmZmljaWVudChGOiBGcmFjdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2NvZWZmaWNpZW50ID0gRjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbGl0ZXJhbChMOiB7IFtLZXk6IHN0cmluZ106IG51bWJlciB9KSB7XHJcbiAgICAgICAgdGhpcy5fbGl0ZXJhbCA9IEw7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGxpdGVyYWxTdHIoaW5wdXRTdHI6IHN0cmluZykge1xyXG4gICAgICAgIC8vIE1hdGNoIGFsbCB4Xm5cclxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgWy4uLmlucHV0U3RyLm1hdGNoQWxsKC8oW2Etel0pXFxeKFsrLV0/WzAtOV0rKS9nKV0pIHtcclxuICAgICAgICAgICAgaWYgKCEodlsxXSBpbiB0aGlzLl9saXRlcmFsKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGl0ZXJhbFt2WzFdXSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbGl0ZXJhbFt2WzFdXSArPSArdlsyXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTWF0Y2ggYWxsIHNpbmdsZSBsZXR0ZXJzXHJcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIFsuLi5pbnB1dFN0ci5tYXRjaEFsbCgvKFthLXpdKD8hXFxeKSkvZyldKSB7XHJcbiAgICAgICAgICAgIGlmICghKHZbMV0gaW4gdGhpcy5fbGl0ZXJhbCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xpdGVyYWxbdlsxXV0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xpdGVyYWxbdlsxXV0gKz0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0dGVyXHJcbiAgICBnZXQgY29lZmZpY2llbnQoKTogRnJhY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb2VmZmljaWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGl0ZXJhbCgpOiB7IFtLZXk6IHN0cmluZ106IG51bWJlciB9IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGl0ZXJhbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNaZXJvKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb2VmZmljaWVudC52YWx1ZSA9PT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNNdWx0aVZhcmlhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBuOm51bWJlcj0wO1xyXG5cclxuICAgICAgICBmb3IobGV0IGxldHRlciBpbiB0aGlzLl9saXRlcmFsKXtcclxuICAgICAgICAgICAgaWYodGhpcy5fbGl0ZXJhbFtsZXR0ZXJdIT0wKXtcclxuICAgICAgICAgICAgICAgIG4rKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG4+MTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFyaWFibGVzKCk6c3RyaW5nW10ge1xyXG4gICAgICAgIHRoaXMuY2xlYW4oKTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fbGl0ZXJhbClcclxuICAgIH1cclxuICAgIGdldCBudW1iZXJPZlZhcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhcmlhYmxlcy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGRpc3BsYXkgZ2V0dGVyIGlzIHRvIGJlIHVzZWQgaW4gdGhlIHBvbHlub20gZGlzcGxheSBnZXR0ZXJcclxuICAgICAqL1xyXG4gICAgZ2V0IGRpc3BsYXkoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgTDogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgbGV0dGVyIGluIHRoaXMuX2xpdGVyYWwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpdGVyYWxbbGV0dGVyXSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgTCArPSBgJHtsZXR0ZXJ9YDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9saXRlcmFsW2xldHRlcl0gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTCArPSBgXiR7dGhpcy5fbGl0ZXJhbFtsZXR0ZXJdfWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChMID09PSAnJykge1xyXG4gICAgICAgICAgICAvLyBObyBsZXR0ZXIgLSBtZWFucyBpdCdzIG9ubHkgYSBudW1iZXIgIVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29lZmZpY2llbnQudmFsdWUgIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuX2NvZWZmaWNpZW50LmRpc3BsYXl9YDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb2VmZmljaWVudC52YWx1ZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEw7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY29lZmZpY2llbnQudmFsdWUgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYC0ke0x9YDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jb2VmZmljaWVudC52YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcwJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9jb2VmZmljaWVudC5kaXNwbGF5fSR7TH1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0ZXgoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgTDogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgZm9yIChsZXQgbGV0dGVyIGluIHRoaXMuX2xpdGVyYWwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpdGVyYWxbbGV0dGVyXSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgTCArPSBgJHtsZXR0ZXJ9YDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9saXRlcmFsW2xldHRlcl0gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTCArPSBgXiR7dGhpcy5fbGl0ZXJhbFtsZXR0ZXJdfWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChMID09PSAnJykge1xyXG4gICAgICAgICAgICAvLyBObyBsZXR0ZXIgLSBtZWFucyBpdCdzIG9ubHkgYSBudW1iZXIgIVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29lZmZpY2llbnQudmFsdWUgIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuX2NvZWZmaWNpZW50LmRmcmFjfWA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29lZmZpY2llbnQudmFsdWUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBMO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NvZWZmaWNpZW50LnZhbHVlID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAtJHtMfWA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY29lZmZpY2llbnQudmFsdWUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnMCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5fY29lZmZpY2llbnQuZGZyYWN9JHtMfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIFNodXRpbmd5YXJkIHtcclxuICAgIHByaXZhdGUgX3Jwbjogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluIGlmIHRoZSB0b2tlbiBpcyBhIGRlZmluZWQgb3BlcmF0aW9uXHJcbiAgICAgKiBEZWZpbmVkIG9wZXJhdGlvbnM6ICsgLSAqIC8gXiBzaW4gY29zIHRhblxyXG4gICAgICogQHBhcmFtIHRva2VuXHJcbiAgICAgKi9cclxuICAgIGlzT3BlcmF0aW9uKHRva2VuOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodG9rZW5bMF0ubWF0Y2goL1tcXCtcXC1cXCpcXC9cXF5dL2cpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodG9rZW4ubWF0Y2goL15zaW58Y29zfHRhbi9nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgbmV4dCB0b2tlbiB0byBhbmFseXNlLlxyXG4gICAgICogQHBhcmFtIGV4cHIgKHN0cmluZykgRXhwcmVzc2lvbiB0byBhbmFseXNlXHJcbiAgICAgKiBAcGFyYW0gc3RhcnQgKG51bWJlcikgQ1VycmVudCBwb3NpdGlvbiBpbiB0aGUgZXhwciBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIE5leHRUb2tlbihleHByOiBzdHJpbmcsIHN0YXJ0OiBudW1iZXIpOiBbc3RyaW5nLCBudW1iZXIsIHN0cmluZ10ge1xyXG4gICAgICAgIGxldCB0b2tlbk1hdGNoOiBzdHJpbmdbXSwgdG9rZW46IHN0cmluZyA9ICcnLCB0b2tlblR5cGU6IHN0cmluZyA9ICdtb25vbSc7XHJcblxyXG4gICAgICAgIC8vIERldGVjdCBhIGZyYWN0aW9uIG1vbm9tcyBvciByZXR1cm4gZW1wdHkgYXJyYXlcclxuICAgICAgICB0b2tlbk1hdGNoID0gKGV4cHIuc3Vic3RyKHN0YXJ0KS5tYXRjaCgvXlswLTlcXC9hLXpcXF5dKy9nKSkgfHwgW107XHJcblxyXG4gICAgICAgIGlmICh0b2tlbk1hdGNoLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbk1hdGNoWzBdO1xyXG4gICAgICAgICAgICB0b2tlblR5cGUgPSAnbW9ub20nO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJdCdzIGFuIG9wZXJhdGlvbiAhXHJcbiAgICAgICAgZWxzZSBpZiAoZXhwcltzdGFydF0ubWF0Y2goL1tcXCtcXC1cXCpcXC9cXF5dL2cpKSB7XHJcbiAgICAgICAgICAgIHRva2VuID0gZXhwcltzdGFydF07XHJcbiAgICAgICAgICAgIHRva2VuVHlwZSA9ICdvcGVyYXRpb24nO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJdCdzIGFuIG9wZW5pbmcgcGFyZW50aGVzZVxyXG4gICAgICAgIGVsc2UgaWYgKGV4cHJbc3RhcnRdID09PSAnKCcpIHtcclxuICAgICAgICAgICAgdG9rZW4gPSAnKCc7XHJcbiAgICAgICAgICAgIHRva2VuVHlwZSA9ICcoJztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSXQncyBhIGNsb3NpbmcgcGFyZW50aGVzZVxyXG4gICAgICAgIGVsc2UgaWYgKGV4cHJbc3RhcnRdID09PSAnKScpIHtcclxuICAgICAgICAgICAgdG9rZW4gPSAnKSc7XHJcbiAgICAgICAgICAgIHRva2VuVHlwZSA9ICcpJztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSXQncyBhbiBhcmd1bWVudCBzZXBhcmF0b3IgZm9yIGEgZnVuY3Rpb25cclxuICAgICAgICBlbHNlIGlmIChleHByW3N0YXJ0XSA9PT0gJywnKSB7XHJcbiAgICAgICAgICAgIHRva2VuID0gJywnO1xyXG4gICAgICAgICAgICB0b2tlblR5cGUgPSAnZnVuY3Rpb24tYXJndW1lbnQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJdCdzIGEgKGJhc2ljKSB0cmlnb25vbWV0cnkgZnVuY3Rpb25cclxuICAgICAgICBlbHNlIGlmIChleHByLm1hdGNoKC9eKHNpbnxjb3N8dGFuKS9nKSkge1xyXG4gICAgICAgICAgICB0b2tlbiA9ICcpJztcclxuICAgICAgICAgICAgdG9rZW5UeXBlID0gJyknO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgLy8gVE9ETzogQWRkIG90aGVyIGZ1bmN0aW9ucyAhXHJcblxyXG4gICAgICAgIC8vIEl0J3MgYSBtb25vbS5cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogQWN0dWFsbHksIG5lZ2F0aXZlIGV4cG9zYW50IGFyZW4ndCBzdXBwb3J0ZWQuXHJcbiAgICAgICAgICAgIC8vIHRva2VuID0gKGV4cHIuc3Vic3RyKHN0YXJ0KS5tYXRjaCgvXltcXGRhLXpcXF5dKy9nKVswXSl8fCcnO1xyXG4gICAgICAgICAgICB0b2tlbiA9IHRva2VuTWF0Y2hbMF07XHJcbiAgICAgICAgICAgIHRva2VuVHlwZSA9ICdtb25vbSc7XHJcblxyXG4gICAgICAgICAgICBpZiAodG9rZW4gPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0b2tlbiA9IGV4cHJbc3RhcnRdO1xyXG4gICAgICAgICAgICAgICAgdG9rZW5UeXBlID0gJ21vbm9tJztcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTSFVUSU5HIFlBUkQgLSBORVhUIFRPS0VOOiBlcnJvciBhdCAnLCBzdGFydCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0b2tlbiwgc3RhcnQgKyB0b2tlbi5sZW5ndGgsIHRva2VuVHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIFt0b2tlbiwgc3RhcnQgKyB0b2tlbi5sZW5ndGgsIHRva2VuVHlwZV07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTYW5pdGl6ZSBhbiBleHByZXNzaW9uIGJ5IGFkZGluZyBtaXNzaW5nIGNvbW1vbiBvcGVyYXRpb24gKG11bHRpcGxpY2F0aW9uIGJldHdlZW4gcGFyZW50aGVzZXNlcylcclxuICAgICAqIEBwYXJhbSBleHByXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgVW5pZm9ybWl6ZXIoZXhwcjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgZXhwcjI7XHJcbiAgICAgICAgLy8gUmVwbGFjZSBtaXNzaW5nIG11bHRpcGxpY2F0aW9uIGJldHdlZW4gdHdvIHBhcmVudGhlc2VcclxuICAgICAgICBleHByMiA9IGV4cHIucmVwbGFjZSgvXFwpXFwoL2csICcpKignKTtcclxuXHJcbiAgICAgICAgLy8gUmVwbGFjZSBtaXNzaW5nIG11bHRpcGxpY2F0aW9uIGJldHdlZW4gbnVtYmVyIG9yIGxldHRlciBhbmQgcGFyZW50aGVzZS5cclxuICAgICAgICBleHByMiA9IGV4cHIyLnJlcGxhY2UoLyhbXFxkYS16XSkoXFwoKS9nLCBcIiQxKiQyXCIpO1xyXG4gICAgICAgIGV4cHIyID0gZXhwcjIucmVwbGFjZSgvKFxcKSkoW1xcZGEtel0pL2csIFwiJDEqJDJcIik7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IG11c3QgaGFuZGxlIHRyaWdvbm9tZXRyaWMgb3IgYW55IG90aGVyIGZ1bmN0aW9uIGlkZW50aWZpZXJcclxuICAgICAgICByZXR1cm4gZXhwcjI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBhbiBleHByZXNzaW9uIHVzaW5nIHRoZSBzaHV0dGluZyB5YXJkIHRyZWUgYWxnb3JpdGhtc1xyXG4gICAgICogQHBhcmFtIGV4cHIgKHN0cmluZykgRXhwcmVzc2lvbiB0byBhbmFseXNlXHJcbiAgICAgKiBSZXR1cm5zIGEgUlBOIGxpc3Qgb2YgaXRlbXMuXHJcbiAgICAgKi9cclxuICAgIHBhcnNlKGV4cHI6IHN0cmluZyk6IFNodXRpbmd5YXJkIHtcclxuICAgICAgICBsZXQgb3V0UXVldWU6IHN0cmluZ1tdID0gW10sXHJcbiAgICAgICAgICAgIG9wU3RhY2s6IHN0cmluZ1tdID0gW10sXHJcbiAgICAgICAgICAgIHByZWNlZGVuY2U6IHsgW0tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7XHJcbiAgICAgICAgICAgICAgICAnXic6IDQsXHJcbiAgICAgICAgICAgICAgICAnKic6IDMsXHJcbiAgICAgICAgICAgICAgICAnLyc6IDMsXHJcbiAgICAgICAgICAgICAgICAnKyc6IDIsXHJcbiAgICAgICAgICAgICAgICAnLSc6IDJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYXNzb2NpYXRpdmU6IHsgW0tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XHJcbiAgICAgICAgICAgICAgICAnXic6ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICAnKic6ICdsZWZ0JyxcclxuICAgICAgICAgICAgICAgICcvJzogJ2xlZnQnLFxyXG4gICAgICAgICAgICAgICAgJysnOiAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgICAnLSc6ICdsZWZ0J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b2tlbjogc3RyaW5nID0gJycsXHJcbiAgICAgICAgICAgIHRva2VuUG9zOiBudW1iZXIgPSAwLFxyXG4gICAgICAgICAgICB0b2tlblR5cGU6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgICAgICBleHByID0gdGhpcy5Vbmlmb3JtaXplcihleHByKTtcclxuXHJcbiAgICAgICAgbGV0IHNlY3VyaXR5TG9vcEx2bDEgPSA1MCxcclxuICAgICAgICAgICAgc2VjdXJpdHlMb29wTHZsMl9kZWZhdWx0ID0gNTAsXHJcbiAgICAgICAgICAgIHNlY3VyaXR5TG9vcEx2bDI7XHJcblxyXG4gICAgICAgIHdoaWxlICh0b2tlblBvcyA8IGV4cHIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNlY3VyaXR5TG9vcEx2bDEtLTtcclxuICAgICAgICAgICAgaWYgKHNlY3VyaXR5TG9vcEx2bDEgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTRUNVUklUWSBMRVZFTCAxIEVYSVQnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIG5leHQgdG9rZW4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIG5ldyAoZW5kaW5nKSBwb3NpdGlvblxyXG4gICAgICAgICAgICBbdG9rZW4sIHRva2VuUG9zLCB0b2tlblR5cGVdID0gdGhpcy5OZXh0VG9rZW4oZXhwciwgdG9rZW5Qb3MpO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0b2tlblR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21vbm9tJzpcclxuICAgICAgICAgICAgICAgICAgICBvdXRRdWV1ZS5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ29wZXJhdGlvbic6XHJcbiAgICAgICAgICAgICAgICAgICAgLy9JZiB0aGUgdG9rZW4gaXMgYW4gb3BlcmF0b3IsIG8xLCB0aGVuOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BTdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvcFRvcCA9IG9wU3RhY2tbb3BTdGFjay5sZW5ndGggLSAxXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5TG9vcEx2bDIgPSArc2VjdXJpdHlMb29wTHZsMl9kZWZhdWx0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy93aGlsZSB0aGVyZSBpcyBhbiBvcGVyYXRvciB0b2tlbiBvMiwgYXQgdGhlIHRvcCBvZiB0aGUgb3BlcmF0b3Igc3RhY2sgYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChvcFRvcCBpbiBhc3NvY2lhdGl2ZSAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9laXRoZXIgbzEgaXMgbGVmdC1hc3NvY2lhdGl2ZSBhbmQgaXRzIHByZWNlZGVuY2UgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoYXQgb2YgbzIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFzc29jaWF0aXZlW3Rva2VuXSA9PT0gJ2xlZnQnICYmIHByZWNlZGVuY2VbdG9rZW5dIDw9IHByZWNlZGVuY2Vbb3BUb3BdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vciBvMSBpcyByaWdodCBhc3NvY2lhdGl2ZSwgYW5kIGhhcyBwcmVjZWRlbmNlIGxlc3MgdGhhbiB0aGF0IG9mIG8yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhc3NvY2lhdGl2ZVt0b2tlbl0gPT09ICdyaWdodCcgJiYgcHJlY2VkZW5jZVt0b2tlbl0gPCBwcmVjZWRlbmNlW29wVG9wXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFNlY3VyaXR5IGV4aXQgISAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHlMb29wTHZsMi0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlY3VyaXR5TG9vcEx2bDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU0VDVVJJVFkgTEVWRUwgMiBPUEVSQVRJT04gRVhJVCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgb3BlcmF0aW9uIHRvIHRoZSBxdWV1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0UXVldWUucHVzaCgob3BTdGFjay5wb3AoKSkgfHwgJycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbmV4dCBvcGVyYXRpb24gb24gdG9wIG9mIHRoZSBTdGFjay5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wVG9wID0gb3BTdGFja1tvcFN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vYXQgdGhlIGVuZCBvZiBpdGVyYXRpb24gcHVzaCBvMSBvbnRvIHRoZSBvcGVyYXRvciBzdGFja1xyXG4gICAgICAgICAgICAgICAgICAgIG9wU3RhY2sucHVzaCh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0cmlnbyc6XHJcbiAgICAgICAgICAgICAgICAgICAgb3BTdGFjay5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uLWFyZ3VtZW50JzpcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBjaGVjayBpZiB0aGUgb3BTdGFjayBleGlzdC5cclxuICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUxvb3BMdmwyID0gK3NlY3VyaXR5TG9vcEx2bDJfZGVmYXVsdDtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAob3BTdGFja1tvcFN0YWNrLmxlbmd0aCAtIDFdICE9PSAnKCcgJiYgb3BTdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5TG9vcEx2bDItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlY3VyaXR5TG9vcEx2bDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTRUNVUklUWSBMRVZFTCAyIEZVTkNUSU9OIEFSR1VNRU5UIEVYSVQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRRdWV1ZS5wdXNoKChvcFN0YWNrLnBvcCgpKSB8fCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnKCc6XHJcbiAgICAgICAgICAgICAgICAgICAgb3BTdGFjay5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJyknOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5TG9vcEx2bDIgPSArc2VjdXJpdHlMb29wTHZsMl9kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vVW50aWwgdGhlIHRva2VuIGF0IHRoZSB0b3Agb2YgdGhlIHN0YWNrIGlzIGEgbGVmdCBwYXJlbnRoZXNpcywgcG9wIG9wZXJhdG9ycyBvZmYgdGhlIHN0YWNrIG9udG8gdGhlIG91dHB1dCBxdWV1ZS5cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAob3BTdGFja1tvcFN0YWNrLmxlbmd0aCAtIDFdICE9PSAnKCcgJiYgb3BTdGFjay5sZW5ndGggPiAxIC8qTWF5YmUgemVybyAhPyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUxvb3BMdmwyLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWN1cml0eUxvb3BMdmwyID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU0VDVVJJVFkgTEVWRUwgMiBDTE9TSU5HIFBBUkVOVEhFU0UgRVhJVCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dFF1ZXVlLnB1c2goKG9wU3RhY2sucG9wKCkpIHx8ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vUG9wIHRoZSBsZWZ0IHBhcmVudGhlc2lzIGZyb20gdGhlIHN0YWNrLCBidXQgbm90IG9udG8gdGhlIG91dHB1dCBxdWV1ZS5cclxuICAgICAgICAgICAgICAgICAgICBvcFN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGVvcnksIGV2ZXJ5dGhpbmcgc2hvdWxkIGJlIGhhbmRsZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFNIVVRJTkcgWUFSRDogJHt0b2tlblR5cGV9IDogJHt0b2tlbn0gYCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE91dHB1dFxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhvdXRRdWV1ZS5jb25jYXQob3BTdGFjay5yZXZlcnNlKCkpLmpvaW4oXCIgXCIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG91dFF1ZXVlLmNvbmNhdChvcFN0YWNrLnJldmVyc2UoKSkpO1xyXG4gICAgICAgIHRoaXMuX3JwbiA9IG91dFF1ZXVlLmNvbmNhdChvcFN0YWNrLnJldmVyc2UoKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBHZXR0ZXJcclxuICAgIGdldCBycG4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JwbjtcclxuICAgIH1cclxuXHJcblxyXG59XHJcbiIsIi8qKlxyXG4gKiBQb2x5bm9tIG1vZHVsZSBjb250YWlucyBldmVyeXRoaW4gbmVjZXNzYXJ5IHRvIGhhbmRsZSBwb2x5bm9tcy5cclxuICogQG1vZHVsZSBQb2x5bm9tXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtNb25vbX0gZnJvbSBcIi4vbW9ub21cIjtcclxuaW1wb3J0IHtTaHV0aW5neWFyZH0gZnJvbSBcIi4vc2h1dGluZ3lhcmRcIjtcclxuaW1wb3J0IHtGcmFjdGlvbn0gZnJvbSBcIi4vZnJhY3Rpb25cIjtcclxuaW1wb3J0IHtOdW1lcmljfSBmcm9tIFwiLi9udW1lcmljXCI7XHJcblxyXG4vKipcclxuICogUG9seW5vbSBjbGFzcyBjYW4gaGFuZGxlIHBvbHlub21zLCByZW9yZGVyLCByZXNvbHZlLCAuLi5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQb2x5bm9tIHtcclxuICAgIHByaXZhdGUgX21vbm9tczogTW9ub21bXTtcclxuICAgIHByaXZhdGUgX2ZhY3RvcnM6IFBvbHlub21bXTtcclxuICAgIHByaXZhdGUgX3RleFN0cmluZzogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfcmF3U3RyaW5nOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBvbHlub21TdHJpbmcgKG9wdGlvbmFsKSBEZWZhdWx0IHBvbHlub20gdG8gcGFyc2Ugb24gY2xhc3MgY3JlYXRpb25cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocG9seW5vbVN0cmluZz86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2ZhY3RvcnMgPSBbXTtcclxuICAgICAgICBpZihwb2x5bm9tU3RyaW5nIT09dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgdGhpcy5wYXJzZShwb2x5bm9tU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhpcyBjbGFzcyBpcyBhIFBvbHlub20uXHJcbiAgICAgKi9cclxuICAgIGlzUG9seW5vbSA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgYSBzdHJpbmcgdG8gYSBwb2x5bm9tLlxyXG4gICAgICogQHBhcmFtIGlucHV0U3RyXHJcbiAgICAgKi9cclxuICAgIHBhcnNlID0gKGlucHV0U3RyOiBzdHJpbmcpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICB0aGlzLl9yYXdTdHJpbmcgPSBpbnB1dFN0cjtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaHV0aW5nWWFyZFRvUmVkdWNlZFBvbHlub20oaW5wdXRTdHIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBlbXB0eSA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICB0aGlzLl9tb25vbXMgPSBbXTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIHBvbHlub20gdG8gemVyby5cclxuICAgICAqIEByZXR1cm5zIHt0aGlzfVxyXG4gICAgICovXHJcbiAgICB6ZXJvID0gKCk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX21vbm9tcy5wdXNoKG5ldyBNb25vbSgpLnplcm8oKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGNsb25lID0gKCk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIGxldCBQID0gbmV3IFBvbHlub20oKSxcclxuICAgICAgICAgICAgTTogTW9ub21bXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBNLnB1c2gobS5jbG9uZSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFAubW9ub21zID0gTTtcclxuICAgICAgICByZXR1cm4gUDtcclxuICAgIH07XHJcblxyXG4gICAgcm5kU2ltcGxlID0gKGRlZ3JlZTogbnVtYmVyID0gMSwgdW5pdDogYm9vbGVhbiA9IGZhbHNlLCB3aXRoRnJhY3Rpb246IGJvb2xlYW4gPSBmYWxzZSwgbGV0dGVyczogc3RyaW5nID0gJ3gnLCBhbGxvd1plcm86IGJvb2xlYW4gPSB0cnVlLCBudW1iZXJPZk1vbm9tczpudW1iZXIgPSAtMSk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIC8vIElmIHRoZSBjdXJyZW50IHBvbHlub20gKHRoaXMpIGlzIGFscmVhZHkgY3JlYXRlZCwgaW5pdGlhbGlzZSBpdCFcclxuICAgICAgICB0aGlzLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIGxldCBNOiBNb25vbTtcclxuICAgICAgICBmb3IgKGxldCBpID0gZGVncmVlOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBNID0gbmV3IE1vbm9tKCkucmFuZG9tKGxldHRlcnMsIGksIHdpdGhGcmFjdGlvbiwgKGkgPT09IGRlZ3JlZSkgPyBmYWxzZSA6IGFsbG93WmVybyk7XHJcblxyXG4gICAgICAgICAgICAvLyBXZSB3YW50IHRvIGhhdmUgdGhlIGdyZWF0ZXN0IGRlZ3JlZSBtb25vbSBjb2VmZmljaWVudCB0byBiZSB1bml0LlxyXG4gICAgICAgICAgICBpZiAodW5pdCAmJiBpID09PSBkZWdyZWUpIHtcclxuICAgICAgICAgICAgICAgIE0uY29lZmZpY2llbnQgPSBuZXcgRnJhY3Rpb24oKS5wYXJzZSgnMScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTW9ub20oTSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW1vdmUgcmFuZG9tbHkgdGhlIG1vbm9tcyB0byBtYXRjaCB0aGUgbnVtZXIgb2YgbW9ub21zLlxyXG4gICAgICAgIGlmKG51bWJlck9mTW9ub21zPjAgJiYgbnVtYmVyT2ZNb25vbXM8dGhpcy5sZW5ndGgpe1xyXG4gICAgICAgICAgICB0aGlzLnJlb3JkZXIoKTtcclxuICAgICAgICAgICAgLy8gS2VlcCB0aGUgZ3JlYXRlc3QgZGVncmVlIG1vbm9tLlxyXG4gICAgICAgICAgICAvLyBCdXQgcmVtb3ZlIHJhbmRvbWx5IHRoZSBuZXh0IG1vbm9tcy5cclxuICAgICAgICAgICAgd2hpbGUodGhpcy5sZW5ndGg+bnVtYmVyT2ZNb25vbXMpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9ub21zLnNwbGljZShOdW1lcmljLnJhbmRvbUludCgxLCB0aGlzLmxlbmd0aC0xKSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgcm5kRmFjdG9yYWJsZSA9IChkZWdyZWU6bnVtYmVyID0gMiwgdW5pdDogYm9vbGVhbiA9IGZhbHNlLCBsZXR0ZXJzOiBzdHJpbmcgPSAneCcpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICB0aGlzLl9mYWN0b3JzID0gW107XHJcbiAgICAgICAgZm9yKGxldCBpPTA7IGk8ZGVncmVlOyBpKyspe1xyXG4gICAgICAgICAgICB0aGlzLl9mYWN0b3JzLnB1c2gobmV3IFBvbHlub20oKS5ybmRTaW1wbGUoMSwgdW5pdCwgZmFsc2UsIGxldHRlcnMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZW1wdHkoKS5tb25vbXMgPSB0aGlzLl9mYWN0b3JzWzBdLm1vbm9tcztcclxuICAgICAgICBmb3IobGV0IGk9MTsgaTx0aGlzLl9mYWN0b3JzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgdGhpcy5tdWx0aXBseSh0aGlzLl9mYWN0b3JzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyB3aWxsIGdlbmVyZWF0ZSBhIG5vdCByZWR1Y2VkIHRleCBzdHJpbmcgb2YgdGhlIHBvbHlub20uXHJcbiAgICAgKiBAcGFyYW0gY29tcGxleGl0eSA6IE51bWJlciBvZiBpdGVyYXRpb24gdG8gaW5jcmVhc2UgdGhlIGNvbXBsZXhpdHkuXHJcbiAgICAgKi9cclxuICAgIG1ha2VJdENvbXBsaWNhdGUgPSAoY29tcGxleGl0eTpudW1iZXIgPSAxKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgdGhpcy5fdGV4U3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgIC8vIFRoZSBwb3lsbm9tIG11c3QgYmUgYXQgbGVhc3Qgb2YgdGhlIGZpcnN0IGRlZ3JlZS5cclxuICAgICAgICBpZih0aGlzLmRlZ3JlZSgpPDEpe3JldHVybiB0aGlzO31cclxuXHJcbiAgICAgICAgbGV0IG1EZWdyZWUgPSBOdW1lcmljLnJhbmRvbUludCgwLCB0aGlzLmRlZ3JlZSgpLTEpLFxyXG4gICAgICAgICAgICBBID0gbmV3IFBvbHlub20oKS5ybmRTaW1wbGUobURlZ3JlZSwgZmFsc2UsIGNvbXBsZXhpdHk+MSwgJ3gnLCBmYWxzZSwgY29tcGxleGl0eT4xPy0xOjEpLFxyXG4gICAgICAgICAgICBCID0gbmV3IFBvbHlub20oKS5ybmRTaW1wbGUoMSwgZmFsc2UsIGNvbXBsZXhpdHk+MSksXHJcbiAgICAgICAgICAgIEMgPSB0aGlzLmNsb25lKCkuc3Vic3RyYWN0KEEuY2xvbmUoKS5tdWx0aXBseShCKSk7XHJcblxyXG4gICAgICAgIC8vIFRyeSB0byBmYWN0b3JpemUgYSBsaXR0bGUgYml0IHRoZSBDIHBvbHlub20uXHJcbiAgICAgICAgQy5mYWN0b3JpemVQYXJ0aWFsKHRydWUpO1xyXG4gICAgICAgIHRoaXMuX3RleFN0cmluZyA9IGAke0EuZ2VuRGlzcGxheSgndGV4JywgZmFsc2UsIHRydWUpfSBcXFxcY2RvdCAke0IuZ2VuRGlzcGxheSgndGV4JywgZmFsc2UsIHRydWUpfSAke0MudGV4U3RyaW5nfSBgO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZmFjdG9yaXplUGFydGlhbCA9IChmb3JjZVNpZ24/OmJvb2xlYW4pOiBQb2x5bm9tID0+IHtcclxuICAgICAgICB0aGlzLl90ZXhTdHJpbmcgPSAnJztcclxuICAgICAgICAvLyBUcnkgdG8gZmluZCB0d28gbW9ub21zIHdpdGggYSBjb21tb24gY29lZmZpY2llbnQuXHJcbiAgICAgICAgaWYodGhpcy5sZW5ndGg8PTEpe3JldHVybiB0aGlzO31cclxuXHJcbiAgICAgICAgbGV0IG1NYWluOiBNb25vbSxcclxuICAgICAgICAgICAgbUNoZWNrOiBNb25vbSxcclxuICAgICAgICAgICAgbUZhY3RvcjpNb25vbSxcclxuICAgICAgICAgICAgcEZhY3RvcjpQb2x5bm9tLFxyXG4gICAgICAgICAgICBwUmVtYWluOiBQb2x5bm9tLFxyXG4gICAgICAgICAgICBnOm51bWJlciwgc2lnbjpzdHJpbmc7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaT0wOyBpPHRoaXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBtTWFpbiA9IHRoaXMuX21vbm9tc1tpXS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAvLyBXZSBmYWN0b3JpemUgb25seSBpZiB0aGUgbWFpbiBjb2VmZmljaWVudCBpc24ndCBhIGZyYWN0aW9uXHJcbiAgICAgICAgICAgIC8vaWYobU1haW4uY29lZmZpY2llbnQuZGVub21pbmF0b3IhPT0xKXtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIGZvcihsZXQgaj1pKzE7IGo8dGhpcy5sZW5ndGg7IGorKyl7XHJcbiAgICAgICAgICAgICAgICBtQ2hlY2sgPSB0aGlzLl9tb25vbXNbal0uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIC8vaWYobUNoZWNrLmNvZWZmaWNpZW50LmRlbm9taW5hdG9yIT09MSl7Y29udGludWU7fVxyXG5cclxuICAgICAgICAgICAgICAgIGcgPSBOdW1lcmljLmdjZChtTWFpbi5jb2VmZmljaWVudC5udW1lcmF0b3IsIG1DaGVjay5jb2VmZmljaWVudC5udW1lcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgaWYoZyE9PTEpe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbUZhY3RvciA9IG1NYWluLmNsb25lKCkuZGl2aWRlKG1DaGVjayk7IC8vIFRoaXMgZ2V0cyB0aGUgbGl0dGVyYWwgcGFydC5cclxuICAgICAgICAgICAgICAgICAgICAvL21GYWN0b3IuY29lZmZpY2llbnQgPSBuZXcgRnJhY3Rpb24oKS5wYXJzZUJ5SW50ZWdlcihnLCAxKTsgLy8gU2V0IHRoZSBjb2VmZmljaWVudCB0byB0aGUgZ2NkLlxyXG4gICAgICAgICAgICAgICAgICAgIG1GYWN0b3IgPSBNb25vbS5sY20obU1haW4sIG1DaGVjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2lnbiA9IG1NYWluLmNvZWZmaWNpZW50LnNpZ24oKT09PTE/JysnOictJztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXhTdHJpbmcgPSBgJHtmb3JjZVNpZ249PT10cnVlP3NpZ246KHNpZ249PT0nKyc/Jyc6c2lnbil9JHttRmFjdG9yLnRleH1gO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwRmFjdG9yID0gbmV3IFBvbHlub20oKS5hZGRNb25vbShtTWFpbi5kaXZpZGUobUZhY3RvcikpLmFkZE1vbm9tKG1DaGVjay5kaXZpZGUobUZhY3RvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleFN0cmluZyArPSBwRmFjdG9yLmdlbkRpc3BsYXkoJ3RleCcsIGZhbHNlLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4U3RyaW5nICs9IHRoaXMuY2xvbmUoKS5zdWJzdHJhY3QocEZhY3Rvci5jbG9uZSgpLm11bHRpcGx5QnlNb25vbShtRmFjdG9yKSkuZ2VuRGlzcGxheSgndGV4JywgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90ZXhTdHJpbmcgPSB0aGlzLmdlbkRpc3BsYXkoJ3RleCcsIGZvcmNlU2lnbik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgb25lIG9yIG1vcmUgbW9ub21zIHRvIHRoZSBwb2x5bm9tcy5cclxuICAgICAqIEBwYXJhbSBNXHJcbiAgICAgKi9cclxuICAgIGFkZE1vbm9tID0gKC4uLk06IE1vbm9tW10pOiBQb2x5bm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIE0pIHtcclxuICAgICAgICAgICAgdGhpcy5fbW9ub21zLnB1c2gobS5jbG9uZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN1YnN0cmFjdE1vbm9tID0gKC4uLk06TW9ub21bXSk6UG9seW5vbSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiBNKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21vbm9tcy5wdXNoKG0uY2xvbmUoKS5vcHBvc2VkKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWluIHBhcnNlIHVzaW5nIGEgc2h1dHRpbmcgeWFyZCBjbGFzc1xyXG4gICAgICogQHBhcmFtIGlucHV0U3RyXHJcbiAgICAgKi9cclxuICAgIHNodXRpbmdZYXJkVG9SZWR1Y2VkUG9seW5vbShpbnB1dFN0cjogc3RyaW5nKTogUG9seW5vbSB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBSUE4gYXJyYXkgb2YgdGhlIGN1cnJlbnQgZXhwcmVzc2lvblxyXG4gICAgICAgIGxldCBTWTogU2h1dGluZ3lhcmQgPSBuZXcgU2h1dGluZ3lhcmQoKS5wYXJzZShpbnB1dFN0ciksXHJcbiAgICAgICAgICAgIHJwbjogc3RyaW5nW10gPSBTWS5ycG47XHJcblxyXG4gICAgICAgIGxldCBtOiBQb2x5bm9tW10gPSBbXSwgbTE6IFBvbHlub20sIG0yOiBQb2x5bm9tO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB0b2tlbiBvZiBycG4pIHtcclxuICAgICAgICAgICAgaWYgKFNZLmlzT3BlcmF0aW9uKHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgbTIgPSAobS5wb3AoKSkgfHwgbmV3IFBvbHlub20oKS56ZXJvKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBmaXJzdCBpdGVtIGZyb20gdGhlIHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgbTEgPSAobS5wb3AoKSkgfHwgbmV3IFBvbHlub20oKS56ZXJvKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgaXMgaW4gdGhlIHN0YWNrIC0gY3JlYXRlIGFuIGVtcHR5IHBvbHlub21cclxuICAgICAgICAgICAgICAgICAgICBtMSA9IG5ldyBQb2x5bm9tKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhtMS5wb2x5bm9tLCBtMi5wb2x5bm9tLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnKyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0xLmFkZChtMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJy0nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtMS5zdWJzdHJhY3QobTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICcqJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbTEubXVsdGlwbHkobTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBTaHV0aW5nIHlhcmQgdG8gcG9seW5vbSBkaXZpZGUuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnLyc6IGNvbnNvbGUubG9nKG0xLmRpc3BsYXksIG0yLmRpc3BsYXkpO20xLmRpdmlkZShtMik7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBub3Qgb3BlcmF0aW9uIHZhbHVlIGFyZSBjb252ZXJ0ZWQgdG8gcG9seW5vbS4gVGhlcmVmb3JlLCB0aGUgcG93IHZhbHVlIG11c3QgYmUgY29udmVydGVkIHRvIGFuIGludGVnZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogU2h1dGluZyB5YXJkIHRvIHBvbHlub20gcG93IDogY2FzZSAnXic6IG0xLnBvdygrbTIubW9ub21zWzBdLmNvZWZmaWNpZW50Lm51bWVyYXRvcik7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUb2tlbiBub3QgcmVjb2duaXplZCBpbiBzaHV0aW5nIHlhcmQgdG8gcmVkdWNlIHBvbHlub206ICcsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG0ucHVzaChtMSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbS5wdXNoKG5ldyBQb2x5bm9tKCkuYWRkTW9ub20obmV3IE1vbm9tKCkucGFyc2UodG9rZW4pKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IG1bMF0ubW9ub21zO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1hdGhlbWF0aWNhbCBvcGVyYXRpb25cclxuICAgIHJlZHVjZSA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vbm9tcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCB0aGlzLl9tb25vbXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb25vbXNbaV0uaXNTYW1lQXModGhpcy5tb25vbXNbal0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9ub21zW2ldLmFkZCh0aGlzLm1vbm9tc1tqXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9ub21zLnNwbGljZShqLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGFsbCBudWxsIG1vbm9tc1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IHRoaXMuX21vbm9tcy5maWx0ZXIoKG0pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG0uY29lZmZpY2llbnQudmFsdWUgIT09IDBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVkdWNlIGFsbCBtb25vbXMgY29lZmZpY2llbnQuXHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiB0aGlzLl9tb25vbXMpIHtcclxuICAgICAgICAgICAgbS5jb2VmZmljaWVudC5yZWR1Y2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvbHlub20oKS56ZXJvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlZHVjZSB0aGUgY29lZmZpY2llbnQgdmFsdWUgYXMgaWYgdGhlIHBvbHlub20gd2FzIGVxdWFsIHRvIHplcm8uXHJcbiAgICAgKi9cclxuICAgIG1pbmlmeSA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICAvLyBGaXJzdCBtdWx0aXBseSBieSB0aGUgY29tbW9uIGRlbm9taW5hdG9yLlxyXG4gICAgICAgIHRoaXMubXVsdGlwbHlCeUludGVnZXIodGhpcy5sY21EZW5vbWluYXRvcigpKS5kaXZpZGVCeUludGVnZXIodGhpcy5nY2ROdW1lcmF0b3IoKSkucmVkdWNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZhY3Rvcml6ZSA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICB0aGlzLl9mYWN0b3JzID0gW107XHJcbiAgICAgICAgLy8gVE9ETzogQ2FsY3VsdGUgdGhlIGZhY3Rvcml6ZSBzeXN0ZW1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG5cclxuICAgIHJlb3JkZXIgPSAobGV0dGVyOiBzdHJpbmcgPSAneCcpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICAvLyBUT0RPOiBNdXN0IGhhbmRsZSBtdWx0aXBsZSBsZXR0ZXIgcmVvcmRlciBzeXN0ZW1cclxuICAgICAgICB0aGlzLl9tb25vbXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYi5kZWdyZWUobGV0dGVyKSAtIGEuZGVncmVlKGxldHRlcilcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgb3Bwb3NlZCA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICB0aGlzLl9tb25vbXMgPSB0aGlzLl9tb25vbXMubWFwKG0gPT4gbS5vcHBvc2VkKCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBhZGQgPSAoUDogUG9seW5vbSk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IHRoaXMuX21vbm9tcy5jb25jYXQoUC5tb25vbXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdWJzdHJhY3QgPSAoUDogUG9seW5vbSk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IHRoaXMuX21vbm9tcy5jb25jYXQoUC5jbG9uZSgpLm9wcG9zZWQoKS5tb25vbXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBtdWx0aXBseSA9IChQOiBQb2x5bm9tKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgbGV0IE06IE1vbm9tW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtMSBvZiB0aGlzLl9tb25vbXMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgbTIgb2YgUC5tb25vbXMpIHtcclxuICAgICAgICAgICAgICAgIE0ucHVzaChNb25vbS54bXVsdGlwbHkobTEsIG0yKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IE07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIG11bHRpcGx5QnlGcmFjdGlvbiA9IChGOkZyYWN0aW9uKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiB0aGlzLl9tb25vbXMpIHtcclxuICAgICAgICAgICAgbS5jb2VmZmljaWVudC5tdWx0aXBseShGKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBtdWx0aXBseUJ5SW50ZWdlciA9IChuYjogbnVtYmVyKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHlCeUZyYWN0aW9uKG5ldyBGcmFjdGlvbigpLnBhcnNlQnlJbnRlZ2VyKG5iKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIG11bHRpcGx5QnlNb25vbSA9IChNOiBNb25vbSk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIGZvciAobGV0IG0gb2YgdGhpcy5fbW9ub21zKSB7XHJcbiAgICAgICAgICAgIG0ubXVsdGlwbHkoTSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIG11dGxpcGx5QnlGcmFjdGlvbiA9IChGOkZyYWN0aW9uKTpQb2x5bm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBtLmNvZWZmaWNpZW50Lm11bHRpcGx5KEYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGRpdmlkZUJ5SW50ZWdlciA9IChuYjogbnVtYmVyKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgbGV0IG5iRiA9IG5ldyBGcmFjdGlvbigpLnBhcnNlQnlJbnRlZ2VyKG5iKTtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBtLmNvZWZmaWNpZW50LmRpdmlkZShuYkYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZGl2aWRlQnlGcmFjdGlvbiA9IChGOiBGcmFjdGlvbik6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIGZvciAobGV0IG0gb2YgdGhpcy5fbW9ub21zKSB7XHJcbiAgICAgICAgICAgIG0uY29lZmZpY2llbnQuZGl2aWRlKEYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgcmVwbGFjZUJ5ID0gKGxldHRlcjpzdHJpbmcsIFA6UG9seW5vbSk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIGxldCBwb3c6bnVtYmVyLCByZXN1bHRQb2x5bm9tOiBQb2x5bm9tID0gbmV3IFBvbHlub20oKS56ZXJvKCk7XHJcbiAgICAgICAgZm9yKGxldCBtIG9mIHRoaXMubW9ub21zKXtcclxuICAgICAgICAgICAgaWYobS5saXRlcmFsW2xldHRlcl09PT11bmRlZmluZWQgfHwgbS5saXRlcmFsW2xldHRlcl09PT0wKXtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFBvbHlub20uYWRkTW9ub20obS5jbG9uZSgpKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIGZvdW5kIGEgbGV0dGVyLlxyXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBwb3dlciBhbmQgcmVzZXQgaXQuXHJcbiAgICAgICAgICAgICAgICBwb3cgPSArbS5saXRlcmFsW2xldHRlcl07XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgbS5saXRlcmFsW2xldHRlcl07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzdWx0UG9seW5vbS5hZGQoUC5jbG9uZSgpLnBvdyhwb3cpLm11bHRpcGx5QnlNb25vbShtKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IHJlc3VsdFBvbHlub20ucmVkdWNlKCkucmVvcmRlcigpLm1vbm9tcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXZpZGUgdGhlIGN1cnJlbnQgcG9seW5vbSBieSB0d28gcG9seW5vbXMuXHJcbiAgICAgKiBAcGFyYW0gUFxyXG4gICAgICovXHJcbiAgICBkaXZpZGUgPSAoUDogUG9seW5vbSk6IHsgcXVvdGllbnQ6IFBvbHlub20sIHJlbWluZGVyOiBQb2x5bm9tIH0gPT4ge1xyXG4gICAgICAgIGxldCBxdW90aWVudDogUG9seW5vbSxcclxuICAgICAgICAgICAgcmVtaW5kZXI6IFBvbHlub20sXHJcbiAgICAgICAgICAgIG1heE1QOiBNb25vbSA9IFAubW9ub21CeURlZ3JlZSgpLFxyXG4gICAgICAgICAgICBuZXdNOiBNb25vbTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGlzZSB0aGUgcG9seW5vbXMuXHJcbiAgICAgICAgcXVvdGllbnQgPSBuZXcgUG9seW5vbSgpLnplcm8oKTtcclxuICAgICAgICByZW1pbmRlciA9IHRoaXMuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgLy8gTWFrZSB0aGUgZXVjbGlkaWFuIGRpdmlzaW9uIG9mIHRoZSB0d28gcG9seW5vbXMuXHJcbiAgICAgICAgd2hpbGUgKHJlbWluZGVyLmRlZ3JlZSgpID49IFAuZGVncmVlKCkpIHtcclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBncmVhdGVzdCBtb25vbSBkaXZpZGVkIGJ5IHRoZSBtYXggbW9ub20gb2YgdGhlIGRpdmlkZXJcclxuICAgICAgICAgICAgbmV3TSA9IHJlbWluZGVyLm1vbm9tQnlEZWdyZWUoKS5jbG9uZSgpLmRpdmlkZShtYXhNUCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobmV3TS5pc1plcm8pIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIG5ldyBxdW90aWVudCBhbmQgcmVtaW5kZXIuXHJcbiAgICAgICAgICAgIHF1b3RpZW50LmFkZE1vbm9tKG5ld00pO1xyXG4gICAgICAgICAgICByZW1pbmRlci5zdWJzdHJhY3QoUC5jbG9uZSgpLm11bHRpcGx5QnlNb25vbShuZXdNKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge3F1b3RpZW50LCByZW1pbmRlcn07XHJcbiAgICB9O1xyXG5cclxuICAgIHBvdyA9IChuYjogbnVtYmVyKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuYikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuemVybygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmIgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnplcm8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5iID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9seW5vbSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IFAgPSB0aGlzLmNsb25lKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBuYjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMubXVsdGlwbHkoUCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkZWdyZWUgPSAobGV0dGVyPzogc3RyaW5nKTogbnVtYmVyID0+IHtcclxuICAgICAgICBsZXQgZDogbnVtYmVyID0gMDtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBkID0gTWF0aC5tYXgobS5kZWdyZWUobGV0dGVyKSwgZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfTtcclxuXHJcbiAgICBtb25vbUJ5RGVncmVlID0gKGRlZ3JlZT86IG51bWJlciwgbGV0dGVyPzogc3RyaW5nKTogTW9ub20gPT4ge1xyXG4gICAgICAgIGlmIChkZWdyZWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gdGhlIGhpZ2hlc3QgZGVncmVlIG1vbm9tLlxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb25vbUJ5RGVncmVlKHRoaXMuZGVncmVlKGxldHRlcikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBwb2x5bm9tLlxyXG4gICAgICAgIGxldCBNID0gdGhpcy5jbG9uZSgpLnJlZHVjZSgpO1xyXG4gICAgICAgIGZvciAobGV0IG0gb2YgTS5fbW9ub21zKSB7XHJcbiAgICAgICAgICAgIGlmIChtLmRlZ3JlZShsZXR0ZXIpID09PSBkZWdyZWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtLmNsb25lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE5PdGhpbmcgd2FzIGZvdW5kIC0gcmV0dXJuIHRoZSBudWxsIG1vbm9tLlxyXG4gICAgICAgIHJldHVybiBuZXcgTW9ub20oKS56ZXJvKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEV2YWx1YXRlIGEgcG9seW5vbS5cclxuICAgIGV2YWx1YXRlID0gKHZhbHVlczogeyBba2V5OiBzdHJpbmddOiBGcmFjdGlvbiB9KTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIGxldCByID0gbmV3IEZyYWN0aW9uKCkuemVybygpO1xyXG5cclxuICAgICAgICB0aGlzLl9tb25vbXMuZm9yRWFjaChtb25vbSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFdmFsdWF0ZSBwb2x5bm9tOiAnLCBtb25vbS5kaXNwbGF5LCB2YWx1ZXMsIG1vbm9tLmV2YWx1YXRlKHZhbHVlcykuZGlzcGxheSk7XHJcbiAgICAgICAgICAgIHIuYWRkKG1vbm9tLmV2YWx1YXRlKHZhbHVlcykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZSBpZiB0aGUgY3VycmVudCBwb2x5bm9tIGlzaWRpdmRhYmxlIGJ5IFBcclxuICAgICAqIFRPRE86IHNob3VsZCB3b3JrIHdpdGggYW55IHBvbHlub20sIG5vdCBvbmx5IGZpcnN0IGRlZ3JlZSBwb3lsbm9tcyBhbmQgdGhlIGxldHRlciBzaG91bGQgZGlzYXBlYXJcclxuICAgICAqIEBwYXJhbSBQXHJcbiAgICAgKiBAcGFyYW0gbGV0dGVyIC0gZGVmYXVsdCBsZXR0ZXJcclxuICAgICAqL1xyXG4gICAgY2FuRGl2aWRlID0gKFA6IFBvbHlub20sIGxldHRlcjogc3RyaW5nID0gJ3gnKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgY29uc3QgZCA9IFAuZGVncmVlKCk7XHJcblxyXG4gICAgICAgIGxldCBldmFsVmFsdWU6IHsgW2tleTogc3RyaW5nXTogRnJhY3Rpb24gfSA9IHt9O1xyXG4gICAgICAgIC8vIEEgemVybyBkZWdyZWUgcG9seW5vbSBjYW4gYWx3YXlzIGRpdmlkZSwgZXhjZXB0IGlmIGl0J3MgdGhlIHplcm8gcG9seW5vbS5cclxuICAgICAgICBpZiAoZCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIVAuaXNUcml2aWFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGhlIHBvbHlub20gaXMgb2YgZGVncmVlZSBvbmUuXHJcbiAgICAgICAgaWYgKGQgPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3QgeiA9IFAuZ2V0WmVyb2VzKCk7XHJcbiAgICAgICAgICAgIC8vIFRoZSB6ZXJvIGlzIGFuIHVuZGVmaW5lZCB6ZXJvLlxyXG4gICAgICAgICAgICBpZiAoelswXSA9PT0gdHJ1ZSB8fCB6WzBdID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmFsVmFsdWVbbGV0dGVyXSA9IHpbMF07XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2YWx1YXRlKGV2YWxWYWx1ZSkudmFsdWUgPT09IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGUgcG9seW5vbSBpcyBvZiBkZWdyZWUgMiBvciBtb3JlLi4uXHJcbiAgICAgICAgaWYgKGQgPiAxKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50bHksIG9ubHkgZmlyc3QgZGVncmVlIHBvbHlub20gYXJlIHN1cHBvcnRlZCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRPRE86IGdldCB6ZXJvZXMgZm9yIG1vcmUgdGhhbiBmaXJzdCBkZWdyZWVcclxuICAgIGdldFplcm9lcyA9ICgpOiAoRnJhY3Rpb24gfCBib29sZWFuKVtdID0+IHtcclxuICAgICAgICBsZXQgWjogRnJhY3Rpb25bXSA9IFtdO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMuZGVncmVlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vbm9tc1swXS5jb2VmZmljaWVudC52YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBvbmx5IG9uZSBtb25vbXMsXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9ub21zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IEZyYWN0aW9uKCkuemVybygpXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IFAgPSB0aGlzLmNsb25lKCkucmVkdWNlKCkucmVvcmRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbUC5tb25vbXNbMV0uY29lZmZpY2llbnQub3Bwb3NlZCgpLmRpdmlkZShQLm1vbm9tc1swXS5jb2VmZmljaWVudCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHplcm9zIG9mIGFuIGVxdWF0aW9uIG9mIHNlY29uZCBkZWdyZWUuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIGZhbHNlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFo7XHJcbiAgICB9O1xyXG5cclxuICAgIGdldERlbm9taW5hdG9ycyA9ICgpOiBudW1iZXJbXSA9PiB7XHJcbiAgICAgICAgbGV0IGRlbm9taW5hdG9yczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBkZW5vbWluYXRvcnMucHVzaChtLmNvZWZmaWNpZW50LmRlbm9taW5hdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlbm9taW5hdG9ycztcclxuICAgIH07XHJcbiAgICBnZXROdW1lcmF0b3JzID0gKCk6IG51bWJlcltdID0+IHtcclxuICAgICAgICBsZXQgbnVtZXJhdG9yczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBudW1lcmF0b3JzLnB1c2gobS5jb2VmZmljaWVudC5udW1lcmF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVtZXJhdG9ycztcclxuICAgIH07XHJcblxyXG4gICAgbGNtRGVub21pbmF0b3IgPSAoKTogbnVtYmVyID0+IHtcclxuICAgICAgICByZXR1cm4gTnVtZXJpYy5sY20oLi4udGhpcy5nZXREZW5vbWluYXRvcnMoKSk7XHJcbiAgICB9O1xyXG4gICAgZ2NkRGVub21pbmF0b3IgPSAoKTogbnVtYmVyID0+IHtcclxuICAgICAgICByZXR1cm4gTnVtZXJpYy5nY2QoLi4udGhpcy5nZXREZW5vbWluYXRvcnMoKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGxjbU51bWVyYXRvciA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiBOdW1lcmljLmxjbSguLi50aGlzLmdldE51bWVyYXRvcnMoKSk7XHJcbiAgICB9O1xyXG4gICAgZ2NkTnVtZXJhdG9yID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICAgICAgcmV0dXJuIE51bWVyaWMuZ2NkKC4uLnRoaXMuZ2V0TnVtZXJhdG9ycygpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbXBhcmUgdGhpcyBwb2x5bm9tIHdpdGggYW5vdGhlciBvbmUuXHJcbiAgICAgKiBAcGFyYW0gUFxyXG4gICAgICovXHJcbiAgICBpc1NhbWVBcyA9IChQOiBQb2x5bm9tKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGNsb25lIHZlcnNpb24gdG8gcmVkdWNlIHRoZW0gd2l0aG91dCBhbHRlcmluZyB0aGUgb3JpZ2luYWwgcG9seW5vbXMuXHJcbiAgICAgICAgbGV0IGNQMSA9IHRoaXMuY2xvbmUoKS5yZWR1Y2UoKS5yZW9yZGVyKCksXHJcbiAgICAgICAgICAgIGNQMiA9IFAuY2xvbmUoKS5yZWR1Y2UoKS5yZW9yZGVyKCk7XHJcblxyXG4gICAgICAgIC8vIEJvdGggaGF2ZW4ndCB0aGUgc2FtZSBudW1iZXIgb2YgbW9ub21zLlxyXG4gICAgICAgIGlmIChjUDEubGVuZ3RoICE9PSBjUDIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoZXkgbXVzdCBoYXZlIHRoZSBzYW1lIGRlZ3JlZS5cclxuICAgICAgICBpZiAoY1AxLmRlZ3JlZSgpICE9PSBjUDIuZGVncmVlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBjUDEubW9ub21zKSB7XHJcbiAgICAgICAgICAgIGlmICghY1AxLm1vbm9tc1tpXS5pc0VxdWFsKGNQMi5tb25vbXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBpc09wcG9zZWRBdCA9IChQOiBQb2x5bm9tKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lQXMoUC5jbG9uZSgpLm9wcG9zZWQoKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgZ2VuRGlzcGxheSA9IChvdXRwdXQ/OiBzdHJpbmcsIGZvcmNlU2lnbj86IGJvb2xlYW4sIHdyYXBQYXJlbnRoZXNlcz86IGJvb2xlYW4pOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgIGxldCBQOiBzdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBrIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBpZiAoay5jb2VmZmljaWVudC52YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGsuY29lZmZpY2llbnQuc2lnbigpID09PSAxICYmIChQICE9PSAnJyB8fCBmb3JjZVNpZ249PT10cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgUCArPSAnKyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgUCArPSAob3V0cHV0ID09PSAndGV4JykgPyBrLnRleCA6IGsuZGlzcGxheTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHdyYXBQYXJlbnRoZXNlcz09PXRydWUgJiYgdGhpcy5sZW5ndGg+MSl7XHJcbiAgICAgICAgICAgIGlmKG91dHB1dD09PSd0ZXgnKSB7XHJcbiAgICAgICAgICAgICAgICBQID0gYFxcXFxsZWZ0KCAke1B9IFxcXFxyaWdodClgO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIFAgPSBgKCR7UH0pYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoUD09PScnKXtQID0gJzAnO31cclxuICAgICAgICByZXR1cm4gUDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gR2V0dGVyIGFuZCBzZXR0ZXJcclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgLy8gVE9ETzogTXVzdCByZWR1Y2UgdGhlIG1vbm9tcyBsaXN0IHRvIHJtZW92ZSB0aGUgemVybyBjb2VmZmljaWVudC5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbW9ub21zLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9ub21zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb25vbXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG1vbm9tcyhNOiBNb25vbVtdKSB7XHJcbiAgICAgICAgdGhpcy5fbW9ub21zID0gTTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGlzcGxheSgpOnN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuRGlzcGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0ZXgoKTpzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdlbkRpc3BsYXkoJ3RleCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0ZXhTdHJpbmcoKTpzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90ZXhTdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzVHJpdmlhbCgpOmJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb25vbXMubGVuZ3RoID09PSAwICYmIHRoaXMuX21vbm9tc1swXS5jb2VmZmljaWVudC52YWx1ZSA9PT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNNdWx0aVZhcmlhYmxlKCk6Ym9vbGVhbiB7XHJcbiAgICAgICAgbGV0IEIgPSBmYWxzZTtcclxuICAgICAgICBmb3IobGV0IG0gb2YgdGhpcy5fbW9ub21zKXtcclxuICAgICAgICAgICAgaWYobS5pc011bHRpVmFyaWFibGUpe3JldHVybiB0cnVlO31cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZhY3RvcnMoKTpQb2x5bm9tW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mYWN0b3JzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBmYWN0b3JzKHZhbHVlOlBvbHlub21bXSl7XHJcbiAgICAgICAgdGhpcy5fZmFjdG9ycyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2YXJpYWJsZXMoKTpzdHJpbmdbXSB7XHJcbiAgICAgICAgbGV0IFY6c3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yKGxldCBtIG9mIHRoaXMuX21vbm9tcyl7XHJcbiAgICAgICAgICAgIFYgPSBWLmNvbmNhdChtLnZhcmlhYmxlcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcy5cclxuICAgICAgICBWID0gWy4uLm5ldyBTZXQoVildO1xyXG5cclxuICAgICAgICByZXR1cm4gVjtcclxuICAgIH1cclxuICAgIGdldCBudW1iZXJPZlZhcnMoKTpudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhcmlhYmxlcy5sZW5ndGg7XHJcbiAgICB9O1xyXG59IiwiZXhwb3J0IGNsYXNzIE50aHJvb3Qge1xyXG4gICAgcHJpdmF0ZSBfcmFkaWNhbDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfbnRoOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9jb2VmZmljaWVudDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfaXNWYWxpZDpib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX3JhZGljYWwgPSAxO1xyXG4gICAgICAgIHRoaXMuX2NvZWZmaWNpZW50ID0gMTtcclxuICAgICAgICB0aGlzLl9udGggPSAyO1xyXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlID0gKHJhZGljYWw6IG51bWJlciwgbnRocm9vdD86IG51bWJlciwgY29lZmZpY2llbnQ/OiBudW1iZXIpOiBOdGhyb290ID0+IHtcclxuICAgICAgICB0aGlzLl9jb2VmZmljaWVudCA9IChjb2VmZmljaWVudCA9PT0gdW5kZWZpbmVkKSA/IDEgOiBjb2VmZmljaWVudDtcclxuICAgICAgICB0aGlzLl9udGggPSAobnRocm9vdCA9PT0gdW5kZWZpbmVkKSA/IDIgOiBudGhyb290O1xyXG4gICAgICAgIHRoaXMuX3JhZGljYWwgPSAocmFkaWNhbCA9PT0gdW5kZWZpbmVkKSA/IDEgOiByYWRpY2FsO1xyXG5cclxuICAgICAgICBpZih0aGlzLl9udGglMj09PTAgJiYgdGhpcy5fcmFkaWNhbDwwKXtcclxuICAgICAgICAgICAgdGhpcy5faXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgcmVkdWNlID0gKCk6IE50aHJvb3QgPT4ge1xyXG4gICAgICAgIC8vIE1heCB2YWx1ZSB0byB0ZXN0LlxyXG4gICAgICAgIGxldCBWID0gTWF0aC5mbG9vcihNYXRoLnBvdyh0aGlzLl9yYWRpY2FsLCAxIC8gdGhpcy5fbnRoKSk7XHJcbiAgICAgICAgd2hpbGUgKFYgPiAxKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9yYWRpY2FsICUgTWF0aC5wb3coViwgdGhpcy5fbnRoKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gSXQncyBkaXZpZGFibGUgYnkgVl5uXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2VmZmljaWVudCAqPSBWO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmFkaWNhbCA9IHRoaXMuX3JhZGljYWwgLyBNYXRoLnBvdyhWLCB0aGlzLl9udGgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJlZGlmaW5lIHRoZSBuZXcgdGVzdGluZyB2YWx1ZSAodGhpcyBpcyBvcHRpbWl6YXRpb24pXHJcbiAgICAgICAgICAgICAgICBWID0gTWF0aC5mbG9vcihNYXRoLnBvdyh0aGlzLl9yYWRpY2FsLCAxIC8gdGhpcy5fbnRoKSk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBWLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBoYXNSYWRpY2FsID0gKCk6Ym9vbGVhbiA9PiB7XHJcbiAgICAgICAgcmV0dXJuICEodGhpcy5fcmFkaWNhbD09PTEgfHwgdGhpcy5fcmFkaWNhbD09PTAgfHwgdGhpcy5faXNWYWxpZD09PWZhbHNlKVxyXG4gICAgfTtcclxuXHJcbiAgICBtdWx0aXBseSA9IChOOiBOdGhyb290KTogTnRocm9vdCA9PiB7XHJcbiAgICAgICAgdGhpcy5fcmFkaWNhbCAqPSBOLnJhZGljYWw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEdldHRlciBhbmQgc2V0dGVyXHJcbiAgICBnZXQgcmFkaWNhbCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yYWRpY2FsO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCByYWRpY2FsKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9yYWRpY2FsID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG50aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udGg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG50aCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKE51bWJlci5pc1NhZmVJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX250aCA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEVycm9yIHNldHRpbmcgdGhlIG50aCByb290LlxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igc2V0dGluZyB0aGUgbnRoIHJvb3QnKTtcclxuICAgICAgICAgICAgdGhpcy5fbnRoID0gMjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvZWZmaWNpZW50KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvZWZmaWNpZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBjb2VmZmljaWVudCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fY29lZmZpY2llbnQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGV4KCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHRleCA9ICcnLFxyXG4gICAgICAgICAgICBDOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb2VmZmljaWVudCA9PT0gMSkge1xyXG4gICAgICAgICAgICBDID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jb2VmZmljaWVudCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgQyA9ICctJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBDID0gdGhpcy5fY29lZmZpY2llbnQudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9yYWRpY2FsID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9jb2VmZmljaWVudH1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9udGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtDfVxcXFxzcXJ0eyR7dGhpcy5fcmFkaWNhbH19YFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke0N9XFxcXHNxcnRbJHt0aGlzLl9udGh9XXske3RoaXMuX3JhZGljYWx9fWBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29lZmZpY2llbnQgKiBNYXRoLnBvdyh0aGlzLl9yYWRpY2FsLCAxIC8gdGhpcy5fbnRoKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7UG9seW5vbX0gZnJvbSBcIi4vcG9seW5vbVwiO1xyXG5pbXBvcnQge0ZyYWN0aW9ufSBmcm9tIFwiLi9mcmFjdGlvblwiO1xyXG5pbXBvcnQge050aHJvb3R9IGZyb20gXCIuL250aHJvb3RcIjtcclxuaW1wb3J0IHtOdW1lcmljfSBmcm9tIFwiLi9udW1lcmljXCI7XHJcbmltcG9ydCB7TW9ub219IGZyb20gXCIuL21vbm9tXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRXF1YXRpb24ge1xyXG4gICAgcHJpdmF0ZSBfbGVmdDpQb2x5bm9tO1xyXG4gICAgcHJpdmF0ZSBfcmlnaHQ6UG9seW5vbTtcclxuICAgIHByaXZhdGUgX3NpZ246c3RyaW5nO1xyXG5cclxuICAgIHByaXZhdGUgX3BvbHlub206IFBvbHlub207XHJcbiAgICBwcml2YXRlIF9zb2x1dGlvbnM6c3RyaW5nW107XHJcbiAgICBwcml2YXRlIF92YXJub3RoaW5nOnN0cmluZyA9ICdcXFxcdmFybm90aGluZyc7XHJcbiAgICBwcml2YXRlIF9yZWFsOiBzdHJpbmcgPSAnXFxcXG1hdGhiYntSfSc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYW4gRXF1YXRpb24gdXNpbmcgdHdvIHBvbHlub21zLlxyXG4gICAgICogQHBhcmFtIGVxdWF0aW9uU3RyaW5nIEVxdWF0aW9uIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihlcXVhdGlvblN0cmluZz86c3RyaW5nKSB7XHJcbiAgICAgICAgaWYoZXF1YXRpb25TdHJpbmc9PT11bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fbGVmdCA9IG5ldyBQb2x5bm9tKCkuemVybygpO1xyXG4gICAgICAgICAgICB0aGlzLl9yaWdodCA9IG5ldyBQb2x5bm9tKCkuemVybygpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaWduID0gJz0nO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLnBhcnNlU3RyaW5nKGVxdWF0aW9uU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyc2VTdHJpbmcgPSAoZXF1YXRpb25TdHJpbmc6IHN0cmluZyk6RXF1YXRpb24gPT4ge1xyXG4gICAgICAgIGxldCBwU3RyOnN0cmluZ1tdLCBzdHJTaWduOiBzdHJpbmd8ZmFsc2U7XHJcbiAgICAgICAgLy8gRmluZCB0aGUgc3RyaW5nIHNlcGVhcmF0b3JcclxuICAgICAgICBzdHJTaWduID0gdGhpcy5fZmluZFNpZ24oZXF1YXRpb25TdHJpbmcpO1xyXG5cclxuICAgICAgICBpZihzdHJTaWduPT09ZmFsc2Upe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVGhlIGVxdWF0aW9uIGlzIG5vdCB2YWxpZCAobm8gc2lnbiBmb3VuZCknKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGhlIFN0clNpZ24gaXMgZm91bmRcclxuICAgICAgICBwU3RyID0gZXF1YXRpb25TdHJpbmcuc3BsaXQoc3RyU2lnbik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZShuZXcgUG9seW5vbSgpLnBhcnNlKHBTdHJbMF0pLCBuZXcgUG9seW5vbSgpLnBhcnNlKHBTdHJbMV0pLCB0aGlzLl9mb3JtYXRTaWduKHN0clNpZ24pKTtcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfZmluZFNpZ24gPSAoZXF1YXRpb25TdHJpbmc6c3RyaW5nKTpzdHJpbmd8ZmFsc2UgPT4ge1xyXG4gICAgICAgIGxldCBzdHJTaWduOnN0cmluZyA9ICcnO1xyXG5cclxuICAgICAgICBpZihlcXVhdGlvblN0cmluZy5pbmNsdWRlcygnZ2VxJykpe1xyXG4gICAgICAgICAgICByZXR1cm4gKGVxdWF0aW9uU3RyaW5nLmluY2x1ZGVzKCdcXFxcZ2VxJykpPydcXFxcZ2VxJzonZ2VxJztcclxuICAgICAgICB9ZWxzZSBpZihlcXVhdGlvblN0cmluZy5pbmNsdWRlcygnbGVxJykpe1xyXG4gICAgICAgICAgICByZXR1cm4gKGVxdWF0aW9uU3RyaW5nLmluY2x1ZGVzKCdcXFxcbGVxJykpPydcXFxcbGVxJzonbGVxJztcclxuICAgICAgICB9ZWxzZSBpZihlcXVhdGlvblN0cmluZy5pbmNsdWRlcygnPj0nKSl7XHJcbiAgICAgICAgICAgIHJldHVybiAnPj0nO1xyXG4gICAgICAgIH1lbHNlIGlmKGVxdWF0aW9uU3RyaW5nLmluY2x1ZGVzKCc9PicpKXtcclxuICAgICAgICAgICAgcmV0dXJuICc9Pic7XHJcbiAgICAgICAgfWVsc2UgaWYoZXF1YXRpb25TdHJpbmcuaW5jbHVkZXMoJz4nKSl7XHJcbiAgICAgICAgICAgIHJldHVybiAnPic7XHJcbiAgICAgICAgfWVsc2UgaWYoZXF1YXRpb25TdHJpbmcuaW5jbHVkZXMoJzw9Jykpe1xyXG4gICAgICAgICAgICByZXR1cm4gJzw9JztcclxuICAgICAgICB9ZWxzZSBpZihlcXVhdGlvblN0cmluZy5pbmNsdWRlcygnPTwnKSl7XHJcbiAgICAgICAgICAgIHJldHVybiAnPTwnO1xyXG4gICAgICAgIH1lbHNlIGlmKGVxdWF0aW9uU3RyaW5nLmluY2x1ZGVzKCc8Jykpe1xyXG4gICAgICAgICAgICByZXR1cm4gJzwnO1xyXG4gICAgICAgIH1lbHNlIGlmKGVxdWF0aW9uU3RyaW5nLmluY2x1ZGVzKCc9Jykpe1xyXG4gICAgICAgICAgICByZXR1cm4gJz0nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHN0clNpZ249PT0nJyl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcXVhdGlvbjogcGFyc2Ugc3RyaW5nIDogc2lnbiBub3QgZm91bmQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfZm9ybWF0U2lnbiA9IChzaWduU3RyOnN0cmluZyk6c3RyaW5nID0+IHtcclxuICAgICAgICBpZihzaWduU3RyPT09dW5kZWZpbmVkKXtyZXR1cm4gJz0nO31cclxuXHJcbiAgICAgICAgaWYoc2lnblN0ci5pbmNsdWRlcygnZ2VxJykpe1xyXG4gICAgICAgICAgICByZXR1cm4gJz49JztcclxuICAgICAgICB9ZWxzZSBpZihzaWduU3RyLmluY2x1ZGVzKCc+PScpKXtcclxuICAgICAgICAgICAgcmV0dXJuICc+PSc7XHJcbiAgICAgICAgfWVsc2UgaWYoc2lnblN0ci5pbmNsdWRlcygnPT4nKSl7XHJcbiAgICAgICAgICAgIHJldHVybiAnPj0nO1xyXG4gICAgICAgIH1lbHNlIGlmKHNpZ25TdHIuaW5jbHVkZXMoJz4nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJz4nO1xyXG4gICAgICAgIH1lbHNlIGlmKHNpZ25TdHIuaW5jbHVkZXMoJ2xlcScpKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnPD0nO1xyXG4gICAgICAgIH1lbHNlIGlmKHNpZ25TdHIuaW5jbHVkZXMoJzw9Jykpe1xyXG4gICAgICAgICAgICByZXR1cm4gJzw9JztcclxuICAgICAgICB9ZWxzZSBpZihzaWduU3RyLmluY2x1ZGVzKCc9PCcpKXtcclxuICAgICAgICAgICAgcmV0dXJuICc8PSc7XHJcbiAgICAgICAgfWVsc2UgaWYoc2lnblN0ci5pbmNsdWRlcygnPCcpKXtcclxuICAgICAgICAgICAgcmV0dXJuICc8JztcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuICc9J1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY3JlYXRlID0gKGxlZnQ6UG9seW5vbSwgcmlnaHQ6UG9seW5vbSwgc2lnbj86c3RyaW5nKTpFcXVhdGlvbiA9PiB7XHJcbiAgICAgICAgdGhpcy5fbGVmdCA9IGxlZnQ7XHJcbiAgICAgICAgdGhpcy5fcmlnaHQgPSByaWdodDtcclxuICAgICAgICB0aGlzLl9zaWduID0gdGhpcy5fZm9ybWF0U2lnbihzaWduKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgY2xvbmUgPSAoKTpFcXVhdGlvbiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFcXVhdGlvbigpLmNyZWF0ZSh0aGlzLl9sZWZ0LmNsb25lKCksIHRoaXMuX3JpZ2h0LmNsb25lKCksIHRoaXMuX3NpZ24rJycpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlb3JkZXIgd2lsbCBtb3ZlIGFsbCBtb25vbXMgY29udGFpbmluZyBhIGxldHRlciBvbiB0aGUgbGVmdCwgYWxsIHRoZSBvdGhlciBvbiB0aGUgcmlnaHQuXHJcbiAgICAgKi9cclxuICAgIHJlb3JkZXIgPSAoKTpFcXVhdGlvbiA9PiB7XHJcbiAgICAgICAgLy8gTW92ZSBhbGwgbW9ub21zIG9mIGRlZ3JlZSBncmVhdGVyIHRoYW4gMCB0byB0aGUgbGVmdC5cclxuICAgICAgICAvLyBhbmQgYWxsIHplcm8gZGVncmVlIG1vbm9tcyB0byB0aGUgcmlnaHQuXHJcbiAgICAgICAgdGhpcy5fbGVmdC5zdWJzdHJhY3QodGhpcy5fcmlnaHQpO1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0Lnplcm8oKTtcclxuXHJcbiAgICAgICAgbGV0IG1Nb3ZlOk1vbm9tO1xyXG4gICAgICAgIGZvcihsZXQgbSBvZiB0aGlzLl9sZWZ0Lm1vbm9tcykge1xyXG4gICAgICAgICAgICBpZiAobS5kZWdyZWUoKT09PTApIHtcclxuICAgICAgICAgICAgICAgIG1Nb3ZlID0gbS5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGVmdC5zdWJzdHJhY3RNb25vbShtTW92ZSkucmVvcmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmlnaHQuc3Vic3RyYWN0TW9ub20obU1vdmUpLnJlb3JkZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZGVncmVlID0gKGxldHRlcj86c3RyaW5nKTpudW1iZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLl9sZWZ0LmRlZ3JlZShsZXR0ZXIpLCB0aGlzLl9yaWdodC5kZWdyZWUobGV0dGVyKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGlzTXVsdGlWYXJpYWJsZSA9ICgpOmJvb2xlYW4gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sZWZ0LmlzTXVsdGlWYXJpYWJsZSB8fCB0aGlzLl9yaWdodC5pc011bHRpVmFyaWFibGU7XHJcbiAgICB9O1xyXG5cclxuICAgIGlzb2xhdGUgPSAobGV0dGVyPzpzdHJpbmcpOkVxdWF0aW9ufGZhbHNlID0+IHtcclxuICAgICAgICAvLyBEZXRlcm1pbmUgaWYgd2UgY2FuIGlzb2xhdGUgdGhlIHZhcmlhYmxlcy5cclxuICAgICAgICAvLyBCb3RoIHBhcnQgb2YgdGhlIGVxdWF0aW9ucyBtdXN0IGJlIG9mIHRoZSBmaXJzdCBkZWdyZWUuXHJcbiAgICAgICAgaWYodGhpcy5kZWdyZWUobGV0dGVyKSE9PTEpe3JldHVybiBmYWxzZTt9XHJcblxyXG4gICAgICAgIC8vIE1vZGlmeSB0aGUgZXF1YXRpb24gdG8gaXNvbGF0ZSB0aGUgYXNrZWQgdmFyaWFibGUuXHJcbiAgICAgICAgLy8gVE9ETzogbXVzdCBoYW5kbGUgZXF1YXRpb25zIGxpa2UgM3h5KzV5PTQgPT4geSA9IDQvKDN4LTUpXHJcbiAgICAgICAgaWYodGhpcy5pc011bHRpVmFyaWFibGUoKSl7cmV0dXJuIGZhbHNlO31cclxuXHJcbiAgICAgICAgLy8gSXNvbGF0ZSB0aGUgbGV0dGVyLlxyXG4gICAgICAgIGxldCBtTW92ZTpNb25vbSwgY01vdmU6RnJhY3Rpb247XHJcbiAgICAgICAgLy8gU3RhcnQgYnkgbW92aW5nIGV2ZXJ5dGhpbmcgdG8gdGhlIGxlZnQuXHJcbiAgICAgICAgdGhpcy5fbGVmdC5zdWJzdHJhY3QodGhpcy5fcmlnaHQpO1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0Lnplcm8oKTtcclxuICAgICAgICBmb3IobGV0IG0gb2YgdGhpcy5fbGVmdC5tb25vbXMpe1xyXG4gICAgICAgICAgICBpZighbS5oYXNMZXR0ZXIobGV0dGVyKSl7XHJcbiAgICAgICAgICAgICAgICBtTW92ZSA9IG0uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xlZnQuYWRkTW9ub20obU1vdmUuY2xvbmUoKS5vcHBvc2VkKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmlnaHQuYWRkTW9ub20obU1vdmUuY2xvbmUoKS5vcHBvc2VkKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJbiB0aGVvcnksIHdlIHNob3VsZCBoYXZlIG9ubHkgb25lIGl0ZW0gb24gdGhlIGxlZnQuXHJcbiAgICAgICAgaWYodGhpcy5fbGVmdC5sZW5ndGghPT0xKXtyZXR1cm4gZmFsc2U7fVxyXG4gICAgICAgIGNNb3ZlID0gdGhpcy5fbGVmdC5tb25vbXNbMF0uY29lZmZpY2llbnQuY2xvbmUoKTtcclxuICAgICAgICB0aGlzLl9sZWZ0LmRpdmlkZUJ5RnJhY3Rpb24oY01vdmUpO1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0LmRpdmlkZUJ5RnJhY3Rpb24oY01vdmUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBzb2x2ZSA9IChsZXR0ZXI/OnN0cmluZykgPT4ge1xyXG4gICAgICAgIC8vIEluaXRpYWxpc2UgdGhlIHZhcmlhYmxlczpcclxuICAgICAgICB0aGlzLl9zb2x1dGlvbnMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5fcG9seW5vbSA9IHRoaXMuX2xlZnQuY2xvbmUoKS5zdWJzdHJhY3QodGhpcy5fcmlnaHQpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMuX3BvbHlub20uZGVncmVlKGxldHRlcikpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zb2x2ZURlZ3JlZTEobGV0dGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zb2x2ZURlZ3JlZTIobGV0dGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc29sdmVEZWdyZWUzcGx1cyhsZXR0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBpc0dyZWF0ZXIgPSAoKTpib29sZWFuID0+IHtcclxuICAgICAgICBpZih0aGlzLl9zaWduLmluZGV4T2YoJz4nKSE9PS0xKXtyZXR1cm4gdHJ1ZTt9XHJcbiAgICAgICAgaWYodGhpcy5fc2lnbi5pbmRleE9mKCdnZXEnKSE9PS0xKXtyZXR1cm4gdHJ1ZTt9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIHByaXZhdGUgaXNTdHJpY3RFcXVhbCA9ICgpOmJvb2xlYW4gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduPT09Jz0nO1xyXG4gICAgfTtcclxuICAgIHByaXZhdGUgaXNBbHNvRXF1YWwgPSAoKTpib29sZWFuID0+IHtcclxuICAgICAgICBpZih0aGlzLl9zaWduLmluZGV4T2YoJz0nKSE9PS0xKXtyZXR1cm4gdHJ1ZTt9XHJcbiAgICAgICAgaWYodGhpcy5fc2lnbi5pbmRleE9mKCdnZXEnKSE9PS0xKXtyZXR1cm4gdHJ1ZTt9XHJcbiAgICAgICAgaWYodGhpcy5fc2lnbi5pbmRleE9mKCdsZXEnKSE9PS0xKXtyZXR1cm4gdHJ1ZTt9XHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgX3NvbHZlRGVncmVlMSA9IChsZXR0ZXI/OnN0cmluZyk6c3RyaW5nW10gPT4ge1xyXG4gICAgICAgIGNvbnN0IG0xID0gdGhpcy5fcG9seW5vbS5tb25vbUJ5RGVncmVlKDEpLmNvZWZmaWNpZW50LFxyXG4gICAgICAgICAgICBtMCA9IHRoaXMuX3BvbHlub20ubW9ub21CeURlZ3JlZSgwKS5jb2VmZmljaWVudCxcclxuICAgICAgICAgICAgdiA9IG0wLmNsb25lKCkub3Bwb3NlZCgpLmRpdmlkZShtMSkuZGlzcGxheTtcclxuICAgICAgICBsZXQgczpzdHJpbmc7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzU3RyaWN0RXF1YWwoKSkge1xyXG4gICAgICAgICAgICBpZiAobTEudmFsdWUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIEluIHRoaXMgY2FzZSwgdGhlIGNvZWZmaWNpZW50IG9mIHRoZSB4IHZhcmlhYmxlIGlzIHplcm8uXHJcbiAgICAgICAgICAgICAgICBpZiAobTAudmFsdWUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zb2x1dGlvbnMgPSBbdGhpcy5fcmVhbF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFt0aGlzLl92YXJub3RoaW5nXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFt2XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBpZihtMS52YWx1ZT09PTApe1xyXG4gICAgICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCB0aGUgY29lZmZpY2llbnQgb2YgdGhlIHggdmFyaWFibGUgaXMgemVyby5cclxuICAgICAgICAgICAgICAgIGlmKG0wLnZhbHVlPT09MCAmJiB0aGlzLmlzQWxzb0VxdWFsKCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHMgPSAnXFxcXG1hdGhiYntSfSc7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBpZihtMC52YWx1ZT4wKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHRoaXMuaXNHcmVhdGVyKCk/dGhpcy5fcmVhbDp0aGlzLl92YXJub3RoaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gIXRoaXMuaXNHcmVhdGVyKCk/dGhpcy5fcmVhbDp0aGlzLl92YXJub3RoaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTXVzdCBoYW5kbGUgdGhlIGNhc2UgaWYgdGhlIG0xIG1vbm9tIGlzIG5lZ2F0aXZlLlxyXG4gICAgICAgICAgICAgICAgaWYgKCh0aGlzLmlzR3JlYXRlcigpICYmIG0xLnNpZ24oKT09PTEpIHx8ICghdGhpcy5pc0dyZWF0ZXIoKSAmJiBtMS5zaWduKCk9PT0tMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gYFxcXFxsZWZ0JHt0aGlzLmlzQWxzb0VxdWFsKCkgPyAnXFxcXFsnIDogJ1xcXFxdJ30ke3Z9OytcXFxcaW5mdHlcXFxccmlnaHRcXFxcW2A7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHMgPSBgXFxcXGxlZnRcXFxcXS1cXFxcaW5mdHk7JHt2fSBcXFxccmlnaHRcXFxcJHt0aGlzLmlzQWxzb0VxdWFsKCkgPyAnXFxcXF0nIDogJ1xcXFxbJ31gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFtzXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zb2x1dGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgX3NvbHZlRGVncmVlMiA9IChsZXR0ZXI/OnN0cmluZyk6c3RyaW5nW10gPT4ge1xyXG4gICAgICAgIGxldCBhRiA9IHRoaXMuX3BvbHlub20ubW9ub21CeURlZ3JlZSgyKS5jb2VmZmljaWVudCxcclxuICAgICAgICAgICAgYkYgPSB0aGlzLl9wb2x5bm9tLm1vbm9tQnlEZWdyZWUoMSkuY29lZmZpY2llbnQsXHJcbiAgICAgICAgICAgIGNGID0gdGhpcy5fcG9seW5vbS5tb25vbUJ5RGVncmVlKDApLmNvZWZmaWNpZW50LFxyXG4gICAgICAgICAgICBkZWx0YTpudW1iZXIsIG50aERlbHRhOk50aHJvb3QsXHJcbiAgICAgICAgICAgIGxjbSA9IE51bWVyaWMubGNtKGFGLmRlbm9taW5hdG9yLCBiRi5kZW5vbWluYXRvciwgY0YuZGVub21pbmF0b3IpLFxyXG4gICAgICAgICAgICBhID0gYUYubXVsdGlwbHlCeUludChsY20pLnZhbHVlLFxyXG4gICAgICAgICAgICBiID0gYkYubXVsdGlwbHlCeUludChsY20pLnZhbHVlLFxyXG4gICAgICAgICAgICBjID0gY0YubXVsdGlwbHlCeUludChsY20pLnZhbHVlLFxyXG4gICAgICAgICAgICByZWFsWDE6bnVtYmVyLCByZWFsWDI6bnVtYmVyLFxyXG4gICAgICAgICAgICBzWDE6IHN0cmluZywgc1gyOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIGRlbHRhID0gYipiLTQqYSpjO1xyXG5cclxuICAgICAgICBpZihkZWx0YT4wKSB7XHJcbiAgICAgICAgICAgIHJlYWxYMSA9ICgtYiAtIE1hdGguc3FydChkZWx0YSkpLygyKmEpO1xyXG4gICAgICAgICAgICByZWFsWDIgPSAoLWIgKyBNYXRoLnNxcnQoZGVsdGEpKS8oMiphKTtcclxuICAgICAgICAgICAgbnRoRGVsdGEgPSBuZXcgTnRocm9vdCgpLnBhcnNlKGRlbHRhKS5yZWR1Y2UoKTtcclxuICAgICAgICAgICAgaWYgKG50aERlbHRhLmhhc1JhZGljYWwoKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gLWIgKy0gY29lZmZcXHNxcnR7cmFkaWNhbH1cclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAyYVxyXG4gICAgICAgICAgICAgICAgbGV0IGdjZCA9IE51bWVyaWMuZ2NkKGIsIDIgKiBhLCBudGhEZWx0YS5jb2VmZmljaWVudCk7XHJcbiAgICAgICAgICAgICAgICBudGhEZWx0YS5jb2VmZmljaWVudCA9IG50aERlbHRhLmNvZWZmaWNpZW50IC8gZ2NkO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBkZWx0YUMgPSBudGhEZWx0YS5jb2VmZmljaWVudCwgZGVsdGFSID0gbnRoRGVsdGEucmFkaWNhbDtcclxuICAgICAgICAgICAgICAgIGlmICgyICogYSAvIGdjZCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7LWIgLyBnY2R9IC0gJHtudGhEZWx0YS50ZXh9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7LWIgLyBnY2R9ICsgJHtudGhEZWx0YS50ZXh9YCxcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxcXFxkZnJhY3skey1iIC8gZ2NkfSAtICR7bnRoRGVsdGEudGV4fSB9eyAkezIgKiBhIC8gZ2NkfSB9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxcXFxkZnJhY3skey1iIC8gZ2NkfSArICR7bnRoRGVsdGEudGV4fSB9eyAkezIgKiBhIC8gZ2NkfSB9YCxcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyAtYiArLSBkIC8gMmFcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgRnJhY3Rpb24oKS5wYXJzZUJ5SW50ZWdlcigtYiAtIG50aERlbHRhLmNvZWZmaWNpZW50LCAyICogYSkucmVkdWNlKCkuZGZyYWMsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IEZyYWN0aW9uKCkucGFyc2VCeUludGVnZXIoLWIgKyBudGhEZWx0YS5jb2VmZmljaWVudCwgMiAqIGEpLnJlZHVjZSgpLmRmcmFjXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihkZWx0YT09PTApe1xyXG4gICAgICAgICAgICB0aGlzLl9zb2x1dGlvbnMgPSBbIG5ldyBGcmFjdGlvbigpLnBhcnNlQnlJbnRlZ2VyKC1iLCAyKmEpLnJlZHVjZSgpLmRmcmFjIF07XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFsgdGhpcy5fdmFybm90aGluZyBdO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBub3cgdGhlIGluZXF1YXRpb25zLlxyXG4gICAgICAgIGlmKCF0aGlzLmlzU3RyaWN0RXF1YWwoKSl7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3NvbHV0aW9ucy5sZW5ndGg9PT0yKXtcclxuICAgICAgICAgICAgICAgIHNYMSA9IChyZWFsWDE8cmVhbFgyKT90aGlzLl9zb2x1dGlvbnNbMF06dGhpcy5fc29sdXRpb25zWzFdO1xyXG4gICAgICAgICAgICAgICAgc1gyID0gKHJlYWxYMTxyZWFsWDIpP3RoaXMuX3NvbHV0aW9uc1sxXTp0aGlzLl9zb2x1dGlvbnNbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoKHRoaXMuaXNHcmVhdGVyKCkgJiYgYUYuc2lnbigpPT09MSl8fCghdGhpcy5pc0dyZWF0ZXIoKSAmJiBhRi5zaWduKCk9PT0tMSkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxcXFxsZWZ0XS1cXFxcaW5mdHkgOyAke3NYMX1cXFxccmlnaHQke3RoaXMuaXNBbHNvRXF1YWwoKT8nXSc6J1snfSBcXFxcY3VwIFxcXFxsZWZ0JHt0aGlzLmlzQWxzb0VxdWFsKCk/J1snOiddJ30ke3NYMn07K1xcXFxpbmZ0eVxcXFxyaWdodFtgXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFxcXFxsZWZ0JHt0aGlzLmlzQWxzb0VxdWFsKCk/J1snOiddJ30ke3NYMX0gOyAke3NYMn1cXFxccmlnaHQke3RoaXMuaXNBbHNvRXF1YWwoKT8nXSc6J1snfWBcclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMuX3NvbHV0aW9ucy5sZW5ndGg9PT0xICYmIHRoaXMuX3NvbHV0aW9uc1swXSE9PXRoaXMuX3Zhcm5vdGhpbmcpe1xyXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuaXNBbHNvRXF1YWwoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy5pc0dyZWF0ZXIoKSAmJiBhRi5zaWduKCkgPT09IDEpIHx8ICghdGhpcy5pc0dyZWF0ZXIoKSAmJiBhRi5zaWduKCkgPT09IC0xKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zb2x1dGlvbnMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXFxcXGxlZnRdLVxcXFxpbmZ0eSA7ICR7dGhpcy5fc29sdXRpb25zWzBdfVxcXFxyaWdodFsgXFxcXGN1cCBcXFxcbGVmdF0ke3RoaXMuX3NvbHV0aW9uc1swXX07K1xcXFxpbmZ0eVxcXFxyaWdodFtgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc29sdXRpb25zID0gW3RoaXMuX3Zhcm5vdGhpbmddO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy5pc0dyZWF0ZXIoKSAmJiBhRi5zaWduKCkgPT09IDEpIHx8ICghdGhpcy5pc0dyZWF0ZXIoKSAmJiBhRi5zaWduKCkgPT09IC0xKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zb2x1dGlvbnMgPSBbdGhpcy5fcmVhbF07XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuX3NvbHV0aW9ucyA9IFsgdGhpcy5fc29sdXRpb25zWzBdIF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNHcmVhdGVyKCkpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFsgYUYuc2lnbigpPT09MT90aGlzLl9yZWFsOnRoaXMuX3Zhcm5vdGhpbmcgXTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9ucyA9IFsgYUYuc2lnbigpPT09LTE/dGhpcy5fcmVhbDp0aGlzLl92YXJub3RoaW5nIF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvbHV0aW9ucztcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfc29sdmVEZWdyZWUzcGx1cyA9IChsZXR0ZXI/OnN0cmluZyk6c3RyaW5nW10gPT4ge1xyXG4gICAgICAgIC8vIFRPRE86IHRyeSB0byByZXNvbHZlIGVxdWF0aW9ucyB3aXRoIGEgZGVncmVlIHN1cGVyaW9yIHRoYW4gMi5cclxuICAgICAgICByZXR1cm4gdGhpcy5fc29sdXRpb25zO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZW5lcmF0ZSA9IChvcHRzPzp7fSwgc2lnbj86c3RyaW5nKTpFcXVhdGlvbiA9PiB7XHJcbiAgICAgICAgbGV0IFAxID0gbmV3IFBvbHlub20oKSxcclxuICAgICAgICAgICAgUDIgPSBuZXcgUG9seW5vbSgpLFxyXG4gICAgICAgICAgICBFID0gbmV3IEVxdWF0aW9uKCkuY3JlYXRlKFAxLCBQMiwgc2lnbik7XHJcblxyXG4gICAgICAgIHJldHVybiBFO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNYXRoZW1hdGljYWwgb3BlcmF0aW9uc1xyXG4gICAgcHJpdmF0ZSBfcmV2ZXJzZVNpZ24gPSAoKTpFcXVhdGlvbiA9PiB7XHJcbiAgICAgICAgaWYodGhpcy5fc2lnbj09PSc9Jyl7cmV0dXJuIHRoaXM7fVxyXG5cclxuICAgICAgICBpZih0aGlzLl9zaWduLmluY2x1ZGVzKCc8Jykpe3RoaXMuX3NpZ24ucmVwbGFjZSgnPCcsICc+Jyk7cmV0dXJuIHRoaXM7fVxyXG4gICAgICAgIGlmKHRoaXMuX3NpZ24uaW5jbHVkZXMoJz4nKSl7dGhpcy5fc2lnbi5yZXBsYWNlKCc+JywgJzwnKTtyZXR1cm4gdGhpczt9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIG11bHRpcGx5ID0gKEY6IEZyYWN0aW9uKTogRXF1YXRpb24gPT4ge1xyXG4gICAgICAgIHRoaXMuX2xlZnQubXVsdGlwbHlCeUZyYWN0aW9uKEYpO1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0Lm11bHRpcGx5QnlGcmFjdGlvbihGKTtcclxuXHJcbiAgICAgICAgLy8gVGhlIHNpZ24gb2YgdGhlIGluZXF1YXRpb24gbXVzdCBiZSBjaGFuZ2VkLlxyXG4gICAgICAgIGlmKHRoaXMuX3NpZ24hPT0nPScgJiYgRi5zaWduKCk9PT0tMSl7XHJcbiAgICAgICAgICAgIHRoaXMuX3JldmVyc2VTaWduKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgYWRkID0gKGVxdTogRXF1YXRpb24pOiBFcXVhdGlvbiA9PiB7XHJcbiAgICAgICAgdGhpcy5fbGVmdC5hZGQoZXF1LmxlZnQpO1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0LmFkZChlcXUucmlnaHQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIHN1YnN0cmFjdCA9IChlcXU6IEVxdWF0aW9uKTpFcXVhdGlvbiA9PiB7XHJcbiAgICAgICAgdGhpcy5fbGVmdC5zdWJzdHJhY3QoZXF1LmxlZnQpO1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0LnN1YnN0cmFjdChlcXUucmlnaHQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8vIEdldHRlciBhbmQgc2V0dGVyXHJcbiAgICBnZXQgc29sdXRpb25zKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc29sdXRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBzb2x1dGlvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmKHRoaXMuX3NvbHV0aW9ucy5sZW5ndGg9PT0xXHJcbiAgICAgICAgICAgICYmXHJcbiAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NvbHV0aW9uc1swXT09PXRoaXMuX3JlYWxcclxuICAgICAgICAgICAgICAgIHx8IHRoaXMuX3NvbHV0aW9uc1swXT09PXRoaXMuX3Zhcm5vdGhpbmdcclxuICAgICAgICAgICAgICAgIHx8IHRoaXMuX3NvbHV0aW9uc1swXS5pbmNsdWRlcygnXFxcXGxlZnQnKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKXtcclxuICAgICAgICAgICAgcmV0dXJuIGBTID0gJHt0aGlzLl9zb2x1dGlvbnNbMF19YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGBTID0gXFxcXGxlZnR7ICR7dGhpcy5fc29sdXRpb25zLmpvaW4oJzsnKX0gXFxcXHJpZ2h0fWA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzUmVhbCgpOiBib29sZWFuIHtcclxuICAgICAgICBpZih0aGlzLl9zb2x1dGlvbnM9PT11bmRlZmluZWQpe3RoaXMuc29sdmUoKTt9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvbHV0aW9uc1swXT09PXRoaXMuX3JlYWw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzVmFydm90aGluZygpOiBib29sZWFuIHtcclxuICAgICAgICBpZih0aGlzLl9zb2x1dGlvbnM9PT11bmRlZmluZWQpe3RoaXMuc29sdmUoKTt9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvbHV0aW9uc1swXT09PXRoaXMuX3Zhcm5vdGhpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNpZ25Bc1RleCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmKHRoaXMuX3NpZ249PT0nPj0nfHx0aGlzLl9zaWduPT09Jz0+J3x8dGhpcy5fc2lnbj09PSdnZXEnKXtyZXR1cm4gJ1xcXFxnZXEnO31cclxuICAgICAgICBpZih0aGlzLl9zaWduPT09Jzw9J3x8dGhpcy5fc2lnbj09PSc9PCd8fHRoaXMuX3NpZ249PT0nbGVxJyl7cmV0dXJuICdcXFxcbGVxJzt9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ247XHJcbiAgICB9XHJcbiAgICBnZXQgdGV4KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuX2xlZnQudGV4fSR7dGhpcy5zaWduQXNUZXh9JHt0aGlzLl9yaWdodC50ZXh9YDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFyaWFibGVzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gWy4uLm5ldyBTZXQodGhpcy5fcmlnaHQudmFyaWFibGVzLmNvbmNhdCh0aGlzLl9sZWZ0LnZhcmlhYmxlcykpXTtcclxuICAgIH1cclxuICAgIGdldCBudW1iZXJPZlZhcnMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YXJpYWJsZXMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXQgbGVmdCgpOiBQb2x5bm9tIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGVmdDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbGVmdCh2YWx1ZTogUG9seW5vbSkge1xyXG4gICAgICAgIHRoaXMuX2xlZnQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmlnaHQoKTogUG9seW5vbSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCByaWdodCh2YWx1ZTogUG9seW5vbSkge1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHNpZ24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc2lnbih2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBzaWduIHZhbHVlIGFzIGZvcm1hdGVkLlxyXG4gICAgICAgIHRoaXMuX3NpZ24gPSB0aGlzLl9mb3JtYXRTaWduKHZhbHVlKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7RXF1YXRpb259IGZyb20gXCIuL2VxdWF0aW9uXCI7XHJcbmltcG9ydCB7TW9ub219IGZyb20gXCIuL21vbm9tXCI7XHJcbmltcG9ydCB7UG9seW5vbX0gZnJvbSBcIi4vcG9seW5vbVwiO1xyXG5pbXBvcnQge0ZyYWN0aW9ufSBmcm9tIFwiLi9mcmFjdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lYXJTeXN0ZW0ge1xyXG4gICAgcHJpdmF0ZSBfZXF1YXRpb25zOiBFcXVhdGlvbltdO1xyXG4gICAgcHJpdmF0ZSBfc29sdXRpb25zOiB7IFtsZXR0ZXI6c3RyaW5nXToge3ZhbHVlOkZyYWN0aW9uLCBpc1JlYWw6Ym9vbGVhbiwgaXNWYXJub3RoaW5nOmJvb2xlYW59IH07XHJcbiAgICBwcml2YXRlIF9yZXNvbHV0aW9uU3RlcHM6IExpbmVhclN5c3RlbVtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSA9ICguLi5lcXVhdGlvbnM6IEVxdWF0aW9uW10pOiBMaW5lYXJTeXN0ZW0gPT4ge1xyXG4gICAgICAgIHRoaXMuX2VxdWF0aW9ucyA9IGVxdWF0aW9ucztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgbG9nID0gKCk6IHN0cmluZyA9PiB7XHJcbiAgICAgICAgbGV0IHN0cjpzdHJpbmc7XHJcblxyXG4gICAgICAgIGZvcihsZXQgRSBvZiB0aGlzLl9lcXVhdGlvbnMpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhFLnRleCk7XHJcbiAgICAgICAgICAgIHN0ciArPSBgJHtFLnRleH1cXFxcbn1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH07XHJcblxyXG4gICAgY2xvbmUgPSAoKTogTGluZWFyU3lzdGVtID0+IHtcclxuICAgICAgICBsZXQgZXF1czogRXF1YXRpb25bXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5fZXF1YXRpb25zKSB7XHJcbiAgICAgICAgICAgIGVxdXMucHVzaChlLmNsb25lKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IExpbmVhclN5c3RlbSgpLmNyZWF0ZSguLi5lcXVzKTtcclxuICAgIH07XHJcblxyXG4gICAgcmVvcmRlciA9ICgpOiBMaW5lYXJTeXN0ZW0gPT4ge1xyXG4gICAgICAgIGZvciAobGV0IEUgb2YgdGhpcy5fZXF1YXRpb25zKSB7XHJcbiAgICAgICAgICAgIEUucmVvcmRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgc29sdmUgPSAoKTogTGluZWFyU3lzdGVtID0+IHtcclxuICAgICAgICAvLyBTb2x2ZSBpdCBieSBsaW5lYXJcclxuICAgICAgICB0aGlzLl9zb2x1dGlvbnMgPSB7fTtcclxuICAgICAgICB0aGlzLl9yZXNvbHV0aW9uU3RlcHMgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gUmVvcmRlciBhbGwgZXF1YXRpb25zLlxyXG4gICAgICAgIHRoaXMucmVvcmRlcigpO1xyXG5cclxuICAgICAgICAvLyBHZXQgYWxsIHZhcmlhYmxlcyBpbiB0aGUgbGluZWFyIHN5c3RlbVxyXG4gICAgICAgIGxldCBWID0gdGhpcy52YXJpYWJsZXMuc29ydCgpO1xyXG5cclxuICAgICAgICBmb3IobGV0IGxldHRlciBvZiBWKXtcclxuICAgICAgICAgICAgdGhpcy5fc29sdXRpb25zW2xldHRlcl0gPSB0aGlzLl9zb2x2ZU9uZUxldHRlcihsZXR0ZXIsIFYpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUT0RPOiBMaW5lYXJTeXN0ZW0gLSBzb2x2ZTogb3B0aW1pemF0aW9uIGFuZCBoYW5kbGUgdW5kZXRlcm1pbmVkIGFuZCB1bmRlZmluZWQgc3lzdGVtcy5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBfc29sdmVPbmVMZXR0ZXIobGV0dGVyOiBzdHJpbmcsIFY6c3RyaW5nW10pOnt2YWx1ZTpGcmFjdGlvbiwgaXNSZWFsOmJvb2xlYW4sIGlzVmFybm90aGluZzpib29sZWFufSB7XHJcbiAgICAgICAgLy8gbGlzdCBvZiBlcXVhdGlvbnMuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1NPTFZFOiAnLCBsZXR0ZXIpO1xyXG5cclxuXHJcbiAgICAgICAgbGV0IExFOkVxdWF0aW9uW10gPSB0aGlzLmNsb25lKCkuZXF1YXRpb25zLFxyXG4gICAgICAgICAgICByZWR1Y2VkRXF1YXRpb25zOkVxdWF0aW9uW10gPSBbXSxcclxuICAgICAgICAgICAgc3RlcHM6bnVtYmVyID0gdGhpcy5fZXF1YXRpb25zLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBlcXVhdGlvbnMuXHJcbiAgICAgICAgLy8gRG8gaXQgYXMgbG9uZyBhcyB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHN0ZXAsIGJ1dCBubyBtb3JlIHRoYW4gdGhlIG51bWJlciBvZiBlcXVhdGlvbnMuXHJcbiAgICAgICAgZm9yKGxldCBMIG9mIFYpe1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGxldHRlciBmcm9tIGFsbCBlcXVhdGlvbnMgdXNpbmcgbGluZWFyIGNvbWJpbmF0aW9uc1xyXG4gICAgICAgICAgICBpZihMPT09bGV0dGVyKXtjb250aW51ZTt9XHJcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpPExFLmxlbmd0aC0xOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgcmVkdWNlZEVxdWF0aW9ucy5wdXNoKHRoaXMuX2xpbmVhclJlZHVjdGlvbihMRVtpXSwgTEVbaSsxXSwgTCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBLZWVwIHRyYWNrIG9mIGVhY2ggc3RlcHMuXHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdXRpb25TdGVwcy5wdXNoKG5ldyBMaW5lYXJTeXN0ZW0oKS5jcmVhdGUoLi4ucmVkdWNlZEVxdWF0aW9ucykpO1xyXG5cclxuICAgICAgICAgICAgLy8gU2V0IHRoZSBsaXN0IG9mIGVxdWF0aW9ucyB0byB0aGUgbmV3IHZlcnNpb24uXHJcbiAgICAgICAgICAgIExFID0gdGhpcy5fcmVzb2x1dGlvblN0ZXBzW3RoaXMuX3Jlc29sdXRpb25TdGVwcy5sZW5ndGgtMV0uY2xvbmUoKS5lcXVhdGlvbnM7XHJcbiAgICAgICAgICAgIHJlZHVjZWRFcXVhdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgc3RlcHMtLTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNvbHZlIHRoZSBlcXVhdGlvbnNcclxuICAgICAgICBsZXQgRSA9IHRoaXMuX3Jlc29sdXRpb25TdGVwc1t0aGlzLl9yZXNvbHV0aW9uU3RlcHMubGVuZ3RoLTFdLmVxdWF0aW9uc1swXTtcclxuICAgICAgICBjb25zb2xlLmxvZyhFLnRleCk7XHJcbiAgICAgICAgRS5zb2x2ZSgpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhFLnNvbHV0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsdWU6IG5ldyBGcmFjdGlvbihFLnNvbHV0aW9uc1swXSksXHJcbiAgICAgICAgICAgIGlzUmVhbDogRS5pc1JlYWwsXHJcbiAgICAgICAgICAgIGlzVmFybm90aGluZzogRS5pc1ZhcnZvdGhpbmdcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfbGluZWFyUmVkdWN0aW9uKGVxMTogRXF1YXRpb24sIGVxMjogRXF1YXRpb24sIGxldHRlcjogc3RyaW5nKTogRXF1YXRpb24ge1xyXG4gICAgICAgIC8vIFRPRE86IGhhbmRsZSBvdGhlciBzaWducyBmb3IgZXF1YXRpb25zID9cclxuICAgICAgICAvLyBHZXQgdGhlIG1vbm9tIGZvciB0aGUgcGFydGljdWxhciBsZXR0ZXIuXHJcbiAgICAgICAgbGV0IGMxID0gZXExLmxlZnQubW9ub21CeURlZ3JlZSgxLCBsZXR0ZXIpLmNvZWZmaWNpZW50LmNsb25lKCksXHJcbiAgICAgICAgICAgIGMyID0gZXEyLmxlZnQubW9ub21CeURlZ3JlZSgxLCBsZXR0ZXIpLmNvZWZmaWNpZW50LmNsb25lKCk7XHJcblxyXG4gICAgICAgIC8vIE91dHB1dCBlcXVhdGlvblxyXG4gICAgICAgIHJldHVybiBlcTEuY2xvbmUoKS5tdWx0aXBseShjMikuc3Vic3RyYWN0KGVxMi5jbG9uZSgpLm11bHRpcGx5KGMxKSkucmVvcmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldHRlciBhbmQgc2V0dGVyXHJcbiAgICBnZXQgaXNTb2x2YWJsZSgpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgViA9IHRoaXMudmFyaWFibGVzO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBpbiBzb21lIGNhc2UsIGl0IGlzIHBvc3NpYmxlIHRvIHJlc29sdmUgc3lzdGVtcyBpZiB0aGVyZSBpc24ndCB0aGUgc2FtZSBudW1iZXIgb2YgdmFycyBhbmQgZXF1YXRpb25zXHJcbiAgICAgICAgaWYgKFYubGVuZ3RoICE9PSB0aGlzLl9lcXVhdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vVE9PRDogTXVzdCBjaGVjayBpZiB0d28gZXF1YXRpb25zIGlzbid0IGEgbGluZWFyIGNvbWJpbmF0aW9uIG9mIHRoZSBvdGhlcnMgP1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgZ2V0IHZhcmlhYmxlcygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgbGV0IFY6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgRSBvZiB0aGlzLl9lcXVhdGlvbnMpIHtcclxuICAgICAgICAgICAgViA9IFYuY29uY2F0KEUudmFyaWFibGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFsuLi5uZXcgU2V0KFYpXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGV4KCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHRleFN0cjogc3RyaW5nO1xyXG5cclxuICAgICAgICByZXR1cm4gdGV4U3RyO1xyXG4gICAgfTtcclxuXHJcbiAgICBnZXQgdGV4U29sdXRpb24oKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgdGV4OnN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3NvbHV0aW9ucz09PXVuZGVmaW5lZCl7dGhpcy5zb2x2ZSgpO31cclxuXHJcbiAgICAgICAgZm9yKGxldCBsZXR0ZXIgaW4gdGhpcy5fc29sdXRpb25zKXtcclxuICAgICAgICAgICAgaWYodGhpcy5fc29sdXRpb25zW2xldHRlcl0uaXNSZWFsKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmRldGVybWluZWQgKGxldHRlciAke2xldHRlcn0pYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy5fc29sdXRpb25zW2xldHRlcl0uaXNWYXJub3RoaW5nKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmRlZmluZWQgKGxldHRlciAke2xldHRlcn0pYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRleC5wdXNoKHRoaXMuX3NvbHV0aW9uc1tsZXR0ZXJdLnZhbHVlLmRmcmFjKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIGAoJHt0ZXguam9pbignOycpfSlgO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzZXQgZXF1YXRpb25zKHZhbHVlKXtcclxuICAgICAgICB0aGlzLl9lcXVhdGlvbnMgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGdldCBlcXVhdGlvbnMoKTogRXF1YXRpb25bXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VxdWF0aW9ucztcclxuICAgIH1cclxufSIsImltcG9ydCB7RnJhY3Rpb259IGZyb20gXCIuL21hdGhzL2ZyYWN0aW9uXCI7XHJcbmltcG9ydCB7UG9seW5vbX0gZnJvbSBcIi4vbWF0aHMvcG9seW5vbVwiO1xyXG5pbXBvcnQge01vbm9tfSBmcm9tIFwiLi9tYXRocy9tb25vbVwiO1xyXG5pbXBvcnQge051bWVyaWN9IGZyb20gXCIuL21hdGhzL251bWVyaWNcIjtcclxuaW1wb3J0IHtFcXVhdGlvbn0gZnJvbSBcIi4vbWF0aHMvZXF1YXRpb25cIjtcclxuaW1wb3J0IHtOdGhyb290fSBmcm9tIFwiLi9tYXRocy9udGhyb290XCI7XHJcbmltcG9ydCB7TGluZWFyU3lzdGVtfSBmcm9tIFwiLi9tYXRocy9saW5lYXJTeXN0ZW1cIjtcclxuXHJcbig8YW55PndpbmRvdykuUGkgPSB7XHJcbiAgICBOdW1lcmljOiBOdW1lcmljLFxyXG4gICAgRnJhY3Rpb246IEZyYWN0aW9uLFxyXG4gICAgUm9vdDogTnRocm9vdCxcclxuICAgIE1vbm9tOiBNb25vbSxcclxuICAgIFBvbHlub206IFBvbHlub20sXHJcbiAgICBFcXVhdGlvbjogRXF1YXRpb24sXHJcbiAgICBMaW5lYXJTeXN0ZW06IExpbmVhclN5c3RlbVxyXG59OyJdLCJzb3VyY2VSb290IjoiIn0=