!function(t){var e={};function i(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(r,o,function(e){return t[e]}.bind(null,o));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);class r{static prime(t){let e=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,9901,9907,9923,9929,9931,9941,9949,9967,9973];return void 0===t?e:e.slice(0,Math.max(e.length,t))}static gcd(...t){let e=function(t,i){return 0===i?t:e(i,t%i)},i=1,r=2;if(0===t.length)return 1;if(1===t.length)return 0===t[0]?1:t[0];if(i=e(t[0],t[1]),1===i)return 1;for(r=2;r<t.length&&(i=e(i,t[r]),1!==i);r++);return i}static lcm(...t){return t.reduce((function(t,e){return Math.abs(t*e/r.gcd(t,e))}))}static randomBool(t=.5){return Math.random()<t}static randomInt(t,e){return void 0===e?r.randomInt(0,t):Math.floor(Math.random()*(e-t+1)+t)}static randomIntSym(t,e){return!1===e?r.randomBool()?this.randomInt(1,t):-this.randomInt(1,t):r.randomInt(-t,t)}}class o{constructor(){return this.zero=()=>(this._numerator=0,this._denominator=1,this),this.clone=()=>{let t=new o;return t.numerator=+this._numerator,t.denominator=+this._denominator,t},this.parse=(t,e)=>{let i;switch(typeof t){case"string":if(i=t.split("/"),1===i.length)return this.parse(+i[0]);2===i.length?"0"===i[1]?(this._numerator=NaN,this._denominator=1):(this._numerator=+i[0],this._denominator=+i[1]):(this._numerator=NaN,this._denominator=1);break;case"number":if(Number.isSafeInteger(t))this._numerator=t,this._denominator=1;else{let i=t.toString().split(".")[1].length;void 0===e?(this._numerator=t*Math.pow(10,i),this._denominator=Math.pow(10,i)):Number.isSafeInteger(e)&&(this._numerator=t*Math.pow(10,i)-Math.floor(t*Math.pow(10,i-e)),this.denominator=Math.pow(10,i)-Math.pow(10,i-e))}}return this},this.parseByInteger=(t,e)=>(Number.isSafeInteger(t)&&(this._numerator=t),void 0!==e&&Number.isSafeInteger(e)?this._denominator=e:this._denominator=1,this),this.reduce=()=>{let t=r.gcd(this._numerator,this._denominator);return this._numerator=this._numerator/t,this._denominator=this._denominator/t,this._denominator<0&&(this._denominator=-this._denominator,this._numerator=-this._numerator),this},this.invalid=()=>{let t=new o;return t._numerator=NaN,t._denominator=1,t},this.infinite=()=>{let t=new o;return t._numerator=1/0,t._denominator=1,t},this.opposed=()=>(this._numerator=-this._numerator,this),this.multiply=t=>(this._numerator=this._numerator*t.numerator,this._denominator=this._denominator*t.denominator,this.reduce()),this.amplify=t=>(Number.isSafeInteger(t)&&(this._numerator*=t,this._denominator*=t),this),this.divide=t=>{if(0===t.numerator)return(new o).infinite();let e=+this._numerator,i=+this._denominator;return this._numerator=e*t.denominator,this._denominator=i*t.numerator,this.reduce()},this.add=t=>{let e=this._numerator,i=this._denominator;return this._numerator=e*t.denominator+t.numerator*i,this._denominator=i*t.denominator,this.reduce()},this.substract=t=>this.add(t.clone().opposed()),this.pow=t=>Number.isSafeInteger(t)?(this.reduce(),t>0?(this._numerator=this._numerator**t,this._denominator=this._denominator**t):(this._numerator=this._denominator**t,this._denominator=this._numerator**t),this):this.invalid(),this.sqrt=()=>this,this.abs=()=>(this._numerator=Math.abs(this._numerator),this._denominator=Math.abs(this._denominator),this),this.sign=()=>this._numerator*this._denominator>0?1:-1,this.isEqual=t=>{let e=t.clone().reduce(),i=this.clone().reduce();return i.numerator===e.numerator&&i.denominator===e.denominator},this.areEquals=(...t)=>{for(let e=0;e<t.length;e++)if(!this.isEqual(t[e]))return!1;return!0},this.compare=(t,e)=>{switch(void 0===e&&(e="="),e){case">":return this.value>t.value;case">=":return this.value>=t.value;case"<":return this.value<t.value;case"<=":return this.value<=t.value;case"=":return this.isEqual(t);case"<>":return!this.isEqual(t);default:return!1}},this.lesser=t=>this.compare(t,"<"),this.leq=t=>this.compare(t,"<="),this.greater=t=>this.compare(t,">"),this.geq=t=>this.compare(t,">="),this.isInfinity=()=>this._numerator===1/0,this.isFinite=()=>!this.isInfinity(),this._numerator=1,this._denominator=1,this}isFraction(){return!0}set numerator(t){this._numerator=t}set denominator(t){this._denominator=t}get numerator(){return this._numerator}get denominator(){return this._denominator}get value(){return this._numerator/this._denominator}get display(){return 1===this._denominator?`${this._numerator}`:`${this._numerator}/${this._denominator}`}get frac(){return 1===this._denominator?`${this._numerator}`:`\\frac{ ${this._numerator} }{ ${this._denominator} }`}get dfrac(){return 1===this._denominator?`${this._numerator}`:this._numerator>0?`\\dfrac{ ${this._numerator} }{ ${this._denominator} }`:`-\\dfrac{ ${Math.abs(this._numerator)} }{ ${this._denominator} }`}}class n{constructor(){return this.parse=t=>{this.literalStr=t,this._coefficient=new o;for(const e of[...t.replace(/([a-z])|(\^[+-]?[0-9]+)/g,",").split(",")])""!==e.trim()&&this._coefficient.multiply((new o).parse(e.trim()));return this},this.zero=()=>(this._coefficient=(new o).zero(),this._literal={},this),this.clone=()=>{let t=new n;t.coefficient=this._coefficient.clone();for(let e in this._literal)t.letter(e,this._literal[e]);return t},this.random=(t="x",e=1,i=!1,o=!0)=>{this.coefficient.parseByInteger(r.randomIntSym(10,o),i?r.randomInt(1,10):1);for(let i of t.split(""))this.letter(i,t.length>1?r.randomInt(e):e);return this},this.letter=(t,e)=>{e<=0||!Number.isSafeInteger(e)?void 0!==this._literal[t]&&delete this._literal[t]:this._literal[t]=e},this.isSameAs=t=>{let e=Object.keys(this._literal),i=Object.keys(t.literal),r=e.concat(i.filter(t=>e.indexOf(t)<0));for(let e of r){if(void 0===this._literal[e]||void 0===t.literal[e])return!1;if(this._literal[e]!==t.literal[e])return!1}return!0},this.areSameAs=(...t)=>{for(let e=0;e<t.length;e++)if(!this.isSameAs(t[e]))return!1;return!0},this.isEqual=t=>!!this.isSameAs(t)&&this._coefficient.isEqual(t.coefficient),this.areEquals=(...t)=>{if(!this.areSameAs(...t))return!1;for(let e of t)if(!this._coefficient.isEqual(e.coefficient))return!1;return!0},this.degree=t=>0===Object.entries(this._literal).length?0:void 0===t?Object.values(this._literal).reduce((t,e)=>t+e):void 0===this._literal[t]?0:this._literal[t],this.opposed=()=>(this._coefficient.opposed(),this),this.add=(...t)=>{for(let e of t)this.isSameAs(e)?this._coefficient.add(e.coefficient):console.log("Add: Is not similar: ",e.display);return this},this.substract=(...t)=>{for(let e of t)this.isSameAs(e)?this._coefficient.add(e.coefficient.clone().opposed()):console.log("Substract: Is not similar: ",e.display);return this},this.multiply=(...t)=>{for(let e of t){this._coefficient.multiply(e.coefficient);for(let t in e.literal)this._literal[t]=void 0===this._literal[t]?e.literal[t]:this._literal[t]+e.literal[t]}return this},this.divide=(...t)=>{for(let e of t){this._coefficient.divide(e.coefficient);for(let t in e.literal)this._literal[t]=void 0===this._literal[t]?-e.literal[t]:this._literal[t]-e.literal[t],0===this._literal[t]&&delete this._literal[t]}return this},this.pow=t=>{this._coefficient.pow(t);for(let e in this._literal)this._literal[e]*=t;return this},this.evaluate=t=>{let e=this.coefficient.clone();for(let i in this._literal){if(void 0===t[i])return(new o).zero();e.multiply(t[i].clone().pow(this._literal[i]))}return e},this._coefficient=(new o).zero(),this._literal={},this}isMonom(){return!0}set coefficient(t){this._coefficient=t}set literal(t){this._literal=t}set literalStr(t){for(const e of[...t.matchAll(/([a-z])\^([+-]?[0-9]+)/g)])e[1]in this._literal||(this._literal[e[1]]=0),this._literal[e[1]]+=+e[2];for(const e of[...t.matchAll(/([a-z](?!\^))/g)])e[1]in this._literal||(this._literal[e[1]]=0),this._literal[e[1]]+=1}get coefficient(){return this._coefficient}get literal(){return this._literal}get isZero(){return 0===this._coefficient.value}get display(){let t="";for(let e in this._literal)0!==this._literal[e]&&(t+=`${e}`,this._literal[e]>1&&(t+=`^${this._literal[e]}`));return""===t?0!=this._coefficient.value?`${this._coefficient.display}`:"":1===this._coefficient.value?t:-1===this._coefficient.value?`-${t}`:0===this._coefficient.value?"0":`${this._coefficient.display}${t}`}get tex(){let t="";for(let e in this._literal)0!==this._literal[e]&&(t+=`${e}`,this._literal[e]>1&&(t+=`^${this._literal[e]}`));return""===t?0!=this._coefficient.value?`${this._coefficient.dfrac}`:"":1===this._coefficient.value?t:-1===this._coefficient.value?`-${t}`:0===this._coefficient.value?"0":`${this._coefficient.dfrac}${t}`}}n.xmultiply=(t,e)=>t.clone().multiply(e);class s{constructor(){this._rpn=[]}isOperation(t){return!!t[0].match(/[\+\-\*\/\^]/g)||!!t.match(/^sin|cos|tan/g)}NextToken(t,e){let i,r="",o="monom";return i=t.substr(e).match(/^[0-9\/a-z\^]+/g)||[],i.length>0?(r=i[0],o="monom"):t[e].match(/[\+\-\*\/\^]/g)?(r=t[e],o="operation"):"("===t[e]?(r="(",o="("):")"===t[e]?(r=")",o=")"):","===t[e]?(r=",",o="function-argument"):t.match(/^(sin|cos|tan)/g)?(r=")",o=")"):(r=i[0],o="monom",""===r&&(r=t[e],o="monom",console.log("SHUTING YARD - NEXT TOKEN: error at ",e))),[r,e+r.length,o]}Uniformizer(t){let e;return e=t.replace(/\)\(/g,")*("),e=e.replace(/([\da-z])(\()/g,"$1*$2"),e=e.replace(/(\))([\da-z])/g,"$1*$2"),e}parse(t){let e=[],i=[],r={"^":4,"*":3,"/":3,"+":2,"-":2},o={"^":"right","*":"left","/":"left","+":"left","-":"left"},n="",s=0,a="";t=this.Uniformizer(t);let h,l=50;for(;s<t.length;){if(l--,0===l){console.log("SECURITY LEVEL 1 EXIT");break}switch([n,s,a]=this.NextToken(t,s),a){case"monom":e.push(n);break;case"operation":if(i.length>0){let t=i[i.length-1];for(h=50;t in o&&("left"===o[n]&&r[n]<=r[t]||"right"===o[n]&&r[n]<r[t]);){if(h--,0===h){console.log("SECURITY LEVEL 2 OPERATION EXIT");break}e.push(i.pop()||""),t=i[i.length-1]}}i.push(n);break;case"trigo":i.push(n);break;case"function-argument":for(h=50;"("!==i[i.length-1]&&i.length>0;){if(h--,0===h){console.log("SECURITY LEVEL 2 FUNCTION ARGUMENT EXIT");break}e.push(i.pop()||"")}break;case"(":i.push(n);break;case")":for(h=50;"("!==i[i.length-1]&&i.length>1;){if(h--,0===h){console.log("SECURITY LEVEL 2 CLOSING PARENTHESE EXIT");break}e.push(i.pop()||"")}i.pop();break;default:console.log(`SHUTING YARD: ${a} : ${n} `)}}return this._rpn=e.concat(i.reverse()),this}get rpn(){return this._rpn}}class a{constructor(){this.isPolynom=()=>!0,this.parse=t=>this.shutingYardToReducedPolynom(t),this.empty=()=>(this._monoms=[],this),this.zero=()=>(this._monoms=[],this._monoms.push((new n).zero()),this),this.clone=()=>{let t=new a,e=[];for(let t of this._monoms)e.push(t.clone());return t.monoms=e,t},this.rndSimple=(t=1,e="x",i=!1,r=!1,s=!0)=>{let a;this.empty();for(let h=t;h>=0;h--)a=(new n).random(e,h,r,h!==t&&s),i&&h===t&&(a.coefficient=(new o).parse("1")),this.addMonom(a);return this},this.rndFactorable=()=>(this.empty(),this),this.addMonom=(...t)=>{for(let e of t)this._monoms.push(e);return this.reduce()},this.reduce=()=>{for(let t=0;t<this._monoms.length;t++)for(let e=t+1;e<this._monoms.length;e++)this._monoms[t].isSameAs(this.monoms[e])&&(this._monoms[t].add(this.monoms[e]),this._monoms.splice(e,1));this._monoms=this._monoms.filter(t=>0!==t.coefficient.value);for(let t of this._monoms)t.coefficient.reduce();return 0===this.length?(new a).zero():this},this.minify=()=>(this.multiplyByInteger(this.lcmDenominator()).divideByInteger(this.gcdNumerator()).reduce(),this.reduce()),this.reorder=(t="x")=>(this._monoms.sort((function(e,i){return i.degree(t)-e.degree(t)})),this.reduce()),this.opposed=()=>(this._monoms=this._monoms.map(t=>t.opposed()),this),this.add=t=>(this._monoms=this._monoms.concat(t.monoms),this.reduce()),this.substract=t=>(this._monoms=this._monoms.concat(t.clone().opposed().monoms),this.reduce()),this.multiply=t=>{let e=[];for(let i of this._monoms)for(let r of t.monoms)e.push(n.xmultiply(i,r));return this._monoms=e,this.reduce()},this.multiplyByInteger=t=>{let e=(new o).parseByInteger(t);for(let t of this._monoms)t.coefficient.multiply(e);return this.reduce()},this.multiplyByMonom=t=>{for(let e of this._monoms)e.multiply(t);return this.reduce()},this.divideByInteger=t=>{let e=(new o).parseByInteger(t);for(let t of this._monoms)t.coefficient.divide(e);return this},this.divide=t=>{let e,i,r,o=t.monomByDegree();for(e=(new a).zero(),i=this.clone();i.degree()>=t.degree()&&(r=i.monomByDegree().clone().divide(o),!r.isZero);)e.addMonom(r),i.substract(t.clone().multiplyByMonom(r));return{quotient:e,reminder:i}},this.pow=t=>{if(!Number.isSafeInteger(t))return this.zero();if(t<0)return this.zero();if(0===t)return new a;let e=this.clone();for(let i=1;i<t;i++)this.multiply(e);return this.reduce()},this.degree=t=>{let e=0;for(let i of this._monoms)e=Math.max(i.degree(t),e);return e},this.monomByDegree=(t,e)=>{if(void 0===t)return this.monomByDegree(this.degree(e));let i=this.clone().reduce();for(let r of i._monoms)if(r.degree(e)===t)return r.clone();return(new n).zero()},this.evaluate=t=>{let e=(new o).zero();return this._monoms.forEach(i=>{console.log(i.display,t,i.evaluate(t).display),e.add(i.evaluate(t))}),e},this.canDivide=(t,e="x")=>{const i=t.degree();let r={};if(0===i)return!t.isTrivial;if(1===i){const i=t.getZeroes();return!0!==i[0]&&!1!==i[0]&&(r[e]=i[0],0===this.evaluate(r).value)}return i>1&&(console.log("Currently, only first degree polynom are supported"),!1)},this.getZeroes=()=>{switch(this.degree()){case 0:return 0===this._monoms[0].coefficient.value?[!0]:[!1];case 1:if(1===this._monoms.length)return[(new o).zero()];{let t=this.clone().reduce().reorder();return[t.monoms[1].coefficient.opposed().divide(t.monoms[0].coefficient)]}case 2:return[!0,!1]}return[]},this.getDenominators=()=>{let t=[];for(let e of this._monoms)t.push(e.coefficient.denominator);return t},this.getNumerators=()=>{let t=[];for(let e of this._monoms)t.push(e.coefficient.numerator);return t},this.lcmDenominator=()=>r.lcm(...this.getDenominators()),this.gcdDenominator=()=>r.gcd(...this.getDenominators()),this.lcmNumerator=()=>r.lcm(...this.getNumerators()),this.gcdNumerator=()=>r.gcd(...this.getNumerators()),this.isSameAs=t=>{let e=this.clone().reduce().reorder(),i=t.clone().reduce().reorder();if(e.length!==i.length)return!1;if(e.degree()!==i.degree())return!1;for(let t in e.monoms)if(!e.monoms[t].isEqual(i.monoms[t]))return!1;return!0},this.isOpposedAt=t=>this.isSameAs(t.clone().opposed()),this.genDisplay=t=>{let e="";for(let i of this._monoms)0!==i.coefficient.value&&(1===i.coefficient.sign()&&""!==e&&(e+="+"),e+="tex"===t?i.tex:i.display);return e},this._monoms=[]}shutingYardToReducedPolynom(t){let e,i,r=(new s).parse(t),o=r.rpn,h=[];for(let t of o)if(r.isOperation(t)){switch(i=h.pop()||(new a).zero(),e=h.length>0?h.pop()||(new a).zero():new a,t){case"+":e.add(i);break;case"-":e.substract(i);break;case"*":e.multiply(i);break;default:console.log("Token not recognized in shuting yard to reduce polynom: ",t)}h.push(e)}else h.push((new a).addMonom((new n).parse(t)));return this._monoms=h[0].monoms,this}get length(){return this._monoms.length}get monoms(){return this._monoms}set monoms(t){this._monoms=t}get display(){return this.genDisplay()}get tex(){return this.genDisplay("tex")}get isTrivial(){return 0===this._monoms.length&&0===this._monoms[0].coefficient.value}}window.Pi={Numeric:r,Fraction:o,Monom:n,Polynom:a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hdGhzL251bWVyaWMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hdGhzL2ZyYWN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9tYXRocy9tb25vbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWF0aHMvc2h1dGluZ3lhcmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hdGhzL3BvbHlub20udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJOdW1lcmljIiwibmIiLCJwcmltZXMiLCJ1bmRlZmluZWQiLCJzbGljZSIsIk1hdGgiLCJtYXgiLCJsZW5ndGgiLCJ2YWx1ZXMiLCJnY2QyIiwiYSIsImIiLCJnIiwicmVkdWNlIiwiYWJzIiwiZ2NkIiwicGVyY2VudCIsInJhbmRvbSIsInJhbmRvbUludCIsImZsb29yIiwiemVybyIsInJhbmRvbUJvb2wiLCJ0aGlzIiwiX251bWVyYXRvciIsIl9kZW5vbWluYXRvciIsImNsb25lIiwiRiIsIm51bWVyYXRvciIsImRlbm9taW5hdG9yIiwicGFyc2UiLCJwZXJpb2RpYyIsIlMiLCJzcGxpdCIsIk5hTiIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJ0b1N0cmluZyIsInBvdyIsInBhcnNlQnlJbnRlZ2VyIiwibnVtIiwiZGVuIiwiaW52YWxpZCIsImluZmluaXRlIiwiSW5maW5pdHkiLCJvcHBvc2VkIiwibXVsdGlwbHkiLCJhbXBsaWZ5IiwiayIsImRpdmlkZSIsIk4iLCJEIiwiYWRkIiwic3Vic3RyYWN0Iiwic3FydCIsInNpZ24iLCJpc0VxdWFsIiwiRjIiLCJGMSIsImFyZUVxdWFscyIsImNvbXBhcmUiLCJsZXNzZXIiLCJ0aGFuIiwibGVxIiwiZ3JlYXRlciIsImdlcSIsImlzSW5maW5pdHkiLCJpc0Zpbml0ZSIsImlucHV0U3RyIiwibGl0ZXJhbFN0ciIsIl9jb2VmZmljaWVudCIsInYiLCJyZXBsYWNlIiwidHJpbSIsIl9saXRlcmFsIiwiY29lZmZpY2llbnQiLCJsZXR0ZXIiLCJsZXR0ZXJzIiwiZGVncmVlIiwid2l0aEZyYWN0aW9uIiwiYWxsb3daZXJvIiwicmFuZG9tSW50U3ltIiwiTCIsImlzU2FtZUFzIiwiTSIsIk0xIiwia2V5cyIsIk0yIiwibGl0ZXJhbCIsIksiLCJjb25jYXQiLCJmaWx0ZXIiLCJpdGVtIiwiaW5kZXhPZiIsImFyZVNhbWVBcyIsImVudHJpZXMiLCJjb25zb2xlIiwibG9nIiwiZGlzcGxheSIsImV2YWx1YXRlIiwibWF0Y2hBbGwiLCJkZnJhYyIsInhtdWx0aXBseSIsIlNodXRpbmd5YXJkIiwiX3JwbiIsInRva2VuIiwibWF0Y2giLCJleHByIiwic3RhcnQiLCJ0b2tlbk1hdGNoIiwidG9rZW5UeXBlIiwic3Vic3RyIiwiZXhwcjIiLCJvdXRRdWV1ZSIsIm9wU3RhY2siLCJwcmVjZWRlbmNlIiwiYXNzb2NpYXRpdmUiLCJ0b2tlblBvcyIsIlVuaWZvcm1pemVyIiwic2VjdXJpdHlMb29wTHZsMiIsInNlY3VyaXR5TG9vcEx2bDEiLCJOZXh0VG9rZW4iLCJwdXNoIiwib3BUb3AiLCJwb3AiLCJyZXZlcnNlIiwiaXNQb2x5bm9tIiwic2h1dGluZ1lhcmRUb1JlZHVjZWRQb2x5bm9tIiwiZW1wdHkiLCJfbW9ub21zIiwiUCIsIm1vbm9tcyIsInJuZFNpbXBsZSIsInVuaXQiLCJhZGRNb25vbSIsInJuZEZhY3RvcmFibGUiLCJqIiwic3BsaWNlIiwibWluaWZ5IiwibXVsdGlwbHlCeUludGVnZXIiLCJsY21EZW5vbWluYXRvciIsImRpdmlkZUJ5SW50ZWdlciIsImdjZE51bWVyYXRvciIsInJlb3JkZXIiLCJzb3J0IiwibWFwIiwibTEiLCJtMiIsIm5iRiIsIm11bHRpcGx5QnlNb25vbSIsInF1b3RpZW50IiwicmVtaW5kZXIiLCJuZXdNIiwibWF4TVAiLCJtb25vbUJ5RGVncmVlIiwiaXNaZXJvIiwiZm9yRWFjaCIsIm1vbm9tIiwiY2FuRGl2aWRlIiwiZXZhbFZhbHVlIiwiaXNUcml2aWFsIiwieiIsImdldFplcm9lcyIsImdldERlbm9taW5hdG9ycyIsImRlbm9taW5hdG9ycyIsImdldE51bWVyYXRvcnMiLCJudW1lcmF0b3JzIiwibGNtIiwiZ2NkRGVub21pbmF0b3IiLCJsY21OdW1lcmF0b3IiLCJjUDEiLCJjUDIiLCJpc09wcG9zZWRBdCIsImdlbkRpc3BsYXkiLCJvdXRwdXQiLCJ0ZXgiLCJTWSIsInJwbiIsImlzT3BlcmF0aW9uIiwid2luZG93IiwiUGkiLCJGcmFjdGlvbiIsIk1vbm9tIiwiUG9seW5vbSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksRyxzQ0NsRjlDLE1BQU1DLEVBS1QsYUFBYUMsR0FDVCxJQUFJQyxFQUFrQixDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDMWhPLFlBQVVDLElBQVBGLEVBQ1FDLEVBRUFBLEVBQU9FLE1BQU0sRUFBRUMsS0FBS0MsSUFBSUosRUFBT0ssT0FBT04sSUFRckQsY0FBY08sR0FFVixJQUFJQyxFQUFPLFNBQVNDLEVBQVNDLEdBQ3pCLE9BQU8sSUFBSkEsRUFBY0Qs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RXFKLEtBQUt3QixRQUdQN0ssRUFBRXFKLE1BQUssSUFBSSxHQUFVWSxVQUFTLElBQUksR0FBUXhHLE1BQU0yRSxLQUt4RCxPQURBbEYsS0FBSzBHLFFBQVU1SixFQUFFLEdBQUc4SixPQUNiNUcsS0FpVVgsYUFFSSxPQUFPQSxLQUFLMEcsUUFBUXpILE9BR3hCLGFBQ0ksT0FBT2UsS0FBSzBHLFFBR2hCLFdBQVc3QyxHQUNQN0QsS0FBSzBHLFFBQVU3QyxFQUduQixjQUNJLE9BQU83RCxLQUFLc0osYUFHaEIsVUFDSSxPQUFPdEosS0FBS3NKLFdBQVcsT0FHM0IsZ0JBQ0ksT0FBK0IsSUFBeEJ0SixLQUFLMEcsUUFBUXpILFFBQXNELElBQXRDZSxLQUFLMEcsUUFBUSxHQUFHdEQsWUFBWXpGLE9DbmRsRWlNLE9BQVFDLEdBQUssQ0FDZm5MLFFBQVNBLEVBQ1RvTCxTQUFVLEVBQ1ZDLE1BQU8sRUFDUEMsUUFBUyIsImZpbGUiOiJwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydCBjbGFzcyBOdW1lcmlje1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGxpc3Qgb2YgdGhlIG50aCBmaXJzdCBwcmltZSBudW1iZXJzLlxyXG4gICAgICogQHBhcmFtIG5iIDogbnVtYmVyIG9mIHByaW1lcyB0byBjaG9vc2UgZnJvbVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcHJpbWUobmI/Om51bWJlcik6bnVtYmVyW117XHJcbiAgICAgICAgbGV0IHByaW1lczpudW1iZXJbXSA9IFsyLCAzLCA1LCA3LCAxMSwgMTMsIDE3LCAxOSwgMjMsIDI5LCAzMSwgMzcsIDQxLCA0MywgNDcsIDUzLCA1OSwgNjEsIDY3LCA3MSwgNzMsIDc5LCA4MywgODksIDk3LCAxMDEsIDEwMywgMTA3LCAxMDksIDExMywgMTI3LCAxMzEsIDEzNywgMTM5LCAxNDksIDE1MSwgMTU3LCAxNjMsIDE2NywgMTczLCAxNzksIDE4MSwgMTkxLCAxOTMsIDE5NywgMTk5LCAyMTEsIDIyMywgMjI3LCAyMjksIDIzMywgMjM5LCAyNDEsIDI1MSwgMjU3LCAyNjMsIDI2OSwgMjcxLCAyNzcsIDI4MSwgMjgzLCAyOTMsIDMwNywgMzExLCAzMTMsIDMxNywgMzMxLCAzMzcsIDM0NywgMzQ5LCAzNTMsIDM1OSwgMzY3LCAzNzMsIDM3OSwgMzgzLCAzODksIDM5NywgNDAxLCA0MDksIDQxOSwgNDIxLCA0MzEsIDQzMywgNDM5LCA0NDMsIDQ0OSwgNDU3LCA0NjEsIDQ2MywgNDY3LCA0NzksIDQ4NywgNDkxLCA0OTksIDUwMywgNTA5LCA1MjEsIDUyMywgNTQxLCA1NDcsIDU1NywgNTYzLCA1NjksIDU3MSwgNTc3LCA1ODcsIDU5MywgNTk5LCA2MDEsIDYwNywgNjEzLCA2MTcsIDYxOSwgNjMxLCA2NDEsIDY0MywgNjQ3LCA2NTMsIDY1OSwgNjYxLCA2NzMsIDY3NywgNjgzLCA2OTEsIDcwMSwgNzA5LCA3MTksIDcyNywgNzMzLCA3MzksIDc0MywgNzUxLCA3NTcsIDc2MSwgNzY5LCA3NzMsIDc4NywgNzk3LCA4MDksIDgxMSwgODIxLCA4MjMsIDgyNywgODI5LCA4MzksIDg1MywgODU3LCA4NTksIDg2MywgODc3LCA4ODEsIDg4MywgODg3LCA5MDcsIDkxMSwgOTE5LCA5MjksIDkzNywgOTQxLCA5NDcsIDk1MywgOTY3LCA5NzEsIDk3NywgOTgzLCA5OTEsIDk5NywgMTAwOSwgMTAxMywgMTAxOSwgMTAyMSwgMTAzMSwgMTAzMywgMTAzOSwgMTA0OSwgMTA1MSwgMTA2MSwgMTA2MywgMTA2OSwgMTA4NywgMTA5MSwgMTA5MywgMTA5NywgMTEwMywgMTEwOSwgMTExNywgMTEyMywgMTEyOSwgMTE1MSwgMTE1MywgMTE2MywgMTE3MSwgMTE4MSwgMTE4NywgMTE5MywgMTIwMSwgMTIxMywgMTIxNywgMTIyMywgMTIyOSwgMTIzMSwgMTIzNywgMTI0OSwgMTI1OSwgMTI3NywgMTI3OSwgMTI4MywgMTI4OSwgMTI5MSwgMTI5NywgMTMwMSwgMTMwMywgMTMwNywgMTMxOSwgMTMyMSwgMTMyNywgMTM2MSwgMTM2NywgMTM3MywgMTM4MSwgMTM5OSwgMTQwOSwgMTQyMywgMTQyNywgMTQyOSwgMTQzMywgMTQzOSwgMTQ0NywgMTQ1MSwgMTQ1MywgMTQ1OSwgMTQ3MSwgMTQ4MSwgMTQ4MywgMTQ4NywgMTQ4OSwgMTQ5MywgMTQ5OSwgMTUxMSwgMTUyMywgMTUzMSwgMTU0MywgMTU0OSwgMTU1MywgMTU1OSwgMTU2NywgMTU3MSwgMTU3OSwgMTU4MywgMTU5NywgMTYwMSwgMTYwNywgMTYwOSwgMTYxMywgMTYxOSwgMTYyMSwgMTYyNywgMTYzNywgMTY1NywgMTY2MywgMTY2NywgMTY2OSwgMTY5MywgMTY5NywgMTY5OSwgMTcwOSwgMTcyMSwgMTcyMywgMTczMywgMTc0MSwgMTc0NywgMTc1MywgMTc1OSwgMTc3NywgMTc4MywgMTc4NywgMTc4OSwgMTgwMSwgMTgxMSwgMTgyMywgMTgzMSwgMTg0NywgMTg2MSwgMTg2NywgMTg3MSwgMTg3MywgMTg3NywgMTg3OSwgMTg4OSwgMTkwMSwgMTkwNywgMTkxMywgMTkzMSwgMTkzMywgMTk0OSwgMTk1MSwgMTk3MywgMTk3OSwgMTk4NywgMTk5MywgMTk5NywgMTk5OSwgMjAwMywgMjAxMSwgMjAxNywgMjAyNywgMjAyOSwgMjAzOSwgMjA1MywgMjA2MywgMjA2OSwgMjA4MSwgMjA4MywgMjA4NywgMjA4OSwgMjA5OSwgMjExMSwgMjExMywgMjEyOSwgMjEzMSwgMjEzNywgMjE0MSwgMjE0MywgMjE1MywgMjE2MSwgMjE3OSwgMjIwMywgMjIwNywgMjIxMywgMjIyMSwgMjIzNywgMjIzOSwgMjI0MywgMjI1MSwgMjI2NywgMjI2OSwgMjI3MywgMjI4MSwgMjI4NywgMjI5MywgMjI5NywgMjMwOSwgMjMxMSwgMjMzMywgMjMzOSwgMjM0MSwgMjM0NywgMjM1MSwgMjM1NywgMjM3MSwgMjM3NywgMjM4MSwgMjM4MywgMjM4OSwgMjM5MywgMjM5OSwgMjQxMSwgMjQxNywgMjQyMywgMjQzNywgMjQ0MSwgMjQ0NywgMjQ1OSwgMjQ2NywgMjQ3MywgMjQ3NywgMjUwMywgMjUyMSwgMjUzMSwgMjUzOSwgMjU0MywgMjU0OSwgMjU1MSwgMjU1NywgMjU3OSwgMjU5MSwgMjU5MywgMjYwOSwgMjYxNywgMjYyMSwgMjYzMywgMjY0NywgMjY1NywgMjY1OSwgMjY2MywgMjY3MSwgMjY3NywgMjY4MywgMjY4NywgMjY4OSwgMjY5MywgMjY5OSwgMjcwNywgMjcxMSwgMjcxMywgMjcxOSwgMjcyOSwgMjczMSwgMjc0MSwgMjc0OSwgMjc1MywgMjc2NywgMjc3NywgMjc4OSwgMjc5MSwgMjc5NywgMjgwMSwgMjgwMywgMjgxOSwgMjgzMywgMjgzNywgMjg0MywgMjg1MSwgMjg1NywgMjg2MSwgMjg3OSwgMjg4NywgMjg5NywgMjkwMywgMjkwOSwgMjkxNywgMjkyNywgMjkzOSwgMjk1MywgMjk1NywgMjk2MywgMjk2OSwgMjk3MSwgMjk5OSwgMzAwMSwgMzAxMSwgMzAxOSwgMzAyMywgMzAzNywgMzA0MSwgMzA0OSwgMzA2MSwgMzA2NywgMzA3OSwgMzA4MywgMzA4OSwgMzEwOSwgMzExOSwgMzEyMSwgMzEzNywgMzE2MywgMzE2NywgMzE2OSwgMzE4MSwgMzE4NywgMzE5MSwgMzIwMywgMzIwOSwgMzIxNywgMzIyMSwgMzIyOSwgMzI1MSwgMzI1MywgMzI1NywgMzI1OSwgMzI3MSwgMzI5OSwgMzMwMSwgMzMwNywgMzMxMywgMzMxOSwgMzMyMywgMzMyOSwgMzMzMSwgMzM0MywgMzM0NywgMzM1OSwgMzM2MSwgMzM3MSwgMzM3MywgMzM4OSwgMzM5MSwgMzQwNywgMzQxMywgMzQzMywgMzQ0OSwgMzQ1NywgMzQ2MSwgMzQ2MywgMzQ2NywgMzQ2OSwgMzQ5MSwgMzQ5OSwgMzUxMSwgMzUxNywgMzUyNywgMzUyOSwgMzUzMywgMzUzOSwgMzU0MSwgMzU0NywgMzU1NywgMzU1OSwgMzU3MSwgMzU4MSwgMzU4MywgMzU5MywgMzYwNywgMzYxMywgMzYxNywgMzYyMywgMzYzMSwgMzYzNywgMzY0MywgMzY1OSwgMzY3MSwgMzY3MywgMzY3NywgMzY5MSwgMzY5NywgMzcwMSwgMzcwOSwgMzcxOSwgMzcyNywgMzczMywgMzczOSwgMzc2MSwgMzc2NywgMzc2OSwgMzc3OSwgMzc5MywgMzc5NywgMzgwMywgMzgyMSwgMzgyMywgMzgzMywgMzg0NywgMzg1MSwgMzg1MywgMzg2MywgMzg3NywgMzg4MSwgMzg4OSwgMzkwNywgMzkxMSwgMzkxNywgMzkxOSwgMzkyMywgMzkyOSwgMzkzMSwgMzk0MywgMzk0NywgMzk2NywgMzk4OSwgNDAwMSwgNDAwMywgNDAwNywgNDAxMywgNDAxOSwgNDAyMSwgNDAyNywgNDA0OSwgNDA1MSwgNDA1NywgNDA3MywgNDA3OSwgNDA5MSwgNDA5MywgNDA5OSwgNDExMSwgNDEyNywgNDEyOSwgNDEzMywgNDEzOSwgNDE1MywgNDE1NywgNDE1OSwgNDE3NywgNDIwMSwgNDIxMSwgNDIxNywgNDIxOSwgNDIyOSwgNDIzMSwgNDI0MSwgNDI0MywgNDI1MywgNDI1OSwgNDI2MSwgNDI3MSwgNDI3MywgNDI4MywgNDI4OSwgNDI5NywgNDMyNywgNDMzNywgNDMzOSwgNDM0OSwgNDM1NywgNDM2MywgNDM3MywgNDM5MSwgNDM5NywgNDQwOSwgNDQyMSwgNDQyMywgNDQ0MSwgNDQ0NywgNDQ1MSwgNDQ1NywgNDQ2MywgNDQ4MSwgNDQ4MywgNDQ5MywgNDUwNywgNDUxMywgNDUxNywgNDUxOSwgNDUyMywgNDU0NywgNDU0OSwgNDU2MSwgNDU2NywgNDU4MywgNDU5MSwgNDU5NywgNDYwMywgNDYyMSwgNDYzNywgNDYzOSwgNDY0MywgNDY0OSwgNDY1MSwgNDY1NywgNDY2MywgNDY3MywgNDY3OSwgNDY5MSwgNDcwMywgNDcyMSwgNDcyMywgNDcyOSwgNDczMywgNDc1MSwgNDc1OSwgNDc4MywgNDc4NywgNDc4OSwgNDc5MywgNDc5OSwgNDgwMSwgNDgxMywgNDgxNywgNDgzMSwgNDg2MSwgNDg3MSwgNDg3NywgNDg4OSwgNDkwMywgNDkwOSwgNDkxOSwgNDkzMSwgNDkzMywgNDkzNywgNDk0MywgNDk1MSwgNDk1NywgNDk2NywgNDk2OSwgNDk3MywgNDk4NywgNDk5MywgNDk5OSwgNTAwMywgNTAwOSwgNTAxMSwgNTAyMSwgNTAyMywgNTAzOSwgNTA1MSwgNTA1OSwgNTA3NywgNTA4MSwgNTA4NywgNTA5OSwgNTEwMSwgNTEwNywgNTExMywgNTExOSwgNTE0NywgNTE1MywgNTE2NywgNTE3MSwgNTE3OSwgNTE4OSwgNTE5NywgNTIwOSwgNTIyNywgNTIzMSwgNTIzMywgNTIzNywgNTI2MSwgNTI3MywgNTI3OSwgNTI4MSwgNTI5NywgNTMwMywgNTMwOSwgNTMyMywgNTMzMywgNTM0NywgNTM1MSwgNTM4MSwgNTM4NywgNTM5MywgNTM5OSwgNTQwNywgNTQxMywgNTQxNywgNTQxOSwgNTQzMSwgNTQzNywgNTQ0MSwgNTQ0MywgNTQ0OSwgNTQ3MSwgNTQ3NywgNTQ3OSwgNTQ4MywgNTUwMSwgNTUwMywgNTUwNywgNTUxOSwgNTUyMSwgNTUyNywgNTUzMSwgNTU1NywgNTU2MywgNTU2OSwgNTU3MywgNTU4MSwgNTU5MSwgNTYyMywgNTYzOSwgNTY0MSwgNTY0NywgNTY1MSwgNTY1MywgNTY1NywgNTY1OSwgNTY2OSwgNTY4MywgNTY4OSwgNTY5MywgNTcwMSwgNTcxMSwgNTcxNywgNTczNywgNTc0MSwgNTc0MywgNTc0OSwgNTc3OSwgNTc4MywgNTc5MSwgNTgwMSwgNTgwNywgNTgxMywgNTgyMSwgNTgyNywgNTgzOSwgNTg0MywgNTg0OSwgNTg1MSwgNTg1NywgNTg2MSwgNTg2NywgNTg2OSwgNTg3OSwgNTg4MSwgNTg5NywgNTkwMywgNTkyMywgNTkyNywgNTkzOSwgNTk1MywgNTk4MSwgNTk4NywgNjAwNywgNjAxMSwgNjAyOSwgNjAzNywgNjA0MywgNjA0NywgNjA1MywgNjA2NywgNjA3MywgNjA3OSwgNjA4OSwgNjA5MSwgNjEwMSwgNjExMywgNjEyMSwgNjEzMSwgNjEzMywgNjE0MywgNjE1MSwgNjE2MywgNjE3MywgNjE5NywgNjE5OSwgNjIwMywgNjIxMSwgNjIxNywgNjIyMSwgNjIyOSwgNjI0NywgNjI1NywgNjI2MywgNjI2OSwgNjI3MSwgNjI3NywgNjI4NywgNjI5OSwgNjMwMSwgNjMxMSwgNjMxNywgNjMyMywgNjMyOSwgNjMzNywgNjM0MywgNjM1MywgNjM1OSwgNjM2MSwgNjM2NywgNjM3MywgNjM3OSwgNjM4OSwgNjM5NywgNjQyMSwgNjQyNywgNjQ0OSwgNjQ1MSwgNjQ2OSwgNjQ3MywgNjQ4MSwgNjQ5MSwgNjUyMSwgNjUyOSwgNjU0NywgNjU1MSwgNjU1MywgNjU2MywgNjU2OSwgNjU3MSwgNjU3NywgNjU4MSwgNjU5OSwgNjYwNywgNjYxOSwgNjYzNywgNjY1MywgNjY1OSwgNjY2MSwgNjY3MywgNjY3OSwgNjY4OSwgNjY5MSwgNjcwMSwgNjcwMywgNjcwOSwgNjcxOSwgNjczMywgNjczNywgNjc2MSwgNjc2MywgNjc3OSwgNjc4MSwgNjc5MSwgNjc5MywgNjgwMywgNjgyMywgNjgyNywgNjgyOSwgNjgzMywgNjg0MSwgNjg1NywgNjg2MywgNjg2OSwgNjg3MSwgNjg4MywgNjg5OSwgNjkwNywgNjkxMSwgNjkxNywgNjk0NywgNjk0OSwgNjk1OSwgNjk2MSwgNjk2NywgNjk3MSwgNjk3NywgNjk4MywgNjk5MSwgNjk5NywgNzAwMSwgNzAxMywgNzAxOSwgNzAyNywgNzAzOSwgNzA0MywgNzA1NywgNzA2OSwgNzA3OSwgNzEwMywgNzEwOSwgNzEyMSwgNzEyNywgNzEyOSwgNzE1MSwgNzE1OSwgNzE3NywgNzE4NywgNzE5MywgNzIwNywgNzIxMSwgNzIxMywgNzIxOSwgNzIyOSwgNzIzNywgNzI0MywgNzI0NywgNzI1MywgNzI4MywgNzI5NywgNzMwNywgNzMwOSwgNzMyMSwgNzMzMSwgNzMzMywgNzM0OSwgNzM1MSwgNzM2OSwgNzM5MywgNzQxMSwgNzQxNywgNzQzMywgNzQ1MSwgNzQ1NywgNzQ1OSwgNzQ3NywgNzQ4MSwgNzQ4NywgNzQ4OSwgNzQ5OSwgNzUwNywgNzUxNywgNzUyMywgNzUyOSwgNzUzNywgNzU0MSwgNzU0NywgNzU0OSwgNzU1OSwgNzU2MSwgNzU3MywgNzU3NywgNzU4MywgNzU4OSwgNzU5MSwgNzYwMywgNzYwNywgNzYyMSwgNzYzOSwgNzY0MywgNzY0OSwgNzY2OSwgNzY3MywgNzY4MSwgNzY4NywgNzY5MSwgNzY5OSwgNzcwMywgNzcxNywgNzcyMywgNzcyNywgNzc0MSwgNzc1MywgNzc1NywgNzc1OSwgNzc4OSwgNzc5MywgNzgxNywgNzgyMywgNzgyOSwgNzg0MSwgNzg1MywgNzg2NywgNzg3MywgNzg3NywgNzg3OSwgNzg4MywgNzkwMSwgNzkwNywgNzkxOSwgNzkyNywgNzkzMywgNzkzNywgNzk0OSwgNzk1MSwgNzk2MywgNzk5MywgODAwOSwgODAxMSwgODAxNywgODAzOSwgODA1MywgODA1OSwgODA2OSwgODA4MSwgODA4NywgODA4OSwgODA5MywgODEwMSwgODExMSwgODExNywgODEyMywgODE0NywgODE2MSwgODE2NywgODE3MSwgODE3OSwgODE5MSwgODIwOSwgODIxOSwgODIyMSwgODIzMSwgODIzMywgODIzNywgODI0MywgODI2MywgODI2OSwgODI3MywgODI4NywgODI5MSwgODI5MywgODI5NywgODMxMSwgODMxNywgODMyOSwgODM1MywgODM2MywgODM2OSwgODM3NywgODM4NywgODM4OSwgODQxOSwgODQyMywgODQyOSwgODQzMSwgODQ0MywgODQ0NywgODQ2MSwgODQ2NywgODUwMSwgODUxMywgODUyMSwgODUyNywgODUzNywgODUzOSwgODU0MywgODU2MywgODU3MywgODU4MSwgODU5NywgODU5OSwgODYwOSwgODYyMywgODYyNywgODYyOSwgODY0MSwgODY0NywgODY2MywgODY2OSwgODY3NywgODY4MSwgODY4OSwgODY5MywgODY5OSwgODcwNywgODcxMywgODcxOSwgODczMSwgODczNywgODc0MSwgODc0NywgODc1MywgODc2MSwgODc3OSwgODc4MywgODgwMywgODgwNywgODgxOSwgODgyMSwgODgzMSwgODgzNywgODgzOSwgODg0OSwgODg2MSwgODg2MywgODg2NywgODg4NywgODg5MywgODkyMywgODkyOSwgODkzMywgODk0MSwgODk1MSwgODk2MywgODk2OSwgODk3MSwgODk5OSwgOTAwMSwgOTAwNywgOTAxMSwgOTAxMywgOTAyOSwgOTA0MSwgOTA0MywgOTA0OSwgOTA1OSwgOTA2NywgOTA5MSwgOTEwMywgOTEwOSwgOTEyNywgOTEzMywgOTEzNywgOTE1MSwgOTE1NywgOTE2MSwgOTE3MywgOTE4MSwgOTE4NywgOTE5OSwgOTIwMywgOTIwOSwgOTIyMSwgOTIyNywgOTIzOSwgOTI0MSwgOTI1NywgOTI3NywgOTI4MSwgOTI4MywgOTI5MywgOTMxMSwgOTMxOSwgOTMyMywgOTMzNywgOTM0MSwgOTM0MywgOTM0OSwgOTM3MSwgOTM3NywgOTM5MSwgOTM5NywgOTQwMywgOTQxMywgOTQxOSwgOTQyMSwgOTQzMSwgOTQzMywgOTQzNywgOTQzOSwgOTQ2MSwgOTQ2MywgOTQ2NywgOTQ3MywgOTQ3OSwgOTQ5MSwgOTQ5NywgOTUxMSwgOTUyMSwgOTUzMywgOTUzOSwgOTU0NywgOTU1MSwgOTU4NywgOTYwMSwgOTYxMywgOTYxOSwgOTYyMywgOTYyOSwgOTYzMSwgOTY0MywgOTY0OSwgOTY2MSwgOTY3NywgOTY3OSwgOTY4OSwgOTY5NywgOTcxOSwgOTcyMSwgOTczMywgOTczOSwgOTc0MywgOTc0OSwgOTc2NywgOTc2OSwgOTc4MSwgOTc4NywgOTc5MSwgOTgwMywgOTgxMSwgOTgxNywgOTgyOSwgOTgzMywgOTgzOSwgOTg1MSwgOTg1NywgOTg1OSwgOTg3MSwgOTg4MywgOTg4NywgOTkwMSwgOTkwNywgOTkyMywgOTkyOSwgOTkzMSwgOTk0MSwgOTk0OSwgOTk2NywgOTk3M107XHJcbiAgICAgICAgaWYobmIgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmltZXM7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBwcmltZXMuc2xpY2UoMCxNYXRoLm1heChwcmltZXMubGVuZ3RoLG5iKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR3JlYXQgQ29tbW9uIERpdmlzb3JcclxuICAgICAqIEBwYXJhbSB2YWx1ZXMgOiBudW1iZXIgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnY2QoLi4udmFsdWVzOm51bWJlcltdKTpudW1iZXJ7XHJcbiAgICAgICAgLy8gRGVmaW5lIHRoZSBnY2QgZm9yIHR3byBudW1iZXJcclxuICAgICAgICBsZXQgZ2NkMiA9IGZ1bmN0aW9uKGE6bnVtYmVyLGI6bnVtYmVyKTpudW1iZXJ7XHJcbiAgICAgICAgICAgIGlmKGI9PT0wKXtyZXR1cm4gYTt9XHJcbiAgICAgICAgICAgIHJldHVybiBnY2QyKGIsIGElYik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IGc6bnVtYmVyID0gMSxcclxuICAgICAgICAgICAgaTpudW1iZXIgPSAyO1xyXG5cclxuICAgICAgICAvLyBOb3RoaW5nIGlzIGdpdmVuXHJcbiAgICAgICAgaWYodmFsdWVzLmxlbmd0aD09PTApe3JldHVybiAxO31cclxuICAgICAgICAvLyBPbmx5IG9uZSBudW1iZXIgaXMgZ2l2ZW5cclxuICAgICAgICBpZih2YWx1ZXMubGVuZ3RoPT09MSl7XHJcbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBudW1iZXIgaXMgemVyb1xyXG4gICAgICAgICAgICBpZih2YWx1ZXNbMF09PT0wKXtyZXR1cm4gMTt9XHJcbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgbnVtYmVyXHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXNbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBXZSBoYXZlIGF0IGxlYXN0IDIgbnVtYmVycy5cclxuICAgICAgICBnID0gZ2NkMih2YWx1ZXNbMF0sdmFsdWVzWzFdKTtcclxuXHJcbiAgICAgICAgLy8gVGhlIGdjZCBvZiB0aGUgdHdvIGZpcnN0IHZhbHVlIGlzIG9uZSA/IEl0J3MgYWxyZWFkeSBmaW5pc2hlZC5cclxuICAgICAgICBpZihnPT09MSl7cmV0dXJuIDE7fVxyXG5cclxuICAgICAgICAvLyBUaGUgY3VycmVudCBnY2QgaXNuJ3Qgb25lLiBDb250aW51ZSB3aXRoIGFsbCBuZXh0IHZhbHVlcy5cclxuICAgICAgICBmb3IoaT0yOyBpPHZhbHVlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGcgPSBnY2QyKGcsIHZhbHVlc1tpXSk7XHJcbiAgICAgICAgICAgIC8vIEVzY2FwZSBpZiBnY2QgaXMgYWxyZWFkeSBvbmUuXHJcbiAgICAgICAgICAgIGlmKGc9PT0xKXticmVhazt9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExlYXN0IENvbW1vbiBNdWx0aXBsZVxyXG4gICAgICogQHBhcmFtIHZhbHVlczogbGlzdCBvZiBudW1iZXJzXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBsY20oLi4udmFsdWVzOm51bWJlcltdKTpudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24oYSxiKXtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKGEgKiBiIC8gTnVtZXJpYy5nY2QoYSwgYikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmFuZG9tIGJvb2xlYW4gd2l0aCBhIHBlcmNlbnQgcmF0aW9cclxuICAgICAqIEBwYXJhbSBwZXJjZW50XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyByYW5kb21Cb29sKHBlcmNlbnQ6bnVtYmVyPTAuNSk6Ym9vbGVhbntcclxuICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKTxwZXJjZW50P3RydWU6ZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSYW5kb20gaW50ZWdlciBiZXR3ZWVuIHR3byB2YWx1ZXMuXHJcbiAgICAgKiBAcGFyYW0gYSAobnVtYmVyKSA6IEZyb20gdGhpcyB2YWx1ZSB0byB0aGUgc2Vjb25kIHZhbHVlLiBJZiB0aGUgc2Vjb25kIGlzIG9tbWl0ZWQsIHRoaXMgdmFsdWUgaXMgdGhlIG1heCB2YWx1ZS5cclxuICAgICAqIEBwYXJhbSBiIChudW1iZXIpIDogVG8gdGhpcyB2YWx1ZS4gSWYgdGhpcyBpcyBvbW1pdGVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmFuZG9tSW50KGE6bnVtYmVyLCBiPzpudW1iZXIpOm51bWJlcntcclxuICAgICAgICBpZihiPT09dW5kZWZpbmVkKXtyZXR1cm4gTnVtZXJpYy5yYW5kb21JbnQoMCxhKTt9XHJcblxyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoYiAtIGEgKyAxKSArIGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmFuZG9tIGludGVnZXIgYmV0d2VlbiAtbWF4IGFuZCBtYXggdmFsdWUuXHJcbiAgICAgKiBAcGFyYW0gbWF4IChudW1iZXIpIDogZGV0ZXJtaW5lIHRoZSBsaW1pdHMuXHJcbiAgICAgKiBAcGFyYW0gemVybyAoYm9vbCkgOiBkZXRlcm1pbmUgaWYgemVybyBpcyBhbGxvd2VkIG9yIG5vdC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHJhbmRvbUludFN5bShtYXg6bnVtYmVyLCB6ZXJvPzpib29sZWFuKTpudW1iZXJ7XHJcbiAgICAgICAgaWYoemVybz09PWZhbHNlKXtcclxuICAgICAgICAgICAgcmV0dXJuIE51bWVyaWMucmFuZG9tQm9vbCgpP3RoaXMucmFuZG9tSW50KDEsbWF4KTotdGhpcy5yYW5kb21JbnQoMSxtYXgpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtZXJpYy5yYW5kb21JbnQoLW1heCwgbWF4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge051bWVyaWN9IGZyb20gXCIuL251bWVyaWNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGcmFjdGlvbiB7XHJcbiAgICBwcml2YXRlIF9udW1lcmF0b3I6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2Rlbm9taW5hdG9yOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gMTtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IDE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaW1wbGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGlmIGl0J3MgYSBmcmFjdGlvblxyXG4gICAgICovXHJcbiAgICBpc0ZyYWN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBmcmFjdGlvbiB0byB6ZXJvXHJcbiAgICAgKi9cclxuICAgIHplcm8gPSAoKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIHRoaXMuX251bWVyYXRvciA9IDA7XHJcbiAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSAxO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2UgYSBjbG9uZSBvZiB0aGUgY3VycmVudCBmcmFjdGlvblxyXG4gICAgICovXHJcbiAgICBjbG9uZSA9ICgpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgbGV0IEYgPSBuZXcgRnJhY3Rpb24oKTtcclxuICAgICAgICBGLm51bWVyYXRvciA9ICt0aGlzLl9udW1lcmF0b3I7XHJcbiAgICAgICAgRi5kZW5vbWluYXRvciA9ICt0aGlzLl9kZW5vbWluYXRvcjtcclxuICAgICAgICByZXR1cm4gRjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSB0aGUgdmFsdWUgdG8gZ2V0IHRoZSBudW1lcmF0b3IgYW5kIGRlbm9taW5hdG9yXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgOiBudW1iZXIgdG8gcGFyc2UgdG8gZ2V0IHRoZSBmcmFjdGlvblxyXG4gICAgICogQHBhcmFtIHBlcmlvZGljIChvcHRpb25hbHxudW1iZXIpIDogbGVuZ3RoIG9mIHRoZSBwZXJpb2RpYyBwYXJ0OiAyLjMzMzMzMyA9PiAxXHJcbiAgICAgKi9cclxuICAgIHBhcnNlID0gKHZhbHVlOiBhbnksIHBlcmlvZGljPzogbnVtYmVyKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIGxldCBTOiBzdHJpbmdbXTtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxyXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgdGhlIHN0aW5nIHZhbHVlIGluIHR3byBwYXJ0czogTnVtZXJhdG9yL0Rlbm9tbmlhdG9yXHJcbiAgICAgICAgICAgICAgICBTID0gdmFsdWUuc3BsaXQoJy8nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoUy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBObyBkaXZpZGUgc2lnblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlKCtTWzBdKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoUy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBPbmUgZGl2aWRlIHNpZ25lXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2hlY2sgaWYgdGhlIGRlbm9taW5hdG9yIGlzIHplcm9cclxuICAgICAgICAgICAgICAgICAgICBpZiAoU1sxXSA9PT0gJzAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX251bWVyYXRvciA9IE5hTjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX251bWVyYXRvciA9ICtTWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9ICtTWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTW9yZSB0aGFuIG9uZSBkaXZpZGUgc2lnbiA/XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gTmFOO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzU2FmZUludGVnZXIodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGdpdmVuIHZhbHVlIGlzIGFuIGludGVnZXJcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IDE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBnaXZlbiB2YWx1ZSBpcyBhIGZsb2F0IG51bWJlclxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIG51bWJlciBvZiBkZWNpbWFscyBhZnRlciB0aGUgZmxvYXQgc2lnblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwOiBudW1iZXIgPSAodmFsdWUudG9TdHJpbmcoKSkuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSB0aGUgZmxvYXQgbnVtYmVyIGluIHR3byBpbnRlZ2VyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcmlvZGljID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gdmFsdWUgKiBNYXRoLnBvdygxMCwgcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gTWF0aC5wb3coMTAsIHApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoTnVtYmVyLmlzU2FmZUludGVnZXIocGVyaW9kaWMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX251bWVyYXRvciA9IHZhbHVlICogTWF0aC5wb3coMTAsIHApIC0gTWF0aC5mbG9vcih2YWx1ZSAqIE1hdGgucG93KDEwLCBwIC0gcGVyaW9kaWMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZW5vbWluYXRvciA9IE1hdGgucG93KDEwLCBwKSAtIE1hdGgucG93KDEwLCBwIC0gcGVyaW9kaWMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgcGFyc2VCeUludGVnZXIgPSAobnVtOiBudW1iZXIsIGRlbj86IG51bWJlcik6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzU2FmZUludGVnZXIobnVtKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9udW1lcmF0b3IgPSBudW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkZW4gIT09IHVuZGVmaW5lZCAmJiBOdW1iZXIuaXNTYWZlSW50ZWdlcihkZW4pKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gZGVuO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVkdWNlIHRoZSBmcmFjdGlvbiBhbmQgbWFrZSB0aGUgZGVub21pbmF0b3IgcG9zaXR2ZVxyXG4gICAgICovXHJcbiAgICByZWR1Y2UgPSAoKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIGxldCBnID0gTnVtZXJpYy5nY2QodGhpcy5fbnVtZXJhdG9yLCB0aGlzLl9kZW5vbWluYXRvcik7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gdGhpcy5fbnVtZXJhdG9yIC8gZztcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IHRoaXMuX2Rlbm9taW5hdG9yIC8gZztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2Rlbm9taW5hdG9yIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IC10aGlzLl9kZW5vbWluYXRvcjtcclxuICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gLXRoaXMuX251bWVyYXRvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEhlbHBlciBmdW5jdGlvblxyXG4gICAgaW52YWxpZCA9ICgpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgbGV0IEYgPSBuZXcgRnJhY3Rpb24oKTtcclxuICAgICAgICBGLl9udW1lcmF0b3IgPSBOYU47XHJcbiAgICAgICAgRi5fZGVub21pbmF0b3IgPSAxO1xyXG4gICAgICAgIHJldHVybiBGO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbmZpbml0ZSA9ICgpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgbGV0IEYgPSBuZXcgRnJhY3Rpb24oKTtcclxuICAgICAgICBGLl9udW1lcmF0b3IgPSBJbmZpbml0eTtcclxuICAgICAgICBGLl9kZW5vbWluYXRvciA9IDE7XHJcbiAgICAgICAgcmV0dXJuIEY7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE1hdGhlbWF0aWNhbCBvcGVyYXRpb25zIG9uIGZyYWN0aW9uLlxyXG4gICAgb3Bwb3NlZCA9ICgpOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gLXRoaXMuX251bWVyYXRvcjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgbXVsdGlwbHkgPSAoRjogRnJhY3Rpb24pOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gdGhpcy5fbnVtZXJhdG9yICogRi5udW1lcmF0b3I7XHJcbiAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSB0aGlzLl9kZW5vbWluYXRvciAqIEYuZGVub21pbmF0b3I7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhbXBsaWZ5ID0gKGs6IG51bWJlcik6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzU2FmZUludGVnZXIoaykpIHtcclxuICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yICo9IGs7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rlbm9taW5hdG9yICo9IGs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBkaXZpZGUgPSAoRjogRnJhY3Rpb24pOiBGcmFjdGlvbiA9PiB7XHJcbiAgICAgICAgaWYgKEYubnVtZXJhdG9yID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRnJhY3Rpb24oKS5pbmZpbml0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IE46IG51bWJlciA9ICt0aGlzLl9udW1lcmF0b3IsXHJcbiAgICAgICAgICAgIEQ6IG51bWJlciA9ICt0aGlzLl9kZW5vbWluYXRvcjtcclxuXHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gTiAqIEYuZGVub21pbmF0b3I7XHJcbiAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSBEICogRi5udW1lcmF0b3I7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGFkZCA9IChGOiBGcmFjdGlvbik6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBsZXQgTjogbnVtYmVyID0gdGhpcy5fbnVtZXJhdG9yLFxyXG4gICAgICAgICAgICBEOiBudW1iZXIgPSB0aGlzLl9kZW5vbWluYXRvcjtcclxuXHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gTiAqIEYuZGVub21pbmF0b3IgKyBGLm51bWVyYXRvciAqIEQ7XHJcbiAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSBEICogRi5kZW5vbWluYXRvcjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHN1YnN0cmFjdCA9IChGOiBGcmFjdGlvbik6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGQoRi5jbG9uZSgpLm9wcG9zZWQoKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBwb3dlciBvZiBhIGZyYWN0aW9uLlxyXG4gICAgICogQHBhcmFtIHAgKGludGVnZXIpIFRoZSBpbnRlZ2VyIHBvd2VyIHZhbHVlIChwb3NpdGl2ZSBvciBuZWdhdGl2ZSlcclxuICAgICAqL1xyXG4gICAgcG93ID0gKHA6IG51bWJlcik6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKHApKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmludmFsaWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZWR1Y2UoKTtcclxuXHJcbiAgICAgICAgaWYgKHAgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX251bWVyYXRvciA9IHRoaXMuX251bWVyYXRvciAqKiBwO1xyXG4gICAgICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IHRoaXMuX2Rlbm9taW5hdG9yICoqIHA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gdGhpcy5fZGVub21pbmF0b3IgKiogcDtcclxuICAgICAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSB0aGlzLl9udW1lcmF0b3IgKiogcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgZXhhY3Qgc3F1YXJlIHJvb3QgZnJhY3Rpb24gYXMgbnVtZXJhdG9yIFxcc3FydHtzfSAvIGRlbm9taW5hdG9yXHJcbiAgICAgKi9cclxuICAgIHNxcnQgPSAoKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8vIFRPRE86IEZyYWN0aW9uIG50aHJvb3RcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGFic29sdXRlIHZhbHVlIG9mIHRoZSBmcmFjdGlvblxyXG4gICAgICovXHJcbiAgICBhYnMgPSAoKTogRnJhY3Rpb24gPT4ge1xyXG4gICAgICAgIHRoaXMuX251bWVyYXRvciA9IE1hdGguYWJzKHRoaXMuX251bWVyYXRvcik7XHJcbiAgICAgICAgdGhpcy5fZGVub21pbmF0b3IgPSBNYXRoLmFicyh0aGlzLl9kZW5vbWluYXRvcik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBzaWduIG9mIHRoZSBmcmFjdGlvbjogMSBpZiBwb3NpdGl2ZSwgLTEgaWYgbmVnYXRpdmVcclxuICAgICAqL1xyXG4gICAgc2lnbiA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fbnVtZXJhdG9yICogdGhpcy5fZGVub21pbmF0b3IgPiAwKSA/IDEgOiAtMTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdHdvIGZyYWN0aW9ucyBhcmUgZXF1YWxzXHJcbiAgICAgKiBAcGFyYW0gRlxyXG4gICAgICovXHJcbiAgICBpc0VxdWFsID0gKEY6IEZyYWN0aW9uKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgbGV0IEYyOiBGcmFjdGlvbiA9IEYuY2xvbmUoKS5yZWR1Y2UoKSxcclxuICAgICAgICAgICAgRjE6IEZyYWN0aW9uID0gdGhpcy5jbG9uZSgpLnJlZHVjZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gKEYxLm51bWVyYXRvciA9PT0gRjIubnVtZXJhdG9yICYmIEYxLmRlbm9taW5hdG9yID09PSBGMi5kZW5vbWluYXRvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlIGZyYWN0aW9ucyBhcmUgZXF1YWxzLlxyXG4gICAgICogQHBhcmFtIEZcclxuICAgICAqL1xyXG4gICAgYXJlRXF1YWxzID0gKC4uLkY6IEZyYWN0aW9uW10pOiBib29sZWFuID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEYubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRXF1YWwoRltpXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wYXJlIHRoZSBjdXJyZW50IGZyYWN0aW9uIHdpdGggYW5vdGhlciBmcmFjdGlvblxyXG4gICAgICogQHBhcmFtIEYgKEZyYWN0aW9uKSBUaGUgZnJhY3Rpb24gdG8gY29tcGFyZVxyXG4gICAgICogQHBhcmFtIHNpZ24gKHN0cmluZ3wgZGVmYXVsdCBpcyA9KTogYXV0aG9yaXplZCB2YWx1ZXM6ID0sIDwsIDw9LCA+LCA+PSB3aXRoIHNvbWUgdmFyaWF0aW9ucy5cclxuICAgICAqL1xyXG4gICAgY29tcGFyZSA9IChGOiBGcmFjdGlvbiwgc2lnbj86IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmIChzaWduID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2lnbiA9ICc9JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoc2lnbikge1xyXG4gICAgICAgICAgICBjYXNlICc+JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlID4gRi52YWx1ZTtcclxuICAgICAgICAgICAgY2FzZSBcIj49XCIgfHwgXCI9PlwiIHx8IFwiZ2VxXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA+PSBGLnZhbHVlO1xyXG4gICAgICAgICAgICBjYXNlIFwiPFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPCBGLnZhbHVlO1xyXG4gICAgICAgICAgICBjYXNlIFwiPD1cIiB8fCBcIj0+XCIgfHwgXCJsZXFcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlIDw9IEYudmFsdWU7XHJcbiAgICAgICAgICAgIGNhc2UgXCI9XCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0VxdWFsKEYpO1xyXG4gICAgICAgICAgICBjYXNlIFwiPD5cIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0VxdWFsKEYpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBDb21wYXJlIHNob3J0Y3V0c1xyXG4gICAgbGVzc2VyID0gKHRoYW46IEZyYWN0aW9uKTogQm9vbGVhbiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZSh0aGFuLCAnPCcpO1xyXG4gICAgfTtcclxuICAgIGxlcSA9ICh0aGFuOiBGcmFjdGlvbik6IEJvb2xlYW4gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUodGhhbiwgJzw9Jyk7XHJcbiAgICB9O1xyXG4gICAgZ3JlYXRlciA9ICh0aGFuOiBGcmFjdGlvbik6IEJvb2xlYW4gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUodGhhbiwgJz4nKTtcclxuICAgIH07XHJcbiAgICBnZXEgPSAodGhhbjogRnJhY3Rpb24pOiBCb29sZWFuID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKHRoYW4sICc+PScpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpc0luZmluaXR5ID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW1lcmF0b3IgPT09IEluZmluaXR5O1xyXG4gICAgfTtcclxuICAgIGlzRmluaXRlID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5pc0luZmluaXR5KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFNldHRlclxyXG4gICAgc2V0IG51bWVyYXRvcih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fbnVtZXJhdG9yID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGRlbm9taW5hdG9yKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9kZW5vbWluYXRvciA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldHRlclxyXG4gICAgZ2V0IG51bWVyYXRvcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW1lcmF0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRlbm9taW5hdG9yKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlbm9taW5hdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2YWx1ZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW1lcmF0b3IgLyB0aGlzLl9kZW5vbWluYXRvcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEaXNwbGF5IGdldHRlclxyXG4gICAgZ2V0IGRpc3BsYXkoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVub21pbmF0b3IgPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuX251bWVyYXRvcn1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9udW1lcmF0b3J9LyR7dGhpcy5fZGVub21pbmF0b3J9YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZyYWMoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVub21pbmF0b3IgPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuX251bWVyYXRvcn1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgXFxcXGZyYWN7ICR7dGhpcy5fbnVtZXJhdG9yfSB9eyAke3RoaXMuX2Rlbm9taW5hdG9yfSB9YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRmcmFjKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Rlbm9taW5hdG9yID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9udW1lcmF0b3J9YDtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX251bWVyYXRvciA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGBcXFxcZGZyYWN7ICR7dGhpcy5fbnVtZXJhdG9yfSB9eyAke3RoaXMuX2Rlbm9taW5hdG9yfSB9YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYC1cXFxcZGZyYWN7ICR7TWF0aC5hYnModGhpcy5fbnVtZXJhdG9yKX0gfXsgJHt0aGlzLl9kZW5vbWluYXRvcn0gfWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtGcmFjdGlvbn0gZnJvbSBcIi4vZnJhY3Rpb25cIjtcclxuaW1wb3J0IHtOdW1lcmljfSBmcm9tIFwiLi9udW1lcmljXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9ub20ge1xyXG4gICAgcHJpdmF0ZSBfY29lZmZpY2llbnQ6IEZyYWN0aW9uO1xyXG4gICAgcHJpdmF0ZSBfbGl0ZXJhbDogeyBbS2V5OiBzdHJpbmddOiBudW1iZXIgfTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9jb2VmZmljaWVudCA9IG5ldyBGcmFjdGlvbigpLnplcm8oKTtcclxuICAgICAgICB0aGlzLl9saXRlcmFsID0ge307XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgb2JqZWN0IGlzIGEgbW9ub20uXHJcbiAgICAgKi9cclxuICAgIGlzTW9ub20oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBhIHN0cmluZyB0byBhIG1vbm9tLiBUaGUgc3RyaW5nIG1heSBpbmNsdWRlIGZyYWN0aW9uLlxyXG4gICAgICogQHBhcmFtIGlucHV0U3RyXHJcbiAgICAgKi9cclxuICAgIHBhcnNlID0gKGlucHV0U3RyOiBzdHJpbmcpOiBNb25vbSA9PiB7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBsaXRlcmFsIHBhcnQuXHJcbiAgICAgICAgdGhpcy5saXRlcmFsU3RyID0gaW5wdXRTdHI7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgY29lZmZpY2llbnRcclxuICAgICAgICB0aGlzLl9jb2VmZmljaWVudCA9IG5ldyBGcmFjdGlvbigpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgWy4uLmlucHV0U3RyLnJlcGxhY2UoLyhbYS16XSl8KFxcXlsrLV0/WzAtOV0rKS9nLCAnLCcpLnNwbGl0KCcsJyldKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZSB2YWx1ZSBpcyBlbXB0eS5cclxuICAgICAgICAgICAgaWYgKHYudHJpbSgpID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIE11bHRpcGxlIHRoZSBjdXJyZW50IGNvZWZmaWNpZW50IGJ5IHRoZSBuZXcgZm91bmQgdmFsdWUuXHJcbiAgICAgICAgICAgIHRoaXMuX2NvZWZmaWNpZW50Lm11bHRpcGx5KG5ldyBGcmFjdGlvbigpLnBhcnNlKHYudHJpbSgpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZXRhdGUgYSB6ZXJvIHZhbHVlIG1vbm9tXHJcbiAgICAgKi9cclxuICAgIHplcm8gPSAoKTogTW9ub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX2NvZWZmaWNpZW50ID0gbmV3IEZyYWN0aW9uKCkuemVybygpO1xyXG4gICAgICAgIHRoaXMuX2xpdGVyYWwgPSB7fTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9uZSB0aGUgY3VycmVudCBNb25vbS5cclxuICAgICAqL1xyXG4gICAgY2xvbmUgPSAoKTogTW9ub20gPT4ge1xyXG4gICAgICAgIGxldCBGOiBNb25vbSA9IG5ldyBNb25vbSgpO1xyXG5cclxuICAgICAgICBGLmNvZWZmaWNpZW50ID0gdGhpcy5fY29lZmZpY2llbnQuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgLy8gQ29weSB0aGUgbGl0ZXJhbCBwYXJ0cy5cclxuICAgICAgICBmb3IgKGxldCBrIGluIHRoaXMuX2xpdGVyYWwpIHtcclxuICAgICAgICAgICAgRi5sZXR0ZXIoaywgdGhpcy5fbGl0ZXJhbFtrXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBGO1xyXG4gICAgfTtcclxuXHJcbiAgICByYW5kb20gPSAobGV0dGVyczogc3RyaW5nID0gJ3gnLCBkZWdyZWU6IG51bWJlciA9IDEsIHdpdGhGcmFjdGlvbjogYm9vbGVhbiA9IGZhbHNlLCBhbGxvd1plcm86IGJvb2xlYW4gPSB0cnVlKTogTW9ub20gPT4ge1xyXG4gICAgICAgIHRoaXMuY29lZmZpY2llbnQucGFyc2VCeUludGVnZXIoTnVtZXJpYy5yYW5kb21JbnRTeW0oMTAsIGFsbG93WmVybyksICh3aXRoRnJhY3Rpb24pID8gTnVtZXJpYy5yYW5kb21JbnQoMSwgMTApIDogMSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IEwgb2YgbGV0dGVycy5zcGxpdCgnJykpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXR0ZXIoTCwgKGxldHRlcnMubGVuZ3RoID4gMSkgPyBOdW1lcmljLnJhbmRvbUludChkZWdyZWUpIDogZGVncmVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgcG93ZXIgb2YgYSBwYXJ0aWN1bGFyIGxldHRlclxyXG4gICAgICogQHBhcmFtIGxldHRlciAoc3RyaW5nKSBMZXR0ZXIgdG8gY2hhbmdlXHJcbiAgICAgKiBAcGFyYW0gcG93IChudW1iZXIpIFBvd2VyIG9mIHRoZSBsZXR0ZXIgKG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlci5cclxuICAgICAqL1xyXG4gICAgbGV0dGVyID0gKGxldHRlcjogc3RyaW5nLCBwb3c6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgICAgIC8vIElmIHRoZSBwb3dlciBpcyBub3QgbGVnYWwgb3IgaXMgemVybywgcmVtb3ZlIHRoZSBsZXR0ZXIgZnJvbSB0aGUgZGljdFxyXG4gICAgICAgIGlmIChwb3cgPD0gMCB8fCAhTnVtYmVyLmlzU2FmZUludGVnZXIocG93KSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGl0ZXJhbFtsZXR0ZXJdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXRlcmFsW2xldHRlcl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9saXRlcmFsW2xldHRlcl0gPSBwb3c7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBNYXRoZW1hdGljYWwgb3BlcmF0aW9uc1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdHdvIG1vbm9tcyBhcmUgc2ltaWxhclxyXG4gICAgICogQHBhcmFtIE1cclxuICAgICAqL1xyXG4gICAgaXNTYW1lQXMgPSAoTTogTW9ub20pOiBib29sZWFuID0+IHtcclxuICAgICAgICAvLyBHZXQgdGhlIGxpc3Qgb2YgYWxsIGtleXMgZnJvbSBib3RoIG1vbm9tcy5cclxuICAgICAgICBsZXQgTTE6IHN0cmluZ1tdID0gT2JqZWN0LmtleXModGhpcy5fbGl0ZXJhbCksXHJcbiAgICAgICAgICAgIE0yOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKE0ubGl0ZXJhbCksXHJcbiAgICAgICAgICAgIEs6IHN0cmluZ1tdID0gTTEuY29uY2F0KE0yLmZpbHRlcigoaXRlbSkgPT4gTTEuaW5kZXhPZihpdGVtKSA8IDApKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIEspIHtcclxuICAgICAgICAgICAgLy8gVGhlIGxldHRlciBpcyBub3QgYXZhaWxhYmxlIGluIG9uZSBvZiB0aGUgbW9ub21cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xpdGVyYWxba2V5XSA9PT0gdW5kZWZpbmVkIHx8IE0ubGl0ZXJhbFtrZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUaGUgbGV0dGVyIGRvZXMgbm90IGhhdmUgdGhlIHNhbWUgcG93ZXIgaW4gZWFjaCBtb25vbXMuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9saXRlcmFsW2tleV0gIT09IE0ubGl0ZXJhbFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFsbCBhcmUgcG9zaXRpdmUgY2hlY2sgLSB0aGUgbW9ub21zIGFyZSB0aGUgc2FtZXMuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgbXVsdGlwbGUgbW9ub21zIGFyZSBzaW1pbGFyXHJcbiAgICAgKiBAcGFyYW0gTVxyXG4gICAgICovXHJcbiAgICBhcmVTYW1lQXMgPSAoLi4uTTogTW9ub21bXSk6IGJvb2xlYW4gPT4ge1xyXG4gICAgICAgIGxldCByZXN1bHQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBDaGVjayBhbGwgbW9ub21zIGlmIHRoZXkgYXJlIHRoZSBzYW1lIGFzIHRoZSBcInRoaXNcIiBvbmUuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1NhbWVBcyhNW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBbGwgY2hlY2sgcGFzc2VkIC0+IGFsbCB0aGUgbW9ub21zIGFyZSBzaW1pbGFyLlxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdHdvIG1vbm9tcyBhcmUgZXF1YWxzXHJcbiAgICAgKiBAcGFyYW0gTVxyXG4gICAgICovXHJcbiAgICBpc0VxdWFsID0gKE06IE1vbm9tKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzU2FtZUFzKE0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvZWZmaWNpZW50LmlzRXF1YWwoTS5jb2VmZmljaWVudCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgbXV0bGlwbGUgbW9ub21zIGFyZSBlcXVhbHNcclxuICAgICAqIEBwYXJhbSBNXHJcbiAgICAgKi9cclxuICAgIGFyZUVxdWFscyA9ICguLi5NOiBNb25vbVtdKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgLy8gVGhleSBhcmUgbm90IHNpbWlsYXIuXHJcbiAgICAgICAgaWYgKCF0aGlzLmFyZVNhbWVBcyguLi5NKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBhbGwgY29lZmZpY2llbnQuIFRoZXkgbXVzdCBiZSBlcXVhbHMuXHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiBNKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fY29lZmZpY2llbnQuaXNFcXVhbChtLmNvZWZmaWNpZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBbGwgY2hlY2tzIHBhc3NlZC5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGRlZ3JlZSBvZiBhIG1vbm9tLiBJZiBubyBsZXR0ZXIgaXMgZ2l2ZW4sIHRoZSByZXN1bHQgd2lsbCBiZSB0aGUgZ2xvYmFsIGRlZ3JlZS5cclxuICAgICAqIEBwYXJhbSBsZXR0ZXIgKHN0cmluZykgTGV0dGVyIHRvIGdldCB0byBkZWdyZWUgKHBvd2VyKVxyXG4gICAgICovXHJcbiAgICBkZWdyZWUgPSAobGV0dGVyPzogc3RyaW5nKTogbnVtYmVyID0+IHtcclxuICAgICAgICBpZiAoT2JqZWN0LmVudHJpZXModGhpcy5fbGl0ZXJhbCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxldHRlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIE5vdCBsZXR0ZXIgZ2l2ZW4gLT4gd2UgZ2V0IHRoZSBnbG9iYWwgbW9ub20gZGVncmVlIChzdW0gb2YgYWxsIHRoZSBsZXR0ZXJzKS5cclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5fbGl0ZXJhbCkucmVkdWNlKCh0LCBuKSA9PiB0ICsgbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gQSBsZXR0ZXIgaXMgZ2l2ZW4gLT4gZ2V0IHRoZSBjb3JyZXNwb25kaW5nIHBvd2VyLlxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGl0ZXJhbFtsZXR0ZXJdID09PSB1bmRlZmluZWQgPyAwIDogdGhpcy5fbGl0ZXJhbFtsZXR0ZXJdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIG9wcG9zZWRcclxuICAgICAqIFJldHVybnMgYSBtb25vbS5cclxuICAgICAqL1xyXG4gICAgb3Bwb3NlZCA9ICgpOiBNb25vbSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY29lZmZpY2llbnQub3Bwb3NlZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhbGwgc2ltaWxhciBtb25vbXMuIElmIHRoZXkgYXJlbid0IHNpbWlsYXIsIHRoZXkgYXJlIHNpbXBseSBza2lwcGVkLlxyXG4gICAgICogQHBhcmFtIE0gKE1vbm9tW10pIFRoZSBtb25vbXMgdG8gYWRkLlxyXG4gICAgICovXHJcbiAgICBhZGQgPSAoLi4uTTogTW9ub21bXSk6IE1vbm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIE0pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lQXMobSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvZWZmaWNpZW50LmFkZChtLmNvZWZmaWNpZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBZGQ6IElzIG5vdCBzaW1pbGFyOiAnLCBtLmRpc3BsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1YnN0cmFjdCBtdWx0aXBsZSBtb25vbXNcclxuICAgICAqIEBwYXJhbSBNIChNb25vbVtdKSBUaGUgbW9ub21zIHRvIHN1YnN0cmFjdFxyXG4gICAgICovXHJcbiAgICBzdWJzdHJhY3QgPSAoLi4uTTogTW9ub21bXSk6IE1vbm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIE0pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTYW1lQXMobSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvZWZmaWNpZW50LmFkZChtLmNvZWZmaWNpZW50LmNsb25lKCkub3Bwb3NlZCgpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzdHJhY3Q6IElzIG5vdCBzaW1pbGFyOiAnLCBtLmRpc3BsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE11bHRpcGxlIG11bHRpcGxlIG1vbm9tcyB0byB0aGUgY3VycmVudCBtb25vbVxyXG4gICAgICogQHBhcmFtIE0gKE1vbm9tW10pIFRoZSBtb25vbXMgdG8gbXVsdGlwbHkgdG8uXHJcbiAgICAgKi9cclxuICAgIG11bHRpcGx5ID0gKC4uLk06IE1vbm9tW10pOiBNb25vbSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiBNKSB7XHJcbiAgICAgICAgICAgIC8vIE11bHRpcGx5IHRoZSBjb2VmZmljaWVudC5cclxuICAgICAgICAgICAgdGhpcy5fY29lZmZpY2llbnQubXVsdGlwbHkobS5jb2VmZmljaWVudCk7XHJcbiAgICAgICAgICAgIC8vIE11bHRpcGx5IHRoZSBsaXRlcmFsIHBhcnRzLlxyXG4gICAgICAgICAgICBmb3IgKGxldCBsZXR0ZXIgaW4gbS5saXRlcmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXRlcmFsW2xldHRlcl0gPSAodGhpcy5fbGl0ZXJhbFtsZXR0ZXJdID09PSB1bmRlZmluZWQpID8gbS5saXRlcmFsW2xldHRlcl0gOiB0aGlzLl9saXRlcmFsW2xldHRlcl0gKyBtLmxpdGVyYWxbbGV0dGVyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIHhtdWx0aXBseSA9IChNMTogTW9ub20sIE0yOiBNb25vbSk6IE1vbm9tID0+IHtcclxuICAgICAgICByZXR1cm4gTTEuY2xvbmUoKS5tdWx0aXBseShNMik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEaXZpZGUgdGhlIGN1cnJlbnQgbW9ub21zIGJ5IG11bHRpcGxlIG1vbm9tc1xyXG4gICAgICogQHBhcmFtIE0gKE1vbm9tW10pXHJcbiAgICAgKi9cclxuICAgIGRpdmlkZSA9ICguLi5NOiBNb25vbVtdKTogTW9ub20gPT4ge1xyXG4gICAgICAgIC8vIERlcGVuZGluZyBvbiB0aGUgZ2l2ZW4gdmFsdWUsIGNob29zZSB0aGUgY3VycmVudCBpdGVtXHJcbiAgICAgICAgZm9yIChsZXQgdiBvZiBNKSB7XHJcbiAgICAgICAgICAgIC8vIERpdmlkZSB0aGUgY29lZmZpY2llbnRcclxuICAgICAgICAgICAgdGhpcy5fY29lZmZpY2llbnQuZGl2aWRlKHYuY29lZmZpY2llbnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gU3Vic3RyYWN0IHRoZSBwb3dlciB2YWx1ZXNcclxuICAgICAgICAgICAgZm9yIChsZXQgbGV0dGVyIGluIHYubGl0ZXJhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGl0ZXJhbFtsZXR0ZXJdID0gKHRoaXMuX2xpdGVyYWxbbGV0dGVyXSA9PT0gdW5kZWZpbmVkKSA/IC12LmxpdGVyYWxbbGV0dGVyXSA6IHRoaXMuX2xpdGVyYWxbbGV0dGVyXSAtIHYubGl0ZXJhbFtsZXR0ZXJdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBwb3dlciBvZiBhIHBhcnRpY3VsYXIgbGV0dGVyIGlzIHplb3IsIGRlbGV0ZSBpdCBmcm9tIHRoZSBsaXRlcmFsIHBhcnQuLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xpdGVyYWxbbGV0dGVyXSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9saXRlcmFsW2xldHRlcl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBwb3cgb2YgYSBtb25vbS5cclxuICAgICAqIEBwYXJhbSBuYiAobnVtYmVyKSA6IE1hdGhlbWF0aWNhbCBwb3dcclxuICAgICAqL1xyXG4gICAgcG93ID0gKG5iOiBudW1iZXIpOiBNb25vbSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY29lZmZpY2llbnQucG93KG5iKTtcclxuICAgICAgICBmb3IgKGxldCBsZXR0ZXIgaW4gdGhpcy5fbGl0ZXJhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9saXRlcmFsW2xldHRlcl0gKj0gbmI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBldmFsdWF0ZSA9ICh2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogRnJhY3Rpb24gfSk6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBsZXQgciA9IHRoaXMuY29lZmZpY2llbnQuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgTCBpbiB0aGlzLl9saXRlcmFsKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbTF0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGcmFjdGlvbigpLnplcm8oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByLm11bHRpcGx5KHZhbHVlc1tMXS5jbG9uZSgpLnBvdyh0aGlzLl9saXRlcmFsW0xdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBTZXR0ZXJcclxuICAgIHNldCBjb2VmZmljaWVudChGOiBGcmFjdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2NvZWZmaWNpZW50ID0gRjtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbGl0ZXJhbChMOiB7IFtLZXk6IHN0cmluZ106IG51bWJlciB9KSB7XHJcbiAgICAgICAgdGhpcy5fbGl0ZXJhbCA9IEw7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGxpdGVyYWxTdHIoaW5wdXRTdHI6IHN0cmluZykge1xyXG4gICAgICAgIC8vIE1hdGNoIGFsbCB4Xm5cclxuICAgICAgICBmb3IgKGNvbnN0IHYgb2YgWy4uLmlucHV0U3RyLm1hdGNoQWxsKC8oW2Etel0pXFxeKFsrLV0/WzAtOV0rKS9nKV0pIHtcclxuICAgICAgICAgICAgaWYgKCEodlsxXSBpbiB0aGlzLl9saXRlcmFsKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGl0ZXJhbFt2WzFdXSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbGl0ZXJhbFt2WzFdXSArPSArdlsyXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTWF0Y2ggYWxsIHNpbmdsZSBsZXR0ZXJzXHJcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIFsuLi5pbnB1dFN0ci5tYXRjaEFsbCgvKFthLXpdKD8hXFxeKSkvZyldKSB7XHJcbiAgICAgICAgICAgIGlmICghKHZbMV0gaW4gdGhpcy5fbGl0ZXJhbCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xpdGVyYWxbdlsxXV0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xpdGVyYWxbdlsxXV0gKz0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0dGVyXHJcbiAgICBnZXQgY29lZmZpY2llbnQoKTogRnJhY3Rpb24ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb2VmZmljaWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGl0ZXJhbCgpOiB7IFtLZXk6IHN0cmluZ106IG51bWJlciB9IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGl0ZXJhbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNaZXJvKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb2VmZmljaWVudC52YWx1ZSA9PT0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZGlzcGxheSBnZXR0ZXIgaXMgdG8gYmUgdXNlZCBpbiB0aGUgcG9seW5vbSBkaXNwbGF5IGdldHRlclxyXG4gICAgICovXHJcbiAgICBnZXQgZGlzcGxheSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBMOiBzdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBsZXR0ZXIgaW4gdGhpcy5fbGl0ZXJhbCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGl0ZXJhbFtsZXR0ZXJdICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBMICs9IGAke2xldHRlcn1gO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xpdGVyYWxbbGV0dGVyXSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBMICs9IGBeJHt0aGlzLl9saXRlcmFsW2xldHRlcl19YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKEwgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIC8vIE5vIGxldHRlciAtIG1lYW5zIGl0J3Mgb25seSBhIG51bWJlciAhXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb2VmZmljaWVudC52YWx1ZSAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5fY29lZmZpY2llbnQuZGlzcGxheX1gO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NvZWZmaWNpZW50LnZhbHVlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jb2VmZmljaWVudC52YWx1ZSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgLSR7TH1gO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2NvZWZmaWNpZW50LnZhbHVlID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJzAnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuX2NvZWZmaWNpZW50LmRpc3BsYXl9JHtMfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRleCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBMOiBzdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBsZXR0ZXIgaW4gdGhpcy5fbGl0ZXJhbCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGl0ZXJhbFtsZXR0ZXJdICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBMICs9IGAke2xldHRlcn1gO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xpdGVyYWxbbGV0dGVyXSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBMICs9IGBeJHt0aGlzLl9saXRlcmFsW2xldHRlcl19YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKEwgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIC8vIE5vIGxldHRlciAtIG1lYW5zIGl0J3Mgb25seSBhIG51bWJlciAhXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb2VmZmljaWVudC52YWx1ZSAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5fY29lZmZpY2llbnQuZGZyYWN9YDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb2VmZmljaWVudC52YWx1ZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEw7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY29lZmZpY2llbnQudmFsdWUgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYC0ke0x9YDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9jb2VmZmljaWVudC52YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcwJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLl9jb2VmZmljaWVudC5kZnJhY30ke0x9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgU2h1dGluZ3lhcmQge1xyXG4gICAgcHJpdmF0ZSBfcnBuOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW4gaWYgdGhlIHRva2VuIGlzIGEgZGVmaW5lZCBvcGVyYXRpb25cclxuICAgICAqIERlZmluZWQgb3BlcmF0aW9uczogKyAtICogLyBeIHNpbiBjb3MgdGFuXHJcbiAgICAgKiBAcGFyYW0gdG9rZW5cclxuICAgICAqL1xyXG4gICAgaXNPcGVyYXRpb24odG9rZW46IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0b2tlblswXS5tYXRjaCgvW1xcK1xcLVxcKlxcL1xcXl0vZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0b2tlbi5tYXRjaCgvXnNpbnxjb3N8dGFuL2cpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBuZXh0IHRva2VuIHRvIGFuYWx5c2UuXHJcbiAgICAgKiBAcGFyYW0gZXhwciAoc3RyaW5nKSBFeHByZXNzaW9uIHRvIGFuYWx5c2VcclxuICAgICAqIEBwYXJhbSBzdGFydCAobnVtYmVyKSBDVXJyZW50IHBvc2l0aW9uIGluIHRoZSBleHByIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgTmV4dFRva2VuKGV4cHI6IHN0cmluZywgc3RhcnQ6IG51bWJlcik6IFtzdHJpbmcsIG51bWJlciwgc3RyaW5nXSB7XHJcbiAgICAgICAgbGV0IHRva2VuTWF0Y2g6IHN0cmluZ1tdLCB0b2tlbjogc3RyaW5nID0gJycsIHRva2VuVHlwZTogc3RyaW5nID0gJ21vbm9tJztcclxuXHJcbiAgICAgICAgLy8gRGV0ZWN0IGEgZnJhY3Rpb24gbW9ub21zIG9yIHJldHVybiBlbXB0eSBhcnJheVxyXG4gICAgICAgIHRva2VuTWF0Y2ggPSAoZXhwci5zdWJzdHIoc3RhcnQpLm1hdGNoKC9eWzAtOVxcL2EtelxcXl0rL2cpKSB8fCBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRva2VuTWF0Y2gubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0b2tlbiA9IHRva2VuTWF0Y2hbMF07XHJcbiAgICAgICAgICAgIHRva2VuVHlwZSA9ICdtb25vbSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEl0J3MgYW4gb3BlcmF0aW9uICFcclxuICAgICAgICBlbHNlIGlmIChleHByW3N0YXJ0XS5tYXRjaCgvW1xcK1xcLVxcKlxcL1xcXl0vZykpIHtcclxuICAgICAgICAgICAgdG9rZW4gPSBleHByW3N0YXJ0XTtcclxuICAgICAgICAgICAgdG9rZW5UeXBlID0gJ29wZXJhdGlvbic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEl0J3MgYW4gb3BlbmluZyBwYXJlbnRoZXNlXHJcbiAgICAgICAgZWxzZSBpZiAoZXhwcltzdGFydF0gPT09ICcoJykge1xyXG4gICAgICAgICAgICB0b2tlbiA9ICcoJztcclxuICAgICAgICAgICAgdG9rZW5UeXBlID0gJygnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJdCdzIGEgY2xvc2luZyBwYXJlbnRoZXNlXHJcbiAgICAgICAgZWxzZSBpZiAoZXhwcltzdGFydF0gPT09ICcpJykge1xyXG4gICAgICAgICAgICB0b2tlbiA9ICcpJztcclxuICAgICAgICAgICAgdG9rZW5UeXBlID0gJyknO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJdCdzIGFuIGFyZ3VtZW50IHNlcGFyYXRvciBmb3IgYSBmdW5jdGlvblxyXG4gICAgICAgIGVsc2UgaWYgKGV4cHJbc3RhcnRdID09PSAnLCcpIHtcclxuICAgICAgICAgICAgdG9rZW4gPSAnLCc7XHJcbiAgICAgICAgICAgIHRva2VuVHlwZSA9ICdmdW5jdGlvbi1hcmd1bWVudCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEl0J3MgYSAoYmFzaWMpIHRyaWdvbm9tZXRyeSBmdW5jdGlvblxyXG4gICAgICAgIGVsc2UgaWYgKGV4cHIubWF0Y2goL14oc2lufGNvc3x0YW4pL2cpKSB7XHJcbiAgICAgICAgICAgIHRva2VuID0gJyknO1xyXG4gICAgICAgICAgICB0b2tlblR5cGUgPSAnKSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUT0RPOiBBZGQgb3RoZXIgZnVuY3Rpb25zICFcclxuXHJcbiAgICAgICAgLy8gSXQncyBhIG1vbm9tLlxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBBY3R1YWxseSwgbmVnYXRpdmUgZXhwb3NhbnQgYXJlbid0IHN1cHBvcnRlZC5cclxuICAgICAgICAgICAgLy8gdG9rZW4gPSAoZXhwci5zdWJzdHIoc3RhcnQpLm1hdGNoKC9eW1xcZGEtelxcXl0rL2cpWzBdKXx8Jyc7XHJcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5NYXRjaFswXTtcclxuICAgICAgICAgICAgdG9rZW5UeXBlID0gJ21vbm9tJztcclxuXHJcbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRva2VuID0gZXhwcltzdGFydF07XHJcbiAgICAgICAgICAgICAgICB0b2tlblR5cGUgPSAnbW9ub20nO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NIVVRJTkcgWUFSRCAtIE5FWFQgVE9LRU46IGVycm9yIGF0ICcsIHN0YXJ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRva2VuLCBzdGFydCArIHRva2VuLmxlbmd0aCwgdG9rZW5UeXBlKTtcclxuICAgICAgICByZXR1cm4gW3Rva2VuLCBzdGFydCArIHRva2VuLmxlbmd0aCwgdG9rZW5UeXBlXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNhbml0aXplIGFuIGV4cHJlc3Npb24gYnkgYWRkaW5nIG1pc3NpbmcgY29tbW9uIG9wZXJhdGlvbiAobXVsdGlwbGljYXRpb24gYmV0d2VlbiBwYXJlbnRoZXNlc2VzKVxyXG4gICAgICogQHBhcmFtIGV4cHJcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBVbmlmb3JtaXplcihleHByOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBleHByMjtcclxuICAgICAgICAvLyBSZXBsYWNlIG1pc3NpbmcgbXVsdGlwbGljYXRpb24gYmV0d2VlbiB0d28gcGFyZW50aGVzZVxyXG4gICAgICAgIGV4cHIyID0gZXhwci5yZXBsYWNlKC9cXClcXCgvZywgJykqKCcpO1xyXG5cclxuICAgICAgICAvLyBSZXBsYWNlIG1pc3NpbmcgbXVsdGlwbGljYXRpb24gYmV0d2VlbiBudW1iZXIgb3IgbGV0dGVyIGFuZCBwYXJlbnRoZXNlLlxyXG4gICAgICAgIGV4cHIyID0gZXhwcjIucmVwbGFjZSgvKFtcXGRhLXpdKShcXCgpL2csIFwiJDEqJDJcIik7XHJcbiAgICAgICAgZXhwcjIgPSBleHByMi5yZXBsYWNlKC8oXFwpKShbXFxkYS16XSkvZywgXCIkMSokMlwiKTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogbXVzdCBoYW5kbGUgdHJpZ29ub21ldHJpYyBvciBhbnkgb3RoZXIgZnVuY3Rpb24gaWRlbnRpZmllclxyXG4gICAgICAgIHJldHVybiBleHByMjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIGFuIGV4cHJlc3Npb24gdXNpbmcgdGhlIHNodXR0aW5nIHlhcmQgdHJlZSBhbGdvcml0aG1zXHJcbiAgICAgKiBAcGFyYW0gZXhwciAoc3RyaW5nKSBFeHByZXNzaW9uIHRvIGFuYWx5c2VcclxuICAgICAqIFJldHVybnMgYSBSUE4gbGlzdCBvZiBpdGVtcy5cclxuICAgICAqL1xyXG4gICAgcGFyc2UoZXhwcjogc3RyaW5nKTogU2h1dGluZ3lhcmQge1xyXG4gICAgICAgIGxldCBvdXRRdWV1ZTogc3RyaW5nW10gPSBbXSxcclxuICAgICAgICAgICAgb3BTdGFjazogc3RyaW5nW10gPSBbXSxcclxuICAgICAgICAgICAgcHJlY2VkZW5jZTogeyBbS2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHtcclxuICAgICAgICAgICAgICAgICdeJzogNCxcclxuICAgICAgICAgICAgICAgICcqJzogMyxcclxuICAgICAgICAgICAgICAgICcvJzogMyxcclxuICAgICAgICAgICAgICAgICcrJzogMixcclxuICAgICAgICAgICAgICAgICctJzogMlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhc3NvY2lhdGl2ZTogeyBbS2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcclxuICAgICAgICAgICAgICAgICdeJzogJ3JpZ2h0JyxcclxuICAgICAgICAgICAgICAgICcqJzogJ2xlZnQnLFxyXG4gICAgICAgICAgICAgICAgJy8nOiAnbGVmdCcsXHJcbiAgICAgICAgICAgICAgICAnKyc6ICdsZWZ0JyxcclxuICAgICAgICAgICAgICAgICctJzogJ2xlZnQnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRva2VuOiBzdHJpbmcgPSAnJyxcclxuICAgICAgICAgICAgdG9rZW5Qb3M6IG51bWJlciA9IDAsXHJcbiAgICAgICAgICAgIHRva2VuVHlwZTogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgIGV4cHIgPSB0aGlzLlVuaWZvcm1pemVyKGV4cHIpO1xyXG5cclxuICAgICAgICBsZXQgc2VjdXJpdHlMb29wTHZsMSA9IDUwLFxyXG4gICAgICAgICAgICBzZWN1cml0eUxvb3BMdmwyX2RlZmF1bHQgPSA1MCxcclxuICAgICAgICAgICAgc2VjdXJpdHlMb29wTHZsMjtcclxuXHJcbiAgICAgICAgd2hpbGUgKHRva2VuUG9zIDwgZXhwci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgc2VjdXJpdHlMb29wTHZsMS0tO1xyXG4gICAgICAgICAgICBpZiAoc2VjdXJpdHlMb29wTHZsMSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NFQ1VSSVRZIExFVkVMIDEgRVhJVCcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgbmV4dCB0b2tlbiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgbmV3IChlbmRpbmcpIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIFt0b2tlbiwgdG9rZW5Qb3MsIHRva2VuVHlwZV0gPSB0aGlzLk5leHRUb2tlbihleHByLCB0b2tlblBvcyk7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHRva2VuVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbW9ub20nOlxyXG4gICAgICAgICAgICAgICAgICAgIG91dFF1ZXVlLnB1c2godG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnb3BlcmF0aW9uJzpcclxuICAgICAgICAgICAgICAgICAgICAvL0lmIHRoZSB0b2tlbiBpcyBhbiBvcGVyYXRvciwgbzEsIHRoZW46XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9wVG9wID0gb3BTdGFja1tvcFN0YWNrLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHlMb29wTHZsMiA9ICtzZWN1cml0eUxvb3BMdmwyX2RlZmF1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3doaWxlIHRoZXJlIGlzIGFuIG9wZXJhdG9yIHRva2VuIG8yLCBhdCB0aGUgdG9wIG9mIHRoZSBvcGVyYXRvciBzdGFjayBhbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG9wVG9wIGluIGFzc29jaWF0aXZlICYmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2VpdGhlciBvMSBpcyBsZWZ0LWFzc29jaWF0aXZlIGFuZCBpdHMgcHJlY2VkZW5jZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhhdCBvZiBvMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYXNzb2NpYXRpdmVbdG9rZW5dID09PSAnbGVmdCcgJiYgcHJlY2VkZW5jZVt0b2tlbl0gPD0gcHJlY2VkZW5jZVtvcFRvcF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL29yIG8xIGlzIHJpZ2h0IGFzc29jaWF0aXZlLCBhbmQgaGFzIHByZWNlZGVuY2UgbGVzcyB0aGFuIHRoYXQgb2YgbzIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFzc29jaWF0aXZlW3Rva2VuXSA9PT0gJ3JpZ2h0JyAmJiBwcmVjZWRlbmNlW3Rva2VuXSA8IHByZWNlZGVuY2Vbb3BUb3BdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU2VjdXJpdHkgZXhpdCAhICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUxvb3BMdmwyLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VjdXJpdHlMb29wTHZsMiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTRUNVUklUWSBMRVZFTCAyIE9QRVJBVElPTiBFWElUJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBvcGVyYXRpb24gdG8gdGhlIHF1ZXVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRRdWV1ZS5wdXNoKChvcFN0YWNrLnBvcCgpKSB8fCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBuZXh0IG9wZXJhdGlvbiBvbiB0b3Agb2YgdGhlIFN0YWNrLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BUb3AgPSBvcFN0YWNrW29wU3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hdCB0aGUgZW5kIG9mIGl0ZXJhdGlvbiBwdXNoIG8xIG9udG8gdGhlIG9wZXJhdG9yIHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgb3BTdGFjay5wdXNoKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3RyaWdvJzpcclxuICAgICAgICAgICAgICAgICAgICBvcFN0YWNrLnB1c2godG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24tYXJndW1lbnQnOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGNoZWNrIGlmIHRoZSBvcFN0YWNrIGV4aXN0LlxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5TG9vcEx2bDIgPSArc2VjdXJpdHlMb29wTHZsMl9kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvcFN0YWNrW29wU3RhY2subGVuZ3RoIC0gMV0gIT09ICcoJyAmJiBvcFN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHlMb29wTHZsMi0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VjdXJpdHlMb29wTHZsMiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NFQ1VSSVRZIExFVkVMIDIgRlVOQ1RJT04gQVJHVU1FTlQgRVhJVCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dFF1ZXVlLnB1c2goKG9wU3RhY2sucG9wKCkpIHx8ICcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICcoJzpcclxuICAgICAgICAgICAgICAgICAgICBvcFN0YWNrLnB1c2godG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnKSc6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHlMb29wTHZsMiA9ICtzZWN1cml0eUxvb3BMdmwyX2RlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9VbnRpbCB0aGUgdG9rZW4gYXQgdGhlIHRvcCBvZiB0aGUgc3RhY2sgaXMgYSBsZWZ0IHBhcmVudGhlc2lzLCBwb3Agb3BlcmF0b3JzIG9mZiB0aGUgc3RhY2sgb250byB0aGUgb3V0cHV0IHF1ZXVlLlxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvcFN0YWNrW29wU3RhY2subGVuZ3RoIC0gMV0gIT09ICcoJyAmJiBvcFN0YWNrLmxlbmd0aCA+IDEgLypNYXliZSB6ZXJvICE/ICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5TG9vcEx2bDItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlY3VyaXR5TG9vcEx2bDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTRUNVUklUWSBMRVZFTCAyIENMT1NJTkcgUEFSRU5USEVTRSBFWElUJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0UXVldWUucHVzaCgob3BTdGFjay5wb3AoKSkgfHwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9Qb3AgdGhlIGxlZnQgcGFyZW50aGVzaXMgZnJvbSB0aGUgc3RhY2ssIGJ1dCBub3Qgb250byB0aGUgb3V0cHV0IHF1ZXVlLlxyXG4gICAgICAgICAgICAgICAgICAgIG9wU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIHRoZW9yeSwgZXZlcnl0aGluZyBzaG91bGQgYmUgaGFuZGxlZC5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgU0hVVElORyBZQVJEOiAke3Rva2VuVHlwZX0gOiAke3Rva2VufSBgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gT3V0cHV0XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG91dFF1ZXVlLmNvbmNhdChvcFN0YWNrLnJldmVyc2UoKSkuam9pbihcIiBcIikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cob3V0UXVldWUuY29uY2F0KG9wU3RhY2sucmV2ZXJzZSgpKSk7XHJcbiAgICAgICAgdGhpcy5fcnBuID0gb3V0UXVldWUuY29uY2F0KG9wU3RhY2sucmV2ZXJzZSgpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEdldHRlclxyXG4gICAgZ2V0IHJwbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcnBuO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuIiwiaW1wb3J0IHtNb25vbX0gZnJvbSBcIi4vbW9ub21cIjtcclxuaW1wb3J0IHtTaHV0aW5neWFyZH0gZnJvbSBcIi4vc2h1dGluZ3lhcmRcIjtcclxuaW1wb3J0IHtGcmFjdGlvbn0gZnJvbSBcIi4vZnJhY3Rpb25cIjtcclxuaW1wb3J0IHtOdW1lcmljfSBmcm9tIFwiLi9udW1lcmljXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9seW5vbSB7XHJcbiAgICBwcml2YXRlIF9tb25vbXM6IE1vbm9tW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fbW9ub21zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhpcyBjbGFzcyBpcyBhIFBvbHlub20uXHJcbiAgICAgKi9cclxuICAgIGlzUG9seW5vbSA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSBhIHN0cmluZyB0byBhIHBvbHlub20uXHJcbiAgICAgKiBAcGFyYW0gaW5wdXRTdHJcclxuICAgICAqL1xyXG4gICAgcGFyc2UgPSAoaW5wdXRTdHI6IHN0cmluZyk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNodXRpbmdZYXJkVG9SZWR1Y2VkUG9seW5vbShpbnB1dFN0cik7XHJcbiAgICB9O1xyXG5cclxuICAgIGVtcHR5ID0gKCk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IFtdO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB6ZXJvID0gKCk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX21vbm9tcy5wdXNoKG5ldyBNb25vbSgpLnplcm8oKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGNsb25lID0gKCk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIGxldCBQID0gbmV3IFBvbHlub20oKSxcclxuICAgICAgICAgICAgTTogTW9ub21bXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBNLnB1c2gobS5jbG9uZSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFAubW9ub21zID0gTTtcclxuICAgICAgICByZXR1cm4gUDtcclxuICAgIH07XHJcblxyXG4gICAgcm5kU2ltcGxlID0gKGRlZ3JlZTogbnVtYmVyID0gMSwgbGV0dGVyczogc3RyaW5nID0gJ3gnLCB1bml0OiBib29sZWFuID0gZmFsc2UsIHdpdGhGcmFjdGlvbjogYm9vbGVhbiA9IGZhbHNlLCBhbGxvd1plcm86IGJvb2xlYW4gPSB0cnVlKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgcG9seW5vbSAodGhpcykgaXMgYWxyZWFkeSBjcmVhdGVkLCBpbml0aWFsaXNlIGl0IVxyXG4gICAgICAgIHRoaXMuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgbGV0IE06IE1vbm9tO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBkZWdyZWU7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIE0gPSBuZXcgTW9ub20oKS5yYW5kb20obGV0dGVycywgaSwgd2l0aEZyYWN0aW9uLCAoaSA9PT0gZGVncmVlKSA/IGZhbHNlIDogYWxsb3daZXJvKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gaGF2ZSB0aGUgZ3JlYXRlc3QgZGVncmVlIG1vbm9tIGNvZWZmaWNpZW50IHRvIGJlIHVuaXQuXHJcbiAgICAgICAgICAgIGlmICh1bml0ICYmIGkgPT09IGRlZ3JlZSkge1xyXG4gICAgICAgICAgICAgICAgTS5jb2VmZmljaWVudCA9IG5ldyBGcmFjdGlvbigpLnBhcnNlKCcxJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hZGRNb25vbShNKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgcm5kRmFjdG9yYWJsZSA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICB0aGlzLmVtcHR5KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIG9uZSBvciBtb3JlIG1vbm9tcyB0byB0aGUgcG9seW5vbXMuXHJcbiAgICAgKiBAcGFyYW0gTVxyXG4gICAgICovXHJcbiAgICBhZGRNb25vbSA9ICguLi5NOiBNb25vbVtdKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiBNKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21vbm9tcy5wdXNoKG0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWluIHBhcnNlIHVzaW5nIGEgc2h1dHRpbmcgeWFyZCBjbGFzc1xyXG4gICAgICogQHBhcmFtIGlucHV0U3RyXHJcbiAgICAgKi9cclxuICAgIHNodXRpbmdZYXJkVG9SZWR1Y2VkUG9seW5vbShpbnB1dFN0cjogc3RyaW5nKTogUG9seW5vbSB7XHJcbiAgICAgICAgLy8gR2V0IHRoZSBSUE4gYXJyYXkgb2YgdGhlIGN1cnJlbnQgZXhwcmVzc2lvblxyXG4gICAgICAgIGxldCBTWTogU2h1dGluZ3lhcmQgPSBuZXcgU2h1dGluZ3lhcmQoKS5wYXJzZShpbnB1dFN0ciksXHJcbiAgICAgICAgICAgIHJwbjogc3RyaW5nW10gPSBTWS5ycG47XHJcblxyXG4gICAgICAgIGxldCBtOiBQb2x5bm9tW10gPSBbXSwgbTE6IFBvbHlub20sIG0yOiBQb2x5bm9tO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB0b2tlbiBvZiBycG4pIHtcclxuICAgICAgICAgICAgaWYgKFNZLmlzT3BlcmF0aW9uKHRva2VuKSkge1xyXG4gICAgICAgICAgICAgICAgbTIgPSAobS5wb3AoKSkgfHwgbmV3IFBvbHlub20oKS56ZXJvKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBmaXJzdCBpdGVtIGZyb20gdGhlIHN0YWNrXHJcbiAgICAgICAgICAgICAgICAgICAgbTEgPSAobS5wb3AoKSkgfHwgbmV3IFBvbHlub20oKS56ZXJvKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgaXMgaW4gdGhlIHN0YWNrIC0gY3JlYXRlIGFuIGVtcHR5IHBvbHlub21cclxuICAgICAgICAgICAgICAgICAgICBtMSA9IG5ldyBQb2x5bm9tKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhtMS5wb2x5bm9tLCBtMi5wb2x5bm9tLCB0b2tlbik7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRva2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnKyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0xLmFkZChtMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJy0nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtMS5zdWJzdHJhY3QobTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICcqJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbTEubXVsdGlwbHkobTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBTaHV0aW5nIHlhcmQgdG8gcG9seW5vbSBkaXZpZGUuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnLyc6IGNvbnNvbGUubG9nKG0xLmRpc3BsYXksIG0yLmRpc3BsYXkpO20xLmRpdmlkZShtMik7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBub3Qgb3BlcmF0aW9uIHZhbHVlIGFyZSBjb252ZXJ0ZWQgdG8gcG9seW5vbS4gVGhlcmVmb3JlLCB0aGUgcG93IHZhbHVlIG11c3QgYmUgY29udmVydGVkIHRvIGFuIGludGVnZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogU2h1dGluZyB5YXJkIHRvIHBvbHlub20gcG93IDogY2FzZSAnXic6IG0xLnBvdygrbTIubW9ub21zWzBdLmNvZWZmaWNpZW50Lm51bWVyYXRvcik7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUb2tlbiBub3QgcmVjb2duaXplZCBpbiBzaHV0aW5nIHlhcmQgdG8gcmVkdWNlIHBvbHlub206ICcsIHRva2VuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG0ucHVzaChtMSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbS5wdXNoKG5ldyBQb2x5bm9tKCkuYWRkTW9ub20obmV3IE1vbm9tKCkucGFyc2UodG9rZW4pKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IG1bMF0ubW9ub21zO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1hdGhlbWF0aWNhbCBvcGVyYXRpb25cclxuICAgIHJlZHVjZSA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vbm9tcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCB0aGlzLl9tb25vbXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tb25vbXNbaV0uaXNTYW1lQXModGhpcy5tb25vbXNbal0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9ub21zW2ldLmFkZCh0aGlzLm1vbm9tc1tqXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9ub21zLnNwbGljZShqLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGFsbCBudWxsIG1vbm9tc1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IHRoaXMuX21vbm9tcy5maWx0ZXIoKG0pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG0uY29lZmZpY2llbnQudmFsdWUgIT09IDBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVkdWNlIGFsbCBtb25vbXMgY29lZmZpY2llbnQuXHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiB0aGlzLl9tb25vbXMpIHtcclxuICAgICAgICAgICAgbS5jb2VmZmljaWVudC5yZWR1Y2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvbHlub20oKS56ZXJvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlZHVjZSB0aGUgY29lZmZpY2llbnQgdmFsdWUgYXMgaWYgdGhlIHBvbHlub20gd2FzIGVxdWFsIHRvIHplcm8uXHJcbiAgICAgKi9cclxuICAgIG1pbmlmeSA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICAvLyBGaXJzdCBtdWx0aXBseSBieSB0aGUgY29tbW9uIGRlbm9taW5vYXRyLlxyXG4gICAgICAgIHRoaXMubXVsdGlwbHlCeUludGVnZXIodGhpcy5sY21EZW5vbWluYXRvcigpKS5kaXZpZGVCeUludGVnZXIodGhpcy5nY2ROdW1lcmF0b3IoKSkucmVkdWNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlb3JkZXIgPSAobGV0dGVyOiBzdHJpbmcgPSAneCcpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICAvLyBUT0RPOiBNdXN0IGhhbmRsZSBtdWx0aXBsZSBsZXR0ZXIgcmVvcmRlciBzeXN0ZW1cclxuICAgICAgICB0aGlzLl9tb25vbXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYi5kZWdyZWUobGV0dGVyKSAtIGEuZGVncmVlKGxldHRlcilcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgb3Bwb3NlZCA9ICgpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICB0aGlzLl9tb25vbXMgPSB0aGlzLl9tb25vbXMubWFwKG0gPT4gbS5vcHBvc2VkKCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBhZGQgPSAoUDogUG9seW5vbSk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IHRoaXMuX21vbm9tcy5jb25jYXQoUC5tb25vbXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdWJzdHJhY3QgPSAoUDogUG9seW5vbSk6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IHRoaXMuX21vbm9tcy5jb25jYXQoUC5jbG9uZSgpLm9wcG9zZWQoKS5tb25vbXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBtdWx0aXBseSA9IChQOiBQb2x5bm9tKTogUG9seW5vbSA9PiB7XHJcbiAgICAgICAgbGV0IE06IE1vbm9tW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtMSBvZiB0aGlzLl9tb25vbXMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgbTIgb2YgUC5tb25vbXMpIHtcclxuICAgICAgICAgICAgICAgIE0ucHVzaChNb25vbS54bXVsdGlwbHkobTEsIG0yKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX21vbm9tcyA9IE07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIG11bHRpcGx5QnlJbnRlZ2VyID0gKG5iOiBudW1iZXIpOiBQb2x5bm9tID0+IHtcclxuICAgICAgICBsZXQgbmJGID0gbmV3IEZyYWN0aW9uKCkucGFyc2VCeUludGVnZXIobmIpO1xyXG4gICAgICAgIGZvciAobGV0IG0gb2YgdGhpcy5fbW9ub21zKSB7XHJcbiAgICAgICAgICAgIG0uY29lZmZpY2llbnQubXVsdGlwbHkobmJGKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBtdWx0aXBseUJ5TW9ub20gPSAoTTogTW9ub20pOiBQb2x5bm9tID0+IHtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBtLm11bHRpcGx5KE0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlZHVjZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkaXZpZGVCeUludGVnZXIgPSAobmI6IG51bWJlcik6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIGxldCBuYkYgPSBuZXcgRnJhY3Rpb24oKS5wYXJzZUJ5SW50ZWdlcihuYik7XHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiB0aGlzLl9tb25vbXMpIHtcclxuICAgICAgICAgICAgbS5jb2VmZmljaWVudC5kaXZpZGUobmJGKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGl2aWRlIHRoZSBjdXJyZW50IHBvbHlub20gYnkgdHdvIHBvbHlub21zLlxyXG4gICAgICogQHBhcmFtIFBcclxuICAgICAqL1xyXG4gICAgZGl2aWRlID0gKFA6IFBvbHlub20pOiB7IHF1b3RpZW50OiBQb2x5bm9tLCByZW1pbmRlcjogUG9seW5vbSB9ID0+IHtcclxuICAgICAgICBsZXQgcXVvdGllbnQ6IFBvbHlub20sXHJcbiAgICAgICAgICAgIHJlbWluZGVyOiBQb2x5bm9tLFxyXG4gICAgICAgICAgICBtYXhNUDogTW9ub20gPSBQLm1vbm9tQnlEZWdyZWUoKSxcclxuICAgICAgICAgICAgbmV3TTogTW9ub207XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpc2UgdGhlIHBvbHlub21zLlxyXG4gICAgICAgIHF1b3RpZW50ID0gbmV3IFBvbHlub20oKS56ZXJvKCk7XHJcbiAgICAgICAgcmVtaW5kZXIgPSB0aGlzLmNsb25lKCk7XHJcblxyXG4gICAgICAgIC8vIE1ha2UgdGhlIGV1Y2xpZGlhbiBkaXZpc2lvbiBvZiB0aGUgdHdvIHBvbHlub21zLlxyXG4gICAgICAgIHdoaWxlIChyZW1pbmRlci5kZWdyZWUoKSA+PSBQLmRlZ3JlZSgpKSB7XHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgZ3JlYXRlc3QgbW9ub20gZGl2aWRlZCBieSB0aGUgbWF4IG1vbm9tIG9mIHRoZSBkaXZpZGVyXHJcbiAgICAgICAgICAgIG5ld00gPSByZW1pbmRlci5tb25vbUJ5RGVncmVlKCkuY2xvbmUoKS5kaXZpZGUobWF4TVApO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5ld00uaXNaZXJvKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBuZXcgcXVvdGllbnQgYW5kIHJlbWluZGVyLlxyXG4gICAgICAgICAgICBxdW90aWVudC5hZGRNb25vbShuZXdNKTtcclxuICAgICAgICAgICAgcmVtaW5kZXIuc3Vic3RyYWN0KFAuY2xvbmUoKS5tdWx0aXBseUJ5TW9ub20obmV3TSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtxdW90aWVudCwgcmVtaW5kZXJ9O1xyXG4gICAgfTtcclxuXHJcbiAgICBwb3cgPSAobmI6IG51bWJlcik6IFBvbHlub20gPT4ge1xyXG4gICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobmIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnplcm8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5iIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy56ZXJvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuYiA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvbHlub20oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBQID0gdGhpcy5jbG9uZSgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbmI7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLm11bHRpcGx5KFApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGVncmVlID0gKGxldHRlcj86IHN0cmluZyk6IG51bWJlciA9PiB7XHJcbiAgICAgICAgbGV0IGQ6IG51bWJlciA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgbSBvZiB0aGlzLl9tb25vbXMpIHtcclxuICAgICAgICAgICAgZCA9IE1hdGgubWF4KG0uZGVncmVlKGxldHRlciksIGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH07XHJcblxyXG4gICAgbW9ub21CeURlZ3JlZSA9IChkZWdyZWU/OiBudW1iZXIsIGxldHRlcj86IHN0cmluZyk6IE1vbm9tID0+IHtcclxuICAgICAgICBpZiAoZGVncmVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBoaWdoZXN0IGRlZ3JlZSBtb25vbS5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9ub21CeURlZ3JlZSh0aGlzLmRlZ3JlZShsZXR0ZXIpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlZHVjZSB0aGUgcG9seW5vbS5cclxuICAgICAgICBsZXQgTSA9IHRoaXMuY2xvbmUoKS5yZWR1Y2UoKTtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIE0uX21vbm9tcykge1xyXG4gICAgICAgICAgICBpZiAobS5kZWdyZWUobGV0dGVyKSA9PT0gZGVncmVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5jbG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOT3RoaW5nIHdhcyBmb3VuZCAtIHJldHVybiB0aGUgbnVsbCBtb25vbS5cclxuICAgICAgICByZXR1cm4gbmV3IE1vbm9tKCkuemVybygpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBFdmFsdWF0ZSBhIHBvbHlub20uXHJcbiAgICBldmFsdWF0ZSA9ICh2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogRnJhY3Rpb24gfSk6IEZyYWN0aW9uID0+IHtcclxuICAgICAgICBsZXQgciA9IG5ldyBGcmFjdGlvbigpLnplcm8oKTtcclxuXHJcbiAgICAgICAgdGhpcy5fbW9ub21zLmZvckVhY2gobW9ub20gPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtb25vbS5kaXNwbGF5LCB2YWx1ZXMsIG1vbm9tLmV2YWx1YXRlKHZhbHVlcykuZGlzcGxheSk7XHJcbiAgICAgICAgICAgIHIuYWRkKG1vbm9tLmV2YWx1YXRlKHZhbHVlcykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZSBpZiB0aGUgY3VycmVudCBwb2x5bm9tIGlzaWRpdmRhYmxlIGJ5IFBcclxuICAgICAqIFRPRE86IHNob3VsZCB3b3JrIHdpdGggYW55IHBvbHlub20sIG5vdCBvbmx5IGZpcnN0IGRlZ3JlZSBwb3lsbm9tcyBhbmQgdGhlIGxldHRlciBzaG91bGQgZGlzYXBlYXJcclxuICAgICAqIEBwYXJhbSBQXHJcbiAgICAgKiBAcGFyYW0gbGV0dGVyIC0gZGVmYXVsdCBsZXR0ZXJcclxuICAgICAqL1xyXG4gICAgY2FuRGl2aWRlID0gKFA6IFBvbHlub20sIGxldHRlcjogc3RyaW5nID0gJ3gnKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgY29uc3QgZCA9IFAuZGVncmVlKCk7XHJcblxyXG4gICAgICAgIGxldCBldmFsVmFsdWU6IHsgW2tleTogc3RyaW5nXTogRnJhY3Rpb24gfSA9IHt9O1xyXG4gICAgICAgIC8vIEEgemVybyBkZWdyZWUgcG9seW5vbSBjYW4gYWx3YXlzIGRpdmlkZSwgZXhjZXB0IGlmIGl0J3MgdGhlIHplcm8gcG9seW5vbS5cclxuICAgICAgICBpZiAoZCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIVAuaXNUcml2aWFsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVGhlIHBvbHlub20gaXMgb2YgZGVncmVlZSBvbmUuXHJcbiAgICAgICAgaWYgKGQgPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3QgeiA9IFAuZ2V0WmVyb2VzKCk7XHJcbiAgICAgICAgICAgIC8vIFRoZSB6ZXJvIGlzIGFuIHVuZGVmaW5lZCB6ZXJvLlxyXG4gICAgICAgICAgICBpZiAoelswXSA9PT0gdHJ1ZSB8fCB6WzBdID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmFsVmFsdWVbbGV0dGVyXSA9IHpbMF07XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2YWx1YXRlKGV2YWxWYWx1ZSkudmFsdWUgPT09IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGUgcG9seW5vbSBpcyBvZiBkZWdyZWUgMiBvciBtb3JlLi4uXHJcbiAgICAgICAgaWYgKGQgPiAxKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50bHksIG9ubHkgZmlyc3QgZGVncmVlIHBvbHlub20gYXJlIHN1cHBvcnRlZCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFRPRE86IGdldCB6ZXJvZXMgZm9yIG1vcmUgdGhhbiBmaXJzdCBkZWdyZWVcclxuICAgIGdldFplcm9lcyA9ICgpOiAoRnJhY3Rpb24gfCBib29sZWFuKVtdID0+IHtcclxuICAgICAgICBsZXQgWjogRnJhY3Rpb25bXSA9IFtdO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMuZGVncmVlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vbm9tc1swXS5jb2VmZmljaWVudC52YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2VdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBvbmx5IG9uZSBtb25vbXMsXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9ub21zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IEZyYWN0aW9uKCkuemVybygpXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IFAgPSB0aGlzLmNsb25lKCkucmVkdWNlKCkucmVvcmRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbUC5tb25vbXNbMV0uY29lZmZpY2llbnQub3Bwb3NlZCgpLmRpdmlkZShQLm1vbm9tc1swXS5jb2VmZmljaWVudCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHplcm9zIG9mIGFuIGVxdWF0aW9uIG9mIHNlY29uZCBkZWdyZWUuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RydWUsIGZhbHNlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFo7XHJcbiAgICB9O1xyXG5cclxuICAgIGdldERlbm9taW5hdG9ycyA9ICgpOiBudW1iZXJbXSA9PiB7XHJcbiAgICAgICAgbGV0IGRlbm9taW5hdG9yczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBkZW5vbWluYXRvcnMucHVzaChtLmNvZWZmaWNpZW50LmRlbm9taW5hdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlbm9taW5hdG9ycztcclxuICAgIH07XHJcbiAgICBnZXROdW1lcmF0b3JzID0gKCk6IG51bWJlcltdID0+IHtcclxuICAgICAgICBsZXQgbnVtZXJhdG9yczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBudW1lcmF0b3JzLnB1c2gobS5jb2VmZmljaWVudC5udW1lcmF0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVtZXJhdG9ycztcclxuICAgIH07XHJcblxyXG4gICAgbGNtRGVub21pbmF0b3IgPSAoKTogbnVtYmVyID0+IHtcclxuICAgICAgICByZXR1cm4gTnVtZXJpYy5sY20oLi4udGhpcy5nZXREZW5vbWluYXRvcnMoKSk7XHJcbiAgICB9O1xyXG4gICAgZ2NkRGVub21pbmF0b3IgPSAoKTogbnVtYmVyID0+IHtcclxuICAgICAgICByZXR1cm4gTnVtZXJpYy5nY2QoLi4udGhpcy5nZXREZW5vbWluYXRvcnMoKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGxjbU51bWVyYXRvciA9ICgpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiBOdW1lcmljLmxjbSguLi50aGlzLmdldE51bWVyYXRvcnMoKSk7XHJcbiAgICB9O1xyXG4gICAgZ2NkTnVtZXJhdG9yID0gKCk6IG51bWJlciA9PiB7XHJcbiAgICAgICAgcmV0dXJuIE51bWVyaWMuZ2NkKC4uLnRoaXMuZ2V0TnVtZXJhdG9ycygpKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIENvbXBhcmUgdGhpcyBwb2x5bm9tIHdpdGggYW5vdGhlciBvbmUuXHJcbiAgICAgKiBAcGFyYW0gUFxyXG4gICAgICovXHJcbiAgICBpc1NhbWVBcyA9IChQOiBQb2x5bm9tKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGNsb25lIHZlcnNpb24gdG8gcmVkdWNlIHRoZW0gd2l0aG91dCBhbHRlcmluZyB0aGUgb3JpZ2luYWwgcG9seW5vbXMuXHJcbiAgICAgICAgbGV0IGNQMSA9IHRoaXMuY2xvbmUoKS5yZWR1Y2UoKS5yZW9yZGVyKCksXHJcbiAgICAgICAgICAgIGNQMiA9IFAuY2xvbmUoKS5yZWR1Y2UoKS5yZW9yZGVyKCk7XHJcblxyXG4gICAgICAgIC8vIEJvdGggaGF2ZW4ndCB0aGUgc2FtZSBudW1iZXIgb2YgbW9ub21zLlxyXG4gICAgICAgIGlmIChjUDEubGVuZ3RoICE9PSBjUDIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoZXkgbXVzdCBoYXZlIHRoZSBzYW1lIGRlZ3JlZS5cclxuICAgICAgICBpZiAoY1AxLmRlZ3JlZSgpICE9PSBjUDIuZGVncmVlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBjUDEubW9ub21zKSB7XHJcbiAgICAgICAgICAgIGlmICghY1AxLm1vbm9tc1tpXS5pc0VxdWFsKGNQMi5tb25vbXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBpc09wcG9zZWRBdCA9IChQOiBQb2x5bm9tKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lQXMoUC5jbG9uZSgpLm9wcG9zZWQoKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgZ2VuRGlzcGxheSA9IChvdXRwdXQ/OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgIGxldCBQOiBzdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBrIG9mIHRoaXMuX21vbm9tcykge1xyXG4gICAgICAgICAgICBpZiAoay5jb2VmZmljaWVudC52YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGsuY29lZmZpY2llbnQuc2lnbigpID09PSAxICYmIFAgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBQICs9ICcrJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBQICs9IChvdXRwdXQgPT09ICd0ZXgnKSA/IGsudGV4IDogay5kaXNwbGF5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gR2V0dGVyIGFuZCBzZXR0ZXJcclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgLy8gVE9ETzogTXVzdCByZWR1Y2UgdGhlIG1vbm9tcyBsaXN0IHRvIHJtZW92ZSB0aGUgemVybyBjb2VmZmljaWVudC5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbW9ub21zLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9ub21zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb25vbXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG1vbm9tcyhNOiBNb25vbVtdKSB7XHJcbiAgICAgICAgdGhpcy5fbW9ub21zID0gTTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGlzcGxheSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW5EaXNwbGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW5EaXNwbGF5KCd0ZXgnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNUcml2aWFsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb25vbXMubGVuZ3RoID09PSAwICYmIHRoaXMuX21vbm9tc1swXS5jb2VmZmljaWVudC52YWx1ZSA9PT0gMDtcclxuICAgIH1cclxufSIsImltcG9ydCB7RnJhY3Rpb259IGZyb20gXCIuL21hdGhzL2ZyYWN0aW9uXCI7XHJcbmltcG9ydCB7UG9seW5vbX0gZnJvbSBcIi4vbWF0aHMvcG9seW5vbVwiO1xyXG5pbXBvcnQge01vbm9tfSBmcm9tIFwiLi9tYXRocy9tb25vbVwiO1xyXG5pbXBvcnQge051bWVyaWN9IGZyb20gXCIuL21hdGhzL251bWVyaWNcIjtcclxuXHJcblxyXG4oPGFueT53aW5kb3cpLlBpID0ge1xyXG4gICAgTnVtZXJpYzogTnVtZXJpYyxcclxuICAgIEZyYWN0aW9uOiBGcmFjdGlvbixcclxuICAgIE1vbm9tOiBNb25vbSxcclxuICAgIFBvbHlub206IFBvbHlub21cclxufTsiXSwic291cmNlUm9vdCI6IiJ9